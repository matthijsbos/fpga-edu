// Copyright 1986-2015 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2015.1 (win64) Build 1215546 Mon Apr 27 19:22:08 MDT 2015
// Date        : Sat May 16 23:01:08 2015
// Host        : Thinkpad-Twist running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               C:/Users/Matthijs/Dropbox/Informatica/Afstuderen/fpga-edu/Vivado/fpga-edu.srcs/sources_1/ip/controller/controller_funcsim.v
// Design      : controller
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a100tcsg324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "controller,microblaze_mcs,{}" *) (* core_generation_info = "controller,microblaze_mcs,{x_ipProduct=Vivado 2015.1,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=microblaze_mcs,x_ipVersion=2.3,x_ipCoreRevision=0,x_ipLanguage=VHDL,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_MICROBLAZE_INSTANCE=controller,C_AVOID_PRIMITIVES=0,C_PATH=mcs_0/U0,C_FREQ=100000000,C_MEMSIZE=32768,C_DEBUG_ENABLED=0,C_JTAG_CHAIN=2,C_TRACE=0,C_USE_IO_BUS=0,C_USE_UART_RX=1,C_USE_UART_TX=1,C_UART_BAUDRATE=9600,C_UART_DATA_BITS=8,C_UART_USE_PARITY=0,C_UART_ODD_PARITY=0,C_UART_RX_INTERRUPT=1,C_UART_TX_INTERRUPT=1,C_UART_ERROR_INTERRUPT=1,C_UART_PROG_BAUDRATE=0,C_USE_FIT1=0,C_FIT1_No_CLOCKS=6216,C_FIT1_INTERRUPT=0,C_USE_FIT2=0,C_FIT2_No_CLOCKS=6216,C_FIT2_INTERRUPT=0,C_USE_FIT3=0,C_FIT3_No_CLOCKS=6216,C_FIT3_INTERRUPT=0,C_USE_FIT4=0,C_FIT4_No_CLOCKS=6216,C_FIT4_INTERRUPT=0,C_USE_PIT1=0,C_PIT1_SIZE=32,C_PIT1_READABLE=1,C_PIT1_PRESCALER=0,C_PIT1_INTERRUPT=0,C_USE_PIT2=0,C_PIT2_SIZE=32,C_PIT2_READABLE=1,C_PIT2_PRESCALER=0,C_PIT2_INTERRUPT=0,C_USE_PIT3=0,C_PIT3_SIZE=32,C_PIT3_READABLE=1,C_PIT3_PRESCALER=0,C_PIT3_INTERRUPT=0,C_USE_PIT4=0,C_PIT4_SIZE=32,C_PIT4_READABLE=1,C_PIT4_PRESCALER=0,C_PIT4_INTERRUPT=0,C_USE_GPO1=1,C_GPO1_SIZE=32,C_GPO1_INIT=0x00000000,C_USE_GPO2=0,C_GPO2_SIZE=32,C_GPO2_INIT=0x00000000,C_USE_GPO3=0,C_GPO3_SIZE=32,C_GPO3_INIT=0x00000000,C_USE_GPO4=0,C_GPO4_SIZE=32,C_GPO4_INIT=0x00000000,C_USE_GPI1=1,C_GPI1_SIZE=32,C_GPI1_INTERRUPT=0,C_USE_GPI2=0,C_GPI2_SIZE=32,C_GPI2_INTERRUPT=0,C_USE_GPI3=0,C_GPI3_SIZE=32,C_GPI3_INTERRUPT=0,C_USE_GPI4=0,C_GPI4_SIZE=32,C_GPI4_INTERRUPT=0,C_INTC_USE_EXT_INTR=0,C_INTC_INTR_SIZE=1,C_INTC_LEVEL_EDGE=0x0000,C_INTC_POSITIVE=0xFFFF,C_INTC_ASYNC_INTR=0xFFFF,C_INTC_NUM_SYNC_FF=2}" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "microblaze_mcs,Vivado 2015.1" *) 
(* NotValidForBitStream *)
module controller
   (Clk,
    Reset,
    UART_Rx,
    UART_Tx,
    UART_Interrupt,
    GPO1,
    GPI1,
    GPI1_Interrupt,
    INTC_IRQ);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) input Clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.Rst RST" *) input Reset;
  (* x_interface_info = "xilinx.com:interface:uart:1.0 UART RxD" *) input UART_Rx;
  (* x_interface_info = "xilinx.com:interface:uart:1.0 UART TxD" *) output UART_Tx;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 INTERRUPT.UART_Interrupt INTERRUPT" *) output UART_Interrupt;
  (* x_interface_info = "xilinx.com:interface:gpio:1.0 GPIO1 TRI_O" *) output [31:0]GPO1;
  (* x_interface_info = "xilinx.com:interface:gpio:1.0 GPIO1 TRI_I" *) input [31:0]GPI1;
  output GPI1_Interrupt;
  output INTC_IRQ;

  wire Clk;
  wire [31:0]GPI1;
  wire GPI1_Interrupt;
  wire [31:0]GPO1;
  wire INTC_IRQ;
  wire Reset;
  wire UART_Interrupt;
  wire UART_Rx;
  wire UART_Tx;
  wire NLW_U0_FIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT1_Toggle_UNCONNECTED;
  wire NLW_U0_FIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT2_Toggle_UNCONNECTED;
  wire NLW_U0_FIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT3_Toggle_UNCONNECTED;
  wire NLW_U0_FIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT4_Toggle_UNCONNECTED;
  wire NLW_U0_GPI2_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI3_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI4_Interrupt_UNCONNECTED;
  wire NLW_U0_IO_Addr_Strobe_UNCONNECTED;
  wire NLW_U0_IO_Read_Strobe_UNCONNECTED;
  wire NLW_U0_IO_Write_Strobe_UNCONNECTED;
  wire NLW_U0_PIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT1_Toggle_UNCONNECTED;
  wire NLW_U0_PIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT2_Toggle_UNCONNECTED;
  wire NLW_U0_PIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT3_Toggle_UNCONNECTED;
  wire NLW_U0_PIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT4_Toggle_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [31:0]NLW_U0_GPO2_UNCONNECTED;
  wire [31:0]NLW_U0_GPO3_UNCONNECTED;
  wire [31:0]NLW_U0_GPO4_UNCONNECTED;
  wire [31:0]NLW_U0_IO_Address_UNCONNECTED;
  wire [3:0]NLW_U0_IO_Byte_Enable_UNCONNECTED;
  wire [31:0]NLW_U0_IO_Write_Data_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_DEBUG_ENABLED = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FIT1_INTERRUPT = "0" *) 
  (* C_FIT1_No_CLOCKS = "6216" *) 
  (* C_FIT2_INTERRUPT = "0" *) 
  (* C_FIT2_No_CLOCKS = "6216" *) 
  (* C_FIT3_INTERRUPT = "0" *) 
  (* C_FIT3_No_CLOCKS = "6216" *) 
  (* C_FIT4_INTERRUPT = "0" *) 
  (* C_FIT4_No_CLOCKS = "6216" *) 
  (* C_FREQ = "100000000" *) 
  (* C_GPI1_INTERRUPT = "0" *) 
  (* C_GPI1_SIZE = "32" *) 
  (* C_GPI2_INTERRUPT = "0" *) 
  (* C_GPI2_SIZE = "32" *) 
  (* C_GPI3_INTERRUPT = "0" *) 
  (* C_GPI3_SIZE = "32" *) 
  (* C_GPI4_INTERRUPT = "0" *) 
  (* C_GPI4_SIZE = "32" *) 
  (* C_GPO1_INIT = "0" *) 
  (* C_GPO1_SIZE = "32" *) 
  (* C_GPO2_INIT = "0" *) 
  (* C_GPO2_SIZE = "32" *) 
  (* C_GPO3_INIT = "0" *) 
  (* C_GPO3_SIZE = "32" *) 
  (* C_GPO4_INIT = "0" *) 
  (* C_GPO4_SIZE = "32" *) 
  (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) 
  (* C_INTC_INTR_SIZE = "1" *) 
  (* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) 
  (* C_INTC_NUM_SYNC_FF = "2" *) 
  (* C_INTC_POSITIVE = "16'b1111111111111111" *) 
  (* C_INTC_USE_EXT_INTR = "0" *) 
  (* C_JTAG_CHAIN = "2" *) 
  (* C_MEMSIZE = "32768" *) 
  (* C_MICROBLAZE_INSTANCE = "controller" *) 
  (* C_PATH = "mcs_0/U0" *) 
  (* C_PIT1_INTERRUPT = "0" *) 
  (* C_PIT1_PRESCALER = "0" *) 
  (* C_PIT1_READABLE = "1" *) 
  (* C_PIT1_SIZE = "32" *) 
  (* C_PIT2_INTERRUPT = "0" *) 
  (* C_PIT2_PRESCALER = "0" *) 
  (* C_PIT2_READABLE = "1" *) 
  (* C_PIT2_SIZE = "32" *) 
  (* C_PIT3_INTERRUPT = "0" *) 
  (* C_PIT3_PRESCALER = "0" *) 
  (* C_PIT3_READABLE = "1" *) 
  (* C_PIT3_SIZE = "32" *) 
  (* C_PIT4_INTERRUPT = "0" *) 
  (* C_PIT4_PRESCALER = "0" *) 
  (* C_PIT4_READABLE = "1" *) 
  (* C_PIT4_SIZE = "32" *) 
  (* C_TRACE = "0" *) 
  (* C_UART_BAUDRATE = "9600" *) 
  (* C_UART_DATA_BITS = "8" *) 
  (* C_UART_ERROR_INTERRUPT = "1" *) 
  (* C_UART_ODD_PARITY = "0" *) 
  (* C_UART_PROG_BAUDRATE = "0" *) 
  (* C_UART_RX_INTERRUPT = "1" *) 
  (* C_UART_TX_INTERRUPT = "1" *) 
  (* C_UART_USE_PARITY = "0" *) 
  (* C_USE_FIT1 = "0" *) 
  (* C_USE_FIT2 = "0" *) 
  (* C_USE_FIT3 = "0" *) 
  (* C_USE_FIT4 = "0" *) 
  (* C_USE_GPI1 = "1" *) 
  (* C_USE_GPI2 = "0" *) 
  (* C_USE_GPI3 = "0" *) 
  (* C_USE_GPI4 = "0" *) 
  (* C_USE_GPO1 = "1" *) 
  (* C_USE_GPO2 = "0" *) 
  (* C_USE_GPO3 = "0" *) 
  (* C_USE_GPO4 = "0" *) 
  (* C_USE_IO_BUS = "0" *) 
  (* C_USE_PIT1 = "0" *) 
  (* C_USE_PIT2 = "0" *) 
  (* C_USE_PIT3 = "0" *) 
  (* C_USE_PIT4 = "0" *) 
  (* C_USE_UART_RX = "1" *) 
  (* C_USE_UART_TX = "1" *) 
  controller_microblaze_mcs U0
       (.Clk(Clk),
        .FIT1_Interrupt(NLW_U0_FIT1_Interrupt_UNCONNECTED),
        .FIT1_Toggle(NLW_U0_FIT1_Toggle_UNCONNECTED),
        .FIT2_Interrupt(NLW_U0_FIT2_Interrupt_UNCONNECTED),
        .FIT2_Toggle(NLW_U0_FIT2_Toggle_UNCONNECTED),
        .FIT3_Interrupt(NLW_U0_FIT3_Interrupt_UNCONNECTED),
        .FIT3_Toggle(NLW_U0_FIT3_Toggle_UNCONNECTED),
        .FIT4_Interrupt(NLW_U0_FIT4_Interrupt_UNCONNECTED),
        .FIT4_Toggle(NLW_U0_FIT4_Toggle_UNCONNECTED),
        .GPI1(GPI1),
        .GPI1_Interrupt(GPI1_Interrupt),
        .GPI2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI2_Interrupt(NLW_U0_GPI2_Interrupt_UNCONNECTED),
        .GPI3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI3_Interrupt(NLW_U0_GPI3_Interrupt_UNCONNECTED),
        .GPI4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI4_Interrupt(NLW_U0_GPI4_Interrupt_UNCONNECTED),
        .GPO1(GPO1),
        .GPO2(NLW_U0_GPO2_UNCONNECTED[31:0]),
        .GPO3(NLW_U0_GPO3_UNCONNECTED[31:0]),
        .GPO4(NLW_U0_GPO4_UNCONNECTED[31:0]),
        .INTC_IRQ(INTC_IRQ),
        .INTC_Interrupt(1'b0),
        .IO_Addr_Strobe(NLW_U0_IO_Addr_Strobe_UNCONNECTED),
        .IO_Address(NLW_U0_IO_Address_UNCONNECTED[31:0]),
        .IO_Byte_Enable(NLW_U0_IO_Byte_Enable_UNCONNECTED[3:0]),
        .IO_Read_Data({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .IO_Read_Strobe(NLW_U0_IO_Read_Strobe_UNCONNECTED),
        .IO_Ready(1'b0),
        .IO_Write_Data(NLW_U0_IO_Write_Data_UNCONNECTED[31:0]),
        .IO_Write_Strobe(NLW_U0_IO_Write_Strobe_UNCONNECTED),
        .PIT1_Enable(1'b0),
        .PIT1_Interrupt(NLW_U0_PIT1_Interrupt_UNCONNECTED),
        .PIT1_Toggle(NLW_U0_PIT1_Toggle_UNCONNECTED),
        .PIT2_Enable(1'b0),
        .PIT2_Interrupt(NLW_U0_PIT2_Interrupt_UNCONNECTED),
        .PIT2_Toggle(NLW_U0_PIT2_Toggle_UNCONNECTED),
        .PIT3_Enable(1'b0),
        .PIT3_Interrupt(NLW_U0_PIT3_Interrupt_UNCONNECTED),
        .PIT3_Toggle(NLW_U0_PIT3_Toggle_UNCONNECTED),
        .PIT4_Enable(1'b0),
        .PIT4_Interrupt(NLW_U0_PIT4_Interrupt_UNCONNECTED),
        .PIT4_Toggle(NLW_U0_PIT4_Toggle_UNCONNECTED),
        .Reset(Reset),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .UART_Interrupt(UART_Interrupt),
        .UART_Rx(UART_Rx),
        .UART_Tx(UART_Tx));
endmodule

(* ORIG_REF_NAME = "ALU" *) 
module controller_ALU
   (LO,
    O,
    EX_Result,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    ADDRBWRADDR,
    BRAM_Addr_B,
    lmb_reg_write_reg,
    Carry_In,
    Compare_Instr_reg,
    Unsigned_Op,
    Op2,
    ALU_Op,
    Op1_Logic,
    Compare_Instr_reg_0,
    EX_Op2,
    EX_Op1,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Op1_Shift,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output LO;
  output O;
  output EX_Result;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output [12:0]ADDRBWRADDR;
  output [14:0]BRAM_Addr_B;
  output [0:0]lmb_reg_write_reg;
  input Carry_In;
  input Compare_Instr_reg;
  input Unsigned_Op;
  input Op2;
  input [0:1]ALU_Op;
  input Op1_Logic;
  input Compare_Instr_reg_0;
  input EX_Op2;
  input EX_Op1;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Op1_Shift;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.Native_56 ;
  input \Using_FPGA.Native_57 ;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire [12:0]ADDRBWRADDR;
  wire \ALL_Bits[10].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[11].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[12].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[13].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[14].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[15].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[16].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[17].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[18].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[19].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[1].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[20].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[21].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[22].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[23].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[24].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[25].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[26].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[27].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[28].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[29].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[2].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[30].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[31].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[3].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[4].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[5].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[6].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[7].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[8].ALU_Bit_I1_n_0 ;
  wire \ALL_Bits[9].ALU_Bit_I1_n_0 ;
  wire [0:1]ALU_Op;
  wire [14:0]BRAM_Addr_B;
  wire Carry_In;
  wire Compare_Instr_reg;
  wire Compare_Instr_reg_0;
  wire DI;
  wire EX_Op1;
  wire EX_Op2;
  wire EX_Result;
  wire LO;
  wire \No_Carry_Decoding.CarryIn_MUXCY_n_0 ;
  wire O;
  wire Op1_Logic;
  wire Op1_Shift;
  wire Op2;
  wire S;
  wire Unsigned_Op;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]lmb_reg_write_reg;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire lopt_129;
  wire lopt_13;
  wire lopt_130;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;

  assign lopt = lopt_126;
  assign lopt_127 = lopt_1;
  assign lopt_129 = lopt_3;
  assign lopt_130 = lopt_4;
  assign lopt_2 = lopt_128;
  controller_ALU_Bit__parameterized31 \ALL_Bits[0].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .Compare_Instr_reg(Compare_Instr_reg),
        .Compare_Instr_reg_0(Compare_Instr_reg_0),
        .EX_CarryOut(\ALL_Bits[1].ALU_Bit_I1_n_0 ),
        .LO(LO),
        .O(O),
        .Op1_Logic(Op1_Logic),
        .Op2(Op2),
        .Unsigned_Op(Unsigned_Op),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_8),
        .lopt_100(lopt_98),
        .lopt_101(lopt_99),
        .lopt_102(lopt_100),
        .lopt_103(lopt_101),
        .lopt_104(lopt_102),
        .lopt_105(lopt_103),
        .lopt_106(lopt_104),
        .lopt_107(lopt_105),
        .lopt_108(lopt_106),
        .lopt_109(lopt_107),
        .lopt_11(lopt_9),
        .lopt_110(lopt_108),
        .lopt_111(lopt_109),
        .lopt_112(lopt_110),
        .lopt_113(lopt_111),
        .lopt_114(lopt_112),
        .lopt_115(lopt_113),
        .lopt_116(lopt_114),
        .lopt_117(lopt_115),
        .lopt_118(lopt_116),
        .lopt_119(lopt_117),
        .lopt_12(lopt_10),
        .lopt_120(lopt_118),
        .lopt_121(lopt_119),
        .lopt_122(lopt_120),
        .lopt_123(lopt_121),
        .lopt_124(lopt_122),
        .lopt_125(lopt_123),
        .lopt_126(lopt_124),
        .lopt_127(lopt_125),
        .lopt_128(lopt_126),
        .lopt_129(EX_Op1),
        .lopt_13(lopt_11),
        .lopt_130(lopt_127),
        .lopt_131(lopt_128),
        .lopt_132(lopt_129),
        .lopt_133(lopt_130),
        .lopt_14(lopt_12),
        .lopt_15(lopt_13),
        .lopt_16(lopt_14),
        .lopt_17(lopt_15),
        .lopt_18(lopt_16),
        .lopt_19(lopt_17),
        .lopt_2(DI),
        .lopt_20(lopt_18),
        .lopt_21(lopt_19),
        .lopt_22(lopt_20),
        .lopt_23(lopt_21),
        .lopt_24(lopt_22),
        .lopt_25(lopt_23),
        .lopt_26(lopt_24),
        .lopt_27(lopt_25),
        .lopt_28(lopt_26),
        .lopt_29(lopt_27),
        .lopt_3(S),
        .lopt_30(lopt_28),
        .lopt_31(lopt_29),
        .lopt_32(lopt_30),
        .lopt_33(lopt_31),
        .lopt_34(lopt_32),
        .lopt_35(lopt_33),
        .lopt_36(lopt_34),
        .lopt_37(lopt_35),
        .lopt_38(lopt_36),
        .lopt_39(lopt_37),
        .lopt_4(\^lopt_2 ),
        .lopt_40(lopt_38),
        .lopt_41(lopt_39),
        .lopt_42(lopt_40),
        .lopt_43(lopt_41),
        .lopt_44(lopt_42),
        .lopt_45(lopt_43),
        .lopt_46(lopt_44),
        .lopt_47(lopt_45),
        .lopt_48(lopt_46),
        .lopt_49(lopt_47),
        .lopt_5(\^lopt_3 ),
        .lopt_50(lopt_48),
        .lopt_51(lopt_49),
        .lopt_52(lopt_50),
        .lopt_53(lopt_51),
        .lopt_54(lopt_52),
        .lopt_55(lopt_53),
        .lopt_56(lopt_54),
        .lopt_57(lopt_55),
        .lopt_58(lopt_56),
        .lopt_59(lopt_57),
        .lopt_6(\^lopt_4 ),
        .lopt_60(lopt_58),
        .lopt_61(lopt_59),
        .lopt_62(lopt_60),
        .lopt_63(lopt_61),
        .lopt_64(lopt_62),
        .lopt_65(lopt_63),
        .lopt_66(lopt_64),
        .lopt_67(lopt_65),
        .lopt_68(lopt_66),
        .lopt_69(lopt_67),
        .lopt_7(lopt_5),
        .lopt_70(lopt_68),
        .lopt_71(lopt_69),
        .lopt_72(lopt_70),
        .lopt_73(lopt_71),
        .lopt_74(lopt_72),
        .lopt_75(lopt_73),
        .lopt_76(lopt_74),
        .lopt_77(lopt_75),
        .lopt_78(lopt_76),
        .lopt_79(lopt_77),
        .lopt_8(lopt_6),
        .lopt_80(lopt_78),
        .lopt_81(lopt_79),
        .lopt_82(lopt_80),
        .lopt_83(lopt_81),
        .lopt_84(lopt_82),
        .lopt_85(lopt_83),
        .lopt_86(lopt_84),
        .lopt_87(lopt_85),
        .lopt_88(lopt_86),
        .lopt_89(lopt_87),
        .lopt_9(lopt_7),
        .lopt_90(lopt_88),
        .lopt_91(lopt_89),
        .lopt_92(lopt_90),
        .lopt_93(lopt_91),
        .lopt_94(lopt_92),
        .lopt_95(lopt_93),
        .lopt_96(lopt_94),
        .lopt_97(lopt_95),
        .lopt_98(lopt_96),
        .lopt_99(lopt_97));
  controller_ALU_Bit \ALL_Bits[10].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[6]),
        .EX_CarryOut(\ALL_Bits[11].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[10].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_39 ),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .lopt_3(lopt_92));
  controller_ALU_Bit_585 \ALL_Bits[11].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[5]),
        .EX_CarryOut(\ALL_Bits[12].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[11].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_37 ),
        .lopt(lopt_81),
        .lopt_1(lopt_82),
        .lopt_2(lopt_83),
        .lopt_3(lopt_91));
  controller_ALU_Bit_586 \ALL_Bits[12].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[4]),
        .EX_CarryOut(\ALL_Bits[13].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[12].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_35 ),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .lopt_3(lopt_90));
  controller_ALU_Bit_587 \ALL_Bits[13].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[3]),
        .EX_CarryOut(\ALL_Bits[14].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[13].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_33 ),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73),
        .lopt_3(lopt_77));
  controller_ALU_Bit_588 \ALL_Bits[14].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[2]),
        .EX_CarryOut(\ALL_Bits[15].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[14].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .lopt(lopt_68),
        .lopt_1(lopt_69),
        .lopt_2(lopt_70),
        .lopt_3(lopt_76));
  controller_ALU_Bit_589 \ALL_Bits[15].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[1]),
        .EX_CarryOut(\ALL_Bits[16].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[15].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .lopt_3(lopt_75));
  controller_ALU_Bit_590 \ALL_Bits[16].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[0]),
        .EX_CarryOut(\ALL_Bits[17].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[16].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .lopt_3(lopt_74));
  controller_ALU_Bit_591 \ALL_Bits[17].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[12]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[18].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[17].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .lopt(lopt_55),
        .lopt_1(lopt_56),
        .lopt_2(lopt_57),
        .lopt_3(lopt_61));
  controller_ALU_Bit_592 \ALL_Bits[18].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[11]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[19].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[18].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .lopt(lopt_52),
        .lopt_1(lopt_53),
        .lopt_2(lopt_54),
        .lopt_3(lopt_60));
  controller_ALU_Bit_593 \ALL_Bits[19].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[10]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[20].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[19].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .lopt(lopt_49),
        .lopt_1(lopt_50),
        .lopt_2(lopt_51),
        .lopt_3(lopt_59));
  controller_ALU_Bit_594 \ALL_Bits[1].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[2].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[1].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_56 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_57 ),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .lopt(lopt_119),
        .lopt_1(lopt_120),
        .lopt_2(lopt_121),
        .lopt_3(lopt_125));
  controller_ALU_Bit_595 \ALL_Bits[20].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[9]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[21].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[20].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .lopt(lopt_46),
        .lopt_1(lopt_47),
        .lopt_2(lopt_48),
        .lopt_3(lopt_58));
  controller_ALU_Bit_596 \ALL_Bits[21].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[8]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[22].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[21].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lopt_2(lopt_41),
        .lopt_3(lopt_45));
  controller_ALU_Bit_597 \ALL_Bits[22].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[7]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[23].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[22].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_44));
  controller_ALU_Bit_598 \ALL_Bits[23].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[6]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[24].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[23].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .lopt(lopt_33),
        .lopt_1(lopt_34),
        .lopt_2(lopt_35),
        .lopt_3(lopt_43));
  controller_ALU_Bit_599 \ALL_Bits[24].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[5]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[25].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[24].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_42));
  controller_ALU_Bit_600 \ALL_Bits[25].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[4]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[26].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[25].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .lopt_3(lopt_29));
  controller_ALU_Bit_601 \ALL_Bits[26].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[3]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[27].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[26].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .lopt_3(lopt_28));
  controller_ALU_Bit_602 \ALL_Bits[27].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[2]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[28].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[27].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_19),
        .lopt_3(lopt_27));
  controller_ALU_Bit_603 \ALL_Bits[28].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[1]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[29].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[28].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(lopt_16),
        .lopt_3(lopt_26));
  controller_ALU_Bit_604 \ALL_Bits[29].ALU_Bit_I1 
       (.ADDRBWRADDR(ADDRBWRADDR[0]),
        .ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[30].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[29].ALU_Bit_I1_n_0 ),
        .Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_2(lopt_10),
        .lopt_3(lopt_13));
  controller_ALU_Bit_605 \ALL_Bits[2].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[14]),
        .EX_CarryOut(\ALL_Bits[3].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[2].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_54 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_55 ),
        .lopt(lopt_116),
        .lopt_1(lopt_117),
        .lopt_2(lopt_118),
        .lopt_3(lopt_124));
  controller_ALU_Bit_606 \ALL_Bits[30].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .EX_CarryOut(\ALL_Bits[31].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[30].ALU_Bit_I1_n_0 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .lopt_3(lopt_12));
  controller_ALU_Bit_607 \ALL_Bits[31].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .CI(\No_Carry_Decoding.CarryIn_MUXCY_n_0 ),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .EX_Result(EX_Result),
        .LO(\ALL_Bits[31].ALU_Bit_I1_n_0 ),
        .lopt(\^lopt_2 ),
        .lopt_1(\^lopt_3 ),
        .lopt_2(\^lopt_4 ),
        .lopt_3(lopt_11));
  controller_ALU_Bit_608 \ALL_Bits[3].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[13]),
        .EX_CarryOut(\ALL_Bits[4].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[3].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_52 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_53 ),
        .lopt(lopt_113),
        .lopt_1(lopt_114),
        .lopt_2(lopt_115),
        .lopt_3(lopt_123));
  controller_ALU_Bit_609 \ALL_Bits[4].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[12]),
        .EX_CarryOut(\ALL_Bits[5].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[4].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_50 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_51 ),
        .lopt(lopt_110),
        .lopt_1(lopt_111),
        .lopt_2(lopt_112),
        .lopt_3(lopt_122));
  controller_ALU_Bit_610 \ALL_Bits[5].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[11]),
        .EX_CarryOut(\ALL_Bits[6].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[5].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_48 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .lopt(lopt_103),
        .lopt_1(lopt_104),
        .lopt_2(lopt_105),
        .lopt_3(lopt_109));
  controller_ALU_Bit_611 \ALL_Bits[6].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[10]),
        .EX_CarryOut(\ALL_Bits[7].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[6].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_47 ),
        .lopt(lopt_100),
        .lopt_1(lopt_101),
        .lopt_2(lopt_102),
        .lopt_3(lopt_108));
  controller_ALU_Bit_612 \ALL_Bits[7].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[9]),
        .EX_CarryOut(\ALL_Bits[8].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[7].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_45 ),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .lopt_2(lopt_99),
        .lopt_3(lopt_107));
  controller_ALU_Bit_613 \ALL_Bits[8].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[8]),
        .EX_CarryOut(\ALL_Bits[9].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[8].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_43 ),
        .lopt(lopt_94),
        .lopt_1(lopt_95),
        .lopt_2(lopt_96),
        .lopt_3(lopt_106));
  controller_ALU_Bit_614 \ALL_Bits[9].ALU_Bit_I1 
       (.ALU_Op(ALU_Op),
        .BRAM_Addr_B(BRAM_Addr_B[7]),
        .CI(\ALL_Bits[10].ALU_Bit_I1_n_0 ),
        .LO(\ALL_Bits[9].ALU_Bit_I1_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_41 ),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .lopt_3(lopt_93));
  controller_microblaze_v9_5_MB_MUXCY_615 \No_Carry_Decoding.CarryIn_MUXCY 
       (.DI(DI),
        .S(S),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\No_Carry_Decoding.CarryIn_MUXCY_n_0 ),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ));
  controller_MB_MULT_AND_616 \No_Carry_Decoding.MULT_AND_I 
       (.Carry_In(Carry_In),
        .DI(DI));
  controller_MB_LUT3__parameterized11 \No_Carry_Decoding.alu_carry_select_LUT 
       (.Carry_In(Carry_In),
        .S(S));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_676 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_677 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_585
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_674 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_675 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_586
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_672 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_673 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_587
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_670 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_671 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_588
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_668 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_669 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_589
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_666 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_667 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_590
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_664 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_665 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_591
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_662 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_663 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_592
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_660 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_661 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_593
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_658 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_659 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_594
   (LO,
    lmb_reg_write_reg,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]lmb_reg_write_reg;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]lmb_reg_write_reg;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_656 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_657 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_595
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_654 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_655 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_596
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_652 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_653 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_597
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_650 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_651 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_598
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_648 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_649 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_599
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_646 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_647 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_600
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_644 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_645 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_601
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_642 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_643 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_602
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_640 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_641 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_603
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_638 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_639 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_604
   (LO,
    ADDRBWRADDR,
    \Using_FPGA.Native ,
    ALU_Op,
    Op1_Shift,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRBWRADDR;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input Op1_Shift;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRBWRADDR;
  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire Op1_Shift;
  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_636 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .Op1_Shift(Op1_Shift),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_MB_MUXCY_XORCY_637 \Not_Last_Bit.MUXCY_XOR_I 
       (.ADDRBWRADDR(ADDRBWRADDR),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_605
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_634 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_635 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_606
   (LO,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_632 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_633 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_607
   (LO,
    EX_Result,
    EX_Op2,
    ALU_Op,
    EX_Op1,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output EX_Result;
  input EX_Op2;
  input [0:1]ALU_Op;
  input EX_Op1;
  input CI;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire CI;
  wire DI;
  wire EX_Op1;
  wire EX_Op2;
  wire EX_Result;
  wire LO;
  wire S;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_630 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .S(S));
  controller_MB_MUXCY_XORCY_631 \Not_Last_Bit.MUXCY_XOR_I 
       (.CI(CI),
        .DI(DI),
        .EX_Result(EX_Result),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_608
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_628 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_629 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_609
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_626 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_627 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_610
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_624 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_625 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_611
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_622 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_623 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_612
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_620 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_621 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_613
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    EX_CarryOut,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input EX_CarryOut;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28_618 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_619 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .DI(DI),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit_614
   (LO,
    BRAM_Addr_B,
    \Using_FPGA.Native ,
    ALU_Op,
    \Using_FPGA.Native_0 ,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]BRAM_Addr_B;
  input \Using_FPGA.Native ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_0 ;
  input CI;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:1]ALU_Op;
  wire [0:0]BRAM_Addr_B;
  wire CI;
  wire DI;
  wire LO;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire \^lopt_1 ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  controller_MB_LUT6_2__parameterized28 \Not_Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_MUXCY_XORCY_617 \Not_Last_Bit.MUXCY_XOR_I 
       (.BRAM_Addr_B(BRAM_Addr_B),
        .CI(CI),
        .DI(DI),
        .LO(LO),
        .S(S),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module controller_ALU_Bit__parameterized31
   (LO,
    O,
    Compare_Instr_reg,
    Unsigned_Op,
    EX_CarryOut,
    Op2,
    ALU_Op,
    Op1_Logic,
    Compare_Instr_reg_0,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76,
    lopt_77,
    lopt_78,
    lopt_79,
    lopt_80,
    lopt_81,
    lopt_82,
    lopt_83,
    lopt_84,
    lopt_85,
    lopt_86,
    lopt_87,
    lopt_88,
    lopt_89,
    lopt_90,
    lopt_91,
    lopt_92,
    lopt_93,
    lopt_94,
    lopt_95,
    lopt_96,
    lopt_97,
    lopt_98,
    lopt_99,
    lopt_100,
    lopt_101,
    lopt_102,
    lopt_103,
    lopt_104,
    lopt_105,
    lopt_106,
    lopt_107,
    lopt_108,
    lopt_109,
    lopt_110,
    lopt_111,
    lopt_112,
    lopt_113,
    lopt_114,
    lopt_115,
    lopt_116,
    lopt_117,
    lopt_118,
    lopt_119,
    lopt_120,
    lopt_121,
    lopt_122,
    lopt_123,
    lopt_124,
    lopt_125,
    lopt_126,
    lopt_127,
    lopt_128,
    lopt_129,
    lopt_130,
    lopt_131,
    lopt_132,
    lopt_133);
  output LO;
  output O;
  input Compare_Instr_reg;
  input Unsigned_Op;
  input EX_CarryOut;
  input Op2;
  input [0:1]ALU_Op;
  input Op1_Logic;
  input Compare_Instr_reg_0;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  input lopt_17;
  input lopt_18;
  output lopt_19;
  input lopt_20;
  input lopt_21;
  output lopt_22;
  input lopt_23;
  input lopt_24;
  output lopt_25;
  input lopt_26;
  input lopt_27;
  output lopt_28;
  output lopt_29;
  output lopt_30;
  output lopt_31;
  output lopt_32;
  input lopt_33;
  input lopt_34;
  output lopt_35;
  input lopt_36;
  input lopt_37;
  output lopt_38;
  input lopt_39;
  input lopt_40;
  output lopt_41;
  input lopt_42;
  input lopt_43;
  output lopt_44;
  output lopt_45;
  output lopt_46;
  output lopt_47;
  output lopt_48;
  input lopt_49;
  input lopt_50;
  output lopt_51;
  input lopt_52;
  input lopt_53;
  output lopt_54;
  input lopt_55;
  input lopt_56;
  output lopt_57;
  input lopt_58;
  input lopt_59;
  output lopt_60;
  output lopt_61;
  output lopt_62;
  output lopt_63;
  output lopt_64;
  input lopt_65;
  input lopt_66;
  output lopt_67;
  input lopt_68;
  input lopt_69;
  output lopt_70;
  input lopt_71;
  input lopt_72;
  output lopt_73;
  input lopt_74;
  input lopt_75;
  output lopt_76;
  output lopt_77;
  output lopt_78;
  output lopt_79;
  output lopt_80;
  input lopt_81;
  input lopt_82;
  output lopt_83;
  input lopt_84;
  input lopt_85;
  output lopt_86;
  input lopt_87;
  input lopt_88;
  output lopt_89;
  input lopt_90;
  input lopt_91;
  output lopt_92;
  output lopt_93;
  output lopt_94;
  output lopt_95;
  output lopt_96;
  input lopt_97;
  input lopt_98;
  output lopt_99;
  input lopt_100;
  input lopt_101;
  output lopt_102;
  input lopt_103;
  input lopt_104;
  output lopt_105;
  input lopt_106;
  input lopt_107;
  output lopt_108;
  output lopt_109;
  output lopt_110;
  output lopt_111;
  output lopt_112;
  input lopt_113;
  input lopt_114;
  output lopt_115;
  input lopt_116;
  input lopt_117;
  output lopt_118;
  input lopt_119;
  input lopt_120;
  output lopt_121;
  input lopt_122;
  input lopt_123;
  output lopt_124;
  output lopt_125;
  output lopt_126;
  output lopt_127;
  output lopt_128;
  input lopt_129;
  input lopt_130;
  output lopt_131;
  input lopt_132;
  input lopt_133;

  wire [0:1]ALU_Op;
  wire CI;
  wire Compare_Instr_reg;
  wire Compare_Instr_reg_0;
  wire DI;
  wire EX_CarryOut;
  wire I3;
  wire LO;
  wire O;
  wire Op1_Logic;
  wire Op2;
  wire S;
  wire Unsigned_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire \^lopt_128 ;
  wire \^lopt_129 ;
  wire lopt_13;
  wire \^lopt_130 ;
  wire \^lopt_131 ;
  wire \^lopt_132 ;
  wire \^lopt_133 ;
  wire lopt_134;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;

  assign \^lopt_130  = lopt_129;
  assign \^lopt_131  = lopt_130;
  assign \^lopt_133  = lopt_132;
  assign lopt_128 = \^lopt_129 ;
  assign lopt_131 = \^lopt_132 ;
  assign lopt_134 = lopt_133;
  controller_MB_LUT4__parameterized27 \Last_Bit.I_ALU_LUT_2 
       (.ALU_Op(ALU_Op[0]),
        .Compare_Instr_reg(Compare_Instr_reg_0),
        .I3(I3),
        .Op2(Op2),
        .S(S));
  controller_microblaze_v9_5_MB_LUT6 \Last_Bit.I_ALU_LUT_V5 
       (.ALU_Op(ALU_Op),
        .I3(I3),
        .Op1_Logic(Op1_Logic),
        .Op2(Op2));
  controller_MB_MULT_AND_678 \Last_Bit.MULT_AND_I 
       (.ALU_Op(ALU_Op[0]),
        .DI(DI),
        .Op2(Op2));
  controller_MB_MUXCY_XORCY_679 \Last_Bit.MUXCY_XOR_I 
       (.CI(CI),
        .DI(DI),
        .LO(LO),
        .O(O),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_100(lopt_100),
        .lopt_101(lopt_101),
        .lopt_102(lopt_102),
        .lopt_103(lopt_103),
        .lopt_104(lopt_104),
        .lopt_105(lopt_105),
        .lopt_106(lopt_106),
        .lopt_107(lopt_107),
        .lopt_108(lopt_108),
        .lopt_109(lopt_109),
        .lopt_11(lopt_11),
        .lopt_110(lopt_110),
        .lopt_111(lopt_111),
        .lopt_112(lopt_112),
        .lopt_113(lopt_113),
        .lopt_114(lopt_114),
        .lopt_115(lopt_115),
        .lopt_116(lopt_116),
        .lopt_117(lopt_117),
        .lopt_118(lopt_118),
        .lopt_119(lopt_119),
        .lopt_12(lopt_12),
        .lopt_120(lopt_120),
        .lopt_121(lopt_121),
        .lopt_122(lopt_122),
        .lopt_123(lopt_123),
        .lopt_124(lopt_124),
        .lopt_125(lopt_125),
        .lopt_126(lopt_126),
        .lopt_127(lopt_127),
        .lopt_128(\^lopt_128 ),
        .lopt_129(Unsigned_Op),
        .lopt_13(lopt_13),
        .lopt_130(Compare_Instr_reg),
        .lopt_131(\^lopt_129 ),
        .lopt_132(\^lopt_130 ),
        .lopt_133(\^lopt_131 ),
        .lopt_134(\^lopt_132 ),
        .lopt_135(\^lopt_133 ),
        .lopt_136(lopt_134),
        .lopt_14(lopt_14),
        .lopt_15(lopt_15),
        .lopt_16(lopt_16),
        .lopt_17(lopt_17),
        .lopt_18(lopt_18),
        .lopt_19(lopt_19),
        .lopt_2(lopt_2),
        .lopt_20(lopt_20),
        .lopt_21(lopt_21),
        .lopt_22(lopt_22),
        .lopt_23(lopt_23),
        .lopt_24(lopt_24),
        .lopt_25(lopt_25),
        .lopt_26(lopt_26),
        .lopt_27(lopt_27),
        .lopt_28(lopt_28),
        .lopt_29(lopt_29),
        .lopt_3(lopt_3),
        .lopt_30(lopt_30),
        .lopt_31(lopt_31),
        .lopt_32(lopt_32),
        .lopt_33(lopt_33),
        .lopt_34(lopt_34),
        .lopt_35(lopt_35),
        .lopt_36(lopt_36),
        .lopt_37(lopt_37),
        .lopt_38(lopt_38),
        .lopt_39(lopt_39),
        .lopt_4(lopt_4),
        .lopt_40(lopt_40),
        .lopt_41(lopt_41),
        .lopt_42(lopt_42),
        .lopt_43(lopt_43),
        .lopt_44(lopt_44),
        .lopt_45(lopt_45),
        .lopt_46(lopt_46),
        .lopt_47(lopt_47),
        .lopt_48(lopt_48),
        .lopt_49(lopt_49),
        .lopt_5(lopt_5),
        .lopt_50(lopt_50),
        .lopt_51(lopt_51),
        .lopt_52(lopt_52),
        .lopt_53(lopt_53),
        .lopt_54(lopt_54),
        .lopt_55(lopt_55),
        .lopt_56(lopt_56),
        .lopt_57(lopt_57),
        .lopt_58(lopt_58),
        .lopt_59(lopt_59),
        .lopt_6(lopt_6),
        .lopt_60(lopt_60),
        .lopt_61(lopt_61),
        .lopt_62(lopt_62),
        .lopt_63(lopt_63),
        .lopt_64(lopt_64),
        .lopt_65(lopt_65),
        .lopt_66(lopt_66),
        .lopt_67(lopt_67),
        .lopt_68(lopt_68),
        .lopt_69(lopt_69),
        .lopt_7(lopt_7),
        .lopt_70(lopt_70),
        .lopt_71(lopt_71),
        .lopt_72(lopt_72),
        .lopt_73(lopt_73),
        .lopt_74(lopt_74),
        .lopt_75(lopt_75),
        .lopt_76(lopt_76),
        .lopt_77(lopt_77),
        .lopt_78(lopt_78),
        .lopt_79(lopt_79),
        .lopt_8(lopt_8),
        .lopt_80(lopt_80),
        .lopt_81(lopt_81),
        .lopt_82(lopt_82),
        .lopt_83(lopt_83),
        .lopt_84(lopt_84),
        .lopt_85(lopt_85),
        .lopt_86(lopt_86),
        .lopt_87(lopt_87),
        .lopt_88(lopt_88),
        .lopt_89(lopt_89),
        .lopt_9(lopt_9),
        .lopt_90(lopt_90),
        .lopt_91(lopt_91),
        .lopt_92(lopt_92),
        .lopt_93(lopt_93),
        .lopt_94(lopt_94),
        .lopt_95(lopt_95),
        .lopt_96(lopt_96),
        .lopt_97(lopt_97),
        .lopt_98(lopt_98),
        .lopt_99(lopt_99));
  controller_microblaze_v9_5_MB_MUXCY_680 \Last_Bit.Pre_MUXCY_I 
       (.CI(CI),
        .Compare_Instr_reg(Compare_Instr_reg),
        .EX_CarryOut(EX_CarryOut),
        .Unsigned_Op(Unsigned_Op),
        .lopt(\^lopt_128 ));
endmodule

(* ORIG_REF_NAME = "Byte_Doublet_Handle" *) 
module controller_Byte_Doublet_Handle
   (M_BE,
    sel_LSB,
    DATA_INB,
    EX_Op2,
    Op1_Low,
    \Using_FPGA.Native ,
    Byte,
    Doublet,
    Data_Write);
  output [0:3]M_BE;
  output [1:0]sel_LSB;
  output [23:0]DATA_INB;
  input EX_Op2;
  input [0:1]Op1_Low;
  input \Using_FPGA.Native ;
  input Byte;
  input Doublet;
  input [0:31]Data_Write;

  wire Byte;
  wire [23:0]DATA_INB;
  wire [0:31]Data_Write;
  wire Doublet;
  wire EX_Op2;
  wire [0:3]M_BE;
  wire O58_out;
  wire O67_out;
  wire [0:1]Op1_Low;
  wire \Using_FPGA.Native ;
  wire byte_selects_i_INST_n_0;
  wire byte_selects_i_INST_n_1;
  wire [1:0]sel_LSB;

  controller_MB_LUT6_2__parameterized34 BYTE_0_1_I
       (.Byte(Byte),
        .Doublet(Doublet),
        .M_BE({M_BE[2],M_BE[3]}),
        .\Using_FPGA.Native_0 (byte_selects_i_INST_n_1),
        .\Using_FPGA.Native_1 (byte_selects_i_INST_n_0));
  controller_MB_LUT6_2__parameterized36 BYTE_2_3_I
       (.Byte(Byte),
        .Doublet(Doublet),
        .M_BE({M_BE[0],M_BE[1]}),
        .\Using_FPGA.Native_0 (byte_selects_i_INST_n_1),
        .\Using_FPGA.Native_1 (byte_selects_i_INST_n_0));
  controller_mux4_8 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.EXT_DATA_WRITE_MUX_MSB_I 
       (.DATA_INB(DATA_INB[23:8]),
        .Data_Write(Data_Write),
        .O58_out(O58_out),
        .O67_out(O67_out));
  controller_MB_LUT6_2__parameterized56 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.GEN4_LOOP[0].BYTESTEER_LUT6 
       (.Byte(Byte),
        .DATA_INB({DATA_INB[7],DATA_INB[3]}),
        .Data_Write({Data_Write[16],Data_Write[20],Data_Write[24],Data_Write[28]}));
  controller_MB_LUT6_2__parameterized58 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.GEN4_LOOP[1].BYTESTEER_LUT6 
       (.Byte(Byte),
        .DATA_INB({DATA_INB[6],DATA_INB[2]}),
        .Data_Write({Data_Write[17],Data_Write[21],Data_Write[25],Data_Write[29]}));
  controller_MB_LUT6_2__parameterized60 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.GEN4_LOOP[2].BYTESTEER_LUT6 
       (.Byte(Byte),
        .DATA_INB({DATA_INB[5],DATA_INB[1]}),
        .Data_Write({Data_Write[18],Data_Write[22],Data_Write[26],Data_Write[30]}));
  controller_MB_LUT6_2__parameterized62 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.GEN4_LOOP[3].BYTESTEER_LUT6 
       (.Byte(Byte),
        .DATA_INB({DATA_INB[4],DATA_INB[0]}),
        .Data_Write({Data_Write[19],Data_Write[23],Data_Write[27],Data_Write[31]}));
  controller_MB_LUT3__parameterized13 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.READ_SEL_LEFT_I 
       (.Byte(Byte),
        .Doublet(Doublet),
        .\Using_FPGA.Native_0 (byte_selects_i_INST_n_1),
        .sel_LSB(sel_LSB[1]));
  controller_MB_LUT2 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.READ_SEL_RIGHT_I 
       (.Byte(Byte),
        .\Using_FPGA.Native_0 (byte_selects_i_INST_n_0),
        .sel_LSB(sel_LSB[0]));
  controller_MB_LUT6_2__parameterized38 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr.WRITE_MSB_SEL_I 
       (.Byte(Byte),
        .Doublet(Doublet),
        .O58_out(O58_out),
        .O67_out(O67_out));
  controller_MB_LUT6_2__parameterized32 byte_selects_i_INST
       (.EX_Op2(EX_Op2),
        .Op1_Low(Op1_Low),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (byte_selects_i_INST_n_0),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (byte_selects_i_INST_n_1),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Data_Flow" *) 
module controller_Data_Flow
   (Op1_Low,
    EX_Op2,
    EX_Result,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    EX_Op1,
    Op1_Shift,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Using_FPGA.Native ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    break_Pipe_i_reg,
    MSR,
    WEB,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \No_ECC.Sl_Rdy_reg ,
    LO,
    ADDRBWRADDR,
    ADDRARDADDR,
    \Using_FPGA.Native_0 ,
    Data_Write,
    Reg2_Data,
    Reg_zero,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Res_Forward1,
    OpSel1_SPR,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Size_17to32.imm_Reg_reg[15] ,
    \Size_17to32.imm_Reg_reg[14] ,
    \Size_17to32.imm_Reg_reg[13] ,
    \Size_17to32.imm_Reg_reg[12] ,
    \Size_17to32.imm_Reg_reg[11] ,
    \Size_17to32.imm_Reg_reg[10] ,
    \Size_17to32.imm_Reg_reg[9] ,
    \Size_17to32.imm_Reg_reg[8] ,
    \Size_17to32.imm_Reg_reg[7] ,
    \Size_17to32.imm_Reg_reg[6] ,
    \Size_17to32.imm_Reg_reg[5] ,
    \Size_17to32.imm_Reg_reg[4] ,
    \Size_17to32.imm_Reg_reg[3] ,
    \Size_17to32.imm_Reg_reg[2] ,
    \Size_17to32.imm_Reg_reg[1] ,
    \Size_17to32.imm_Reg_reg[0] ,
    \Using_FPGA.Native_2 ,
    Carry_In,
    Unsigned_Op,
    ALU_Op,
    MSR_Rst,
    \Using_FPGA.set_BIP_I_reg ,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.Native_3 ,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    Compare_Instr,
    Sext16,
    Sext8,
    writing_reg,
    M_BE,
    POR_FF_I,
    Q,
    Shift_Oper,
    Select_Logic,
    Sext,
    Sext8_reg,
    Sext8_reg_0,
    Sext8_reg_1,
    Sext8_reg_2,
    Sext8_reg_3,
    Sext8_reg_4,
    Sext8_reg_5,
    Shifted,
    \Result_Sel_reg[0] ,
    Extend_Data_Read,
    data_Read_Mask,
    Data_Read,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ,
    \cipr_rd_dff_all[24].fdr_i ,
    \cipr_rd_dff_all[25].fdr_i ,
    \cipr_rd_dff_all[26].fdr_i ,
    \cipr_rd_dff_all[27].fdr_i ,
    \cipr_rd_dff_all[28].fdr_i ,
    \cipr_rd_dff_all[29].fdr_i ,
    \cipr_rd_dff_all[30].fdr_i ,
    \cipr_rd_dff_all[31].fdr_i ,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    PC_Write,
    E,
    Imm_Value,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    DI,
    Reg_Test_Equal,
    Reg_Test_Equal_N,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [0:1]Op1_Low;
  output EX_Op2;
  output [0:31]EX_Result;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output EX_Op1;
  output Op1_Shift;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output \Using_FPGA.Native ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output [2:0]MSR;
  output [0:3]WEB;
  output [1:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  output \No_ECC.Sl_Rdy_reg ;
  output LO;
  output [12:0]ADDRBWRADDR;
  output [12:0]ADDRARDADDR;
  output [15:0]\Using_FPGA.Native_0 ;
  output [0:31]Data_Write;
  output [0:31]Reg2_Data;
  output Reg_zero;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Res_Forward1;
  input OpSel1_SPR;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  input \Size_17to32.imm_Reg_reg[15] ;
  input \Size_17to32.imm_Reg_reg[14] ;
  input \Size_17to32.imm_Reg_reg[13] ;
  input \Size_17to32.imm_Reg_reg[12] ;
  input \Size_17to32.imm_Reg_reg[11] ;
  input \Size_17to32.imm_Reg_reg[10] ;
  input \Size_17to32.imm_Reg_reg[9] ;
  input \Size_17to32.imm_Reg_reg[8] ;
  input \Size_17to32.imm_Reg_reg[7] ;
  input \Size_17to32.imm_Reg_reg[6] ;
  input \Size_17to32.imm_Reg_reg[5] ;
  input \Size_17to32.imm_Reg_reg[4] ;
  input \Size_17to32.imm_Reg_reg[3] ;
  input \Size_17to32.imm_Reg_reg[2] ;
  input \Size_17to32.imm_Reg_reg[1] ;
  input \Size_17to32.imm_Reg_reg[0] ;
  input \Using_FPGA.Native_2 ;
  input Carry_In;
  input Unsigned_Op;
  input [0:1]ALU_Op;
  input MSR_Rst;
  input \Using_FPGA.set_BIP_I_reg ;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.Native_3 ;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input Compare_Instr;
  input Sext16;
  input Sext8;
  input writing_reg;
  input [0:3]M_BE;
  input POR_FF_I;
  input [1:0]Q;
  input Shift_Oper;
  input Select_Logic;
  input Sext;
  input Sext8_reg;
  input Sext8_reg_0;
  input Sext8_reg_1;
  input Sext8_reg_2;
  input Sext8_reg_3;
  input Sext8_reg_4;
  input Sext8_reg_5;
  input Shifted;
  input [1:0]\Result_Sel_reg[0] ;
  input [15:0]Extend_Data_Read;
  input [23:0]data_Read_Mask;
  input Data_Read;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  input \cipr_rd_dff_all[24].fdr_i ;
  input \cipr_rd_dff_all[25].fdr_i ;
  input \cipr_rd_dff_all[26].fdr_i ;
  input \cipr_rd_dff_all[27].fdr_i ;
  input \cipr_rd_dff_all[28].fdr_i ;
  input \cipr_rd_dff_all[29].fdr_i ;
  input \cipr_rd_dff_all[30].fdr_i ;
  input \cipr_rd_dff_all[31].fdr_i ;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input PC_Write;
  input [0:0]E;
  input [0:15]Imm_Value;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input DI;
  input Reg_Test_Equal;
  input Reg_Test_Equal_N;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire ALU_I_n_2;
  wire ALU_I_n_3;
  wire [0:1]ALU_Op;
  wire [2:16]BRAM_Addr_B;
  wire [2:0]Buffer_Addr;
  wire Carry_In;
  wire Clk;
  wire Compare_Instr;
  wire DI;
  wire Data_Read;
  wire [0:31]Data_Write;
  wire [0:0]E;
  wire EX_Op1;
  wire EX_Op2;
  wire [0:31]EX_Result;
  wire [15:0]Extend_Data_Read;
  wire [0:15]Imm_Value;
  wire Jump;
  wire LO;
  wire [2:0]MSR;
  wire MSR_Rst;
  wire [0:3]M_BE;
  wire \No_ECC.Sl_Rdy_reg ;
  wire [0:1]Op1_Low;
  wire Op1_Shift;
  wire OpSel1_SPR;
  wire \OpSelect_Bits[28].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I/I3 ;
  wire Operand_Select_I_n_10;
  wire Operand_Select_I_n_11;
  wire Operand_Select_I_n_12;
  wire Operand_Select_I_n_13;
  wire Operand_Select_I_n_15;
  wire Operand_Select_I_n_16;
  wire Operand_Select_I_n_17;
  wire Operand_Select_I_n_18;
  wire Operand_Select_I_n_19;
  wire Operand_Select_I_n_20;
  wire Operand_Select_I_n_21;
  wire Operand_Select_I_n_22;
  wire Operand_Select_I_n_23;
  wire Operand_Select_I_n_24;
  wire Operand_Select_I_n_25;
  wire Operand_Select_I_n_26;
  wire Operand_Select_I_n_27;
  wire Operand_Select_I_n_28;
  wire Operand_Select_I_n_29;
  wire Operand_Select_I_n_31;
  wire Operand_Select_I_n_32;
  wire Operand_Select_I_n_33;
  wire Operand_Select_I_n_34;
  wire Operand_Select_I_n_35;
  wire Operand_Select_I_n_36;
  wire Operand_Select_I_n_37;
  wire Operand_Select_I_n_38;
  wire Operand_Select_I_n_39;
  wire Operand_Select_I_n_40;
  wire Operand_Select_I_n_41;
  wire Operand_Select_I_n_42;
  wire Operand_Select_I_n_43;
  wire Operand_Select_I_n_44;
  wire Operand_Select_I_n_45;
  wire Operand_Select_I_n_46;
  wire Operand_Select_I_n_47;
  wire Operand_Select_I_n_48;
  wire Operand_Select_I_n_49;
  wire Operand_Select_I_n_5;
  wire Operand_Select_I_n_50;
  wire Operand_Select_I_n_51;
  wire Operand_Select_I_n_52;
  wire Operand_Select_I_n_53;
  wire Operand_Select_I_n_54;
  wire Operand_Select_I_n_55;
  wire Operand_Select_I_n_56;
  wire Operand_Select_I_n_57;
  wire Operand_Select_I_n_58;
  wire Operand_Select_I_n_59;
  wire Operand_Select_I_n_60;
  wire Operand_Select_I_n_61;
  wire Operand_Select_I_n_64;
  wire Operand_Select_I_n_65;
  wire Operand_Select_I_n_66;
  wire Operand_Select_I_n_67;
  wire Operand_Select_I_n_68;
  wire Operand_Select_I_n_69;
  wire Operand_Select_I_n_7;
  wire Operand_Select_I_n_70;
  wire Operand_Select_I_n_71;
  wire Operand_Select_I_n_72;
  wire Operand_Select_I_n_73;
  wire Operand_Select_I_n_74;
  wire Operand_Select_I_n_75;
  wire Operand_Select_I_n_76;
  wire Operand_Select_I_n_77;
  wire Operand_Select_I_n_78;
  wire Operand_Select_I_n_79;
  wire Operand_Select_I_n_8;
  wire Operand_Select_I_n_80;
  wire Operand_Select_I_n_81;
  wire Operand_Select_I_n_82;
  wire Operand_Select_I_n_9;
  wire PC_Module_I_n_0;
  wire PC_Module_I_n_1;
  wire PC_Module_I_n_17;
  wire PC_Module_I_n_18;
  wire PC_Module_I_n_19;
  wire PC_Module_I_n_2;
  wire PC_Module_I_n_20;
  wire PC_Module_I_n_21;
  wire PC_Module_I_n_22;
  wire PC_Module_I_n_23;
  wire PC_Module_I_n_24;
  wire PC_Module_I_n_25;
  wire PC_Module_I_n_3;
  wire PC_Write;
  wire POR_FF_I;
  wire [1:0]Q;
  wire [0:4]Reg1_Addr;
  wire [0:31]Reg1_Data;
  wire [0:31]Reg2_Data;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N;
  wire Reg_Write;
  wire Reg_zero;
  wire Res_Forward1;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic;
  wire Sext;
  wire Sext16;
  wire Sext8;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire Sext8_reg_2;
  wire Sext8_reg_3;
  wire Sext8_reg_4;
  wire Sext8_reg_5;
  wire Shift_Logic_Res;
  wire Shift_Logic_Res0_out;
  wire Shift_Logic_Res10_out;
  wire Shift_Logic_Res11_out;
  wire Shift_Logic_Res12_out;
  wire Shift_Logic_Res13_out;
  wire Shift_Logic_Res14_out;
  wire Shift_Logic_Res15_out;
  wire Shift_Logic_Res17_out;
  wire Shift_Logic_Res18_out;
  wire Shift_Logic_Res19_out;
  wire Shift_Logic_Res1_out;
  wire Shift_Logic_Res20_out;
  wire Shift_Logic_Res21_out;
  wire Shift_Logic_Res22_out;
  wire Shift_Logic_Res23_out;
  wire Shift_Logic_Res24_out;
  wire Shift_Logic_Res26_out;
  wire Shift_Logic_Res27_out;
  wire Shift_Logic_Res28_out;
  wire Shift_Logic_Res29_out;
  wire Shift_Logic_Res2_out;
  wire Shift_Logic_Res30_out;
  wire Shift_Logic_Res31_out;
  wire Shift_Logic_Res32_out;
  wire Shift_Logic_Res3_out;
  wire Shift_Logic_Res4_out;
  wire Shift_Logic_Res5_out;
  wire Shift_Logic_Res6_out;
  wire Shift_Logic_Res7_out;
  wire Shift_Logic_Res8_out;
  wire Shift_Logic_Res9_out;
  wire Shift_Oper;
  wire Shifted;
  wire \Size_17to32.imm_Reg_reg[0] ;
  wire \Size_17to32.imm_Reg_reg[10] ;
  wire \Size_17to32.imm_Reg_reg[11] ;
  wire \Size_17to32.imm_Reg_reg[12] ;
  wire \Size_17to32.imm_Reg_reg[13] ;
  wire \Size_17to32.imm_Reg_reg[14] ;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Size_17to32.imm_Reg_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[2] ;
  wire \Size_17to32.imm_Reg_reg[3] ;
  wire \Size_17to32.imm_Reg_reg[4] ;
  wire \Size_17to32.imm_Reg_reg[5] ;
  wire \Size_17to32.imm_Reg_reg[6] ;
  wire \Size_17to32.imm_Reg_reg[7] ;
  wire \Size_17to32.imm_Reg_reg[8] ;
  wire \Size_17to32.imm_Reg_reg[9] ;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire Unsigned_Op;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire [1:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire [15:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire [0:3]WEB;
  wire [0:4]Write_Addr;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire break_Pipe_i_reg;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire [23:0]data_Read_Mask;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire nonvalid_IFetch_n_reg;
  wire normal_piperun;
  wire [0:0]out;
  wire writing_reg;

  controller_ALU ALU_I
       (.ADDRBWRADDR(ADDRBWRADDR),
        .ALU_Op(ALU_Op),
        .BRAM_Addr_B({BRAM_Addr_B[2],BRAM_Addr_B[3],BRAM_Addr_B[4],BRAM_Addr_B[5],BRAM_Addr_B[6],BRAM_Addr_B[7],BRAM_Addr_B[8],BRAM_Addr_B[9],BRAM_Addr_B[10],BRAM_Addr_B[11],BRAM_Addr_B[12],BRAM_Addr_B[13],BRAM_Addr_B[14],BRAM_Addr_B[15],BRAM_Addr_B[16]}),
        .Carry_In(Carry_In),
        .Compare_Instr_reg(Operand_Select_I_n_82),
        .Compare_Instr_reg_0(Operand_Select_I_n_65),
        .EX_Op1(Op1_Low[1]),
        .EX_Op2(EX_Op2),
        .EX_Result(ALU_I_n_2),
        .LO(LO),
        .O(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 [1]),
        .Op1_Logic(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .Op1_Shift(EX_Op1),
        .Op2(Operand_Select_I_n_64),
        .Unsigned_Op(Unsigned_Op),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (ALU_I_n_3),
        .\Using_FPGA.Native (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native_0 (Op1_Low[0]),
        .\Using_FPGA.Native_1 (Operand_Select_I_n_5),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_15),
        .\Using_FPGA.Native_11 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_17),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_16),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_19),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_18),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_21),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_20),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_23),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_22),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_7),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_25),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_24),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_27),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_26),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_29),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_28),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_31),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_33),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_32),
        .\Using_FPGA.Native_3 (Op1_Shift),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_35),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_34),
        .\Using_FPGA.Native_32 (Operand_Select_I_n_37),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_36),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_39),
        .\Using_FPGA.Native_35 (Operand_Select_I_n_38),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_44),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_45 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_46 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_47 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_48 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_49 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_50 (Operand_Select_I_n_55),
        .\Using_FPGA.Native_51 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_52 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_53 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_54 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_55 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_56 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_57 (Operand_Select_I_n_60),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_13),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_12),
        .lmb_reg_write_reg(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 [0]),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4));
  controller_MSR_Reg MSR_Reg_I
       (.Clk(Clk),
        .I3(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .MSR(MSR),
        .MSR_Rst(MSR_Rst),
        .PC_OF(PC_Module_I_n_18),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (PC_Module_I_n_19),
        .\Using_FPGA.enable_Interrupts_I_reg (\Using_FPGA.enable_Interrupts_I_reg ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ));
  controller_Operand_Select Operand_Select_I
       (.ALU_Result(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 [1]),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .E(E),
        .EX_Op2(EX_Op2),
        .EX_Result(EX_Result[31]),
        .I3(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .Imm_Value(Imm_Value),
        .M_BE(M_BE),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .Op1_Logic(Op1_Low[1]),
        .Op1_Shift(EX_Op1),
        .Op2(Operand_Select_I_n_5),
        .OpSel1_SPR(OpSel1_SPR),
        .PC_OF(PC_Module_I_n_20),
        .POR_FF_I(POR_FF_I),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (EX_Result[30]),
        .\Result_Sel_reg[1]_0 (EX_Result[29]),
        .\Result_Sel_reg[1]_1 (EX_Result[28]),
        .\Result_Sel_reg[1]_10 (EX_Result[19]),
        .\Result_Sel_reg[1]_11 (EX_Result[18]),
        .\Result_Sel_reg[1]_12 (EX_Result[17]),
        .\Result_Sel_reg[1]_13 (EX_Result[16]),
        .\Result_Sel_reg[1]_14 (EX_Result[15]),
        .\Result_Sel_reg[1]_15 (EX_Result[14]),
        .\Result_Sel_reg[1]_16 (EX_Result[13]),
        .\Result_Sel_reg[1]_17 (EX_Result[12]),
        .\Result_Sel_reg[1]_18 (EX_Result[11]),
        .\Result_Sel_reg[1]_19 (EX_Result[10]),
        .\Result_Sel_reg[1]_2 (EX_Result[27]),
        .\Result_Sel_reg[1]_20 (EX_Result[9]),
        .\Result_Sel_reg[1]_21 (EX_Result[8]),
        .\Result_Sel_reg[1]_22 (EX_Result[7]),
        .\Result_Sel_reg[1]_23 (EX_Result[6]),
        .\Result_Sel_reg[1]_24 (EX_Result[5]),
        .\Result_Sel_reg[1]_25 (EX_Result[4]),
        .\Result_Sel_reg[1]_26 (EX_Result[3]),
        .\Result_Sel_reg[1]_27 (EX_Result[2]),
        .\Result_Sel_reg[1]_28 (EX_Result[1]),
        .\Result_Sel_reg[1]_29 (EX_Result[0]),
        .\Result_Sel_reg[1]_3 (EX_Result[26]),
        .\Result_Sel_reg[1]_4 (EX_Result[25]),
        .\Result_Sel_reg[1]_5 (EX_Result[24]),
        .\Result_Sel_reg[1]_6 (EX_Result[23]),
        .\Result_Sel_reg[1]_7 (EX_Result[22]),
        .\Result_Sel_reg[1]_8 (EX_Result[21]),
        .\Result_Sel_reg[1]_9 (EX_Result[20]),
        .Sext(Operand_Select_I_n_66),
        .Sext16(Sext16),
        .Sext8(Sext8),
        .Shifted(Op1_Shift),
        .\Size_17to32.imm_Reg_reg[0]_0 (\Size_17to32.imm_Reg_reg[0] ),
        .\Size_17to32.imm_Reg_reg[10]_0 (\Size_17to32.imm_Reg_reg[10] ),
        .\Size_17to32.imm_Reg_reg[11]_0 (\Size_17to32.imm_Reg_reg[11] ),
        .\Size_17to32.imm_Reg_reg[12]_0 (\Size_17to32.imm_Reg_reg[12] ),
        .\Size_17to32.imm_Reg_reg[13]_0 (\Size_17to32.imm_Reg_reg[13] ),
        .\Size_17to32.imm_Reg_reg[14]_0 (\Size_17to32.imm_Reg_reg[14] ),
        .\Size_17to32.imm_Reg_reg[15]_0 (\Size_17to32.imm_Reg_reg[15] ),
        .\Size_17to32.imm_Reg_reg[1]_0 (\Size_17to32.imm_Reg_reg[1] ),
        .\Size_17to32.imm_Reg_reg[2]_0 (\Size_17to32.imm_Reg_reg[2] ),
        .\Size_17to32.imm_Reg_reg[3]_0 (\Size_17to32.imm_Reg_reg[3] ),
        .\Size_17to32.imm_Reg_reg[4]_0 (\Size_17to32.imm_Reg_reg[4] ),
        .\Size_17to32.imm_Reg_reg[5]_0 (\Size_17to32.imm_Reg_reg[5] ),
        .\Size_17to32.imm_Reg_reg[6]_0 (\Size_17to32.imm_Reg_reg[6] ),
        .\Size_17to32.imm_Reg_reg[7]_0 (\Size_17to32.imm_Reg_reg[7] ),
        .\Size_17to32.imm_Reg_reg[8]_0 (\Size_17to32.imm_Reg_reg[8] ),
        .\Size_17to32.imm_Reg_reg[9]_0 (\Size_17to32.imm_Reg_reg[9] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (Operand_Select_I_n_64),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (Operand_Select_I_n_65),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 (Operand_Select_I_n_82),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (Operand_Select_I_n_7),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 (Operand_Select_I_n_8),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_10 (Operand_Select_I_n_17),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_11 (Operand_Select_I_n_18),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_12 (Operand_Select_I_n_19),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_13 (Operand_Select_I_n_20),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_14 (Operand_Select_I_n_21),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_15 (Operand_Select_I_n_22),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_16 (Operand_Select_I_n_23),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_17 (Operand_Select_I_n_24),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_18 (Operand_Select_I_n_25),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_19 (Operand_Select_I_n_26),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_2 (Operand_Select_I_n_9),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_20 (Operand_Select_I_n_27),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_21 (Operand_Select_I_n_28),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_22 (Operand_Select_I_n_29),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_3 (Operand_Select_I_n_10),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_4 (Operand_Select_I_n_11),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_5 (Operand_Select_I_n_12),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_6 (Operand_Select_I_n_13),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_8 (Operand_Select_I_n_15),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_9 (Operand_Select_I_n_16),
        .\Using_FPGA.Native (Op1_Low[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (Operand_Select_I_n_31),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_44),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_32),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_55),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_33),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_32 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_35 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_34),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_81),
        .\Using_FPGA.Native_45 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_46 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_47 (PC_Module_I_n_0),
        .\Using_FPGA.Native_48 (PC_Module_I_n_1),
        .\Using_FPGA.Native_49 (PC_Module_I_n_2),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_35),
        .\Using_FPGA.Native_50 (PC_Module_I_n_3),
        .\Using_FPGA.Native_51 (PC_Module_I_n_21),
        .\Using_FPGA.Native_52 (PC_Module_I_n_22),
        .\Using_FPGA.Native_53 (PC_Module_I_n_23),
        .\Using_FPGA.Native_54 (PC_Module_I_n_24),
        .\Using_FPGA.Native_55 (PC_Module_I_n_25),
        .\Using_FPGA.Native_56 (PC_Module_I_n_17),
        .\Using_FPGA.Native_57 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_36),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_37),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_38),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_39),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .WEB(WEB),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .lmb_reg_write_reg(Operand_Select_I_n_60),
        .lmb_reg_write_reg_0(Operand_Select_I_n_61),
        .normal_piperun(normal_piperun),
        .out(out),
        .writing_reg(writing_reg));
  controller_PC_Module PC_Module_I
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .DI(DI),
        .Jump(Jump),
        .PC_OF(PC_Module_I_n_17),
        .PC_Write(PC_Write),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (PC_Module_I_n_0),
        .\Using_FPGA.Native_0 (PC_Module_I_n_1),
        .\Using_FPGA.Native_1 (PC_Module_I_n_2),
        .\Using_FPGA.Native_10 (PC_Module_I_n_25),
        .\Using_FPGA.Native_2 (PC_Module_I_n_3),
        .\Using_FPGA.Native_3 (PC_Module_I_n_18),
        .\Using_FPGA.Native_4 (PC_Module_I_n_19),
        .\Using_FPGA.Native_5 (PC_Module_I_n_20),
        .\Using_FPGA.Native_6 (PC_Module_I_n_21),
        .\Using_FPGA.Native_7 (PC_Module_I_n_22),
        .\Using_FPGA.Native_8 (PC_Module_I_n_23),
        .\Using_FPGA.Native_9 (PC_Module_I_n_24),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Register_File Register_File_I
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Imm_Value({Imm_Value[0],Imm_Value[1],Imm_Value[2],Imm_Value[3],Imm_Value[4]}),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Result_Mux Result_Mux_I
       (.ADDRBWRADDR(ADDRBWRADDR),
        .ALU_Result(ALU_I_n_2),
        .BRAM_Addr_B({BRAM_Addr_B[2],BRAM_Addr_B[3],BRAM_Addr_B[4],BRAM_Addr_B[5],BRAM_Addr_B[6],BRAM_Addr_B[7],BRAM_Addr_B[8],BRAM_Addr_B[9],BRAM_Addr_B[10],BRAM_Addr_B[11],BRAM_Addr_B[12],BRAM_Addr_B[13],BRAM_Addr_B[14],BRAM_Addr_B[15],BRAM_Addr_B[16]}),
        .Data_Read(Data_Read),
        .EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Shift_Logic_Res31_out),
        .Select_Logic_reg_0(Shift_Logic_Res30_out),
        .Select_Logic_reg_1(Shift_Logic_Res29_out),
        .Select_Logic_reg_10(Shift_Logic_Res19_out),
        .Select_Logic_reg_11(Shift_Logic_Res18_out),
        .Select_Logic_reg_12(Shift_Logic_Res17_out),
        .Select_Logic_reg_13(Shift_Logic_Res15_out),
        .Select_Logic_reg_14(Shift_Logic_Res14_out),
        .Select_Logic_reg_15(Shift_Logic_Res13_out),
        .Select_Logic_reg_16(Shift_Logic_Res12_out),
        .Select_Logic_reg_17(Shift_Logic_Res11_out),
        .Select_Logic_reg_18(Shift_Logic_Res10_out),
        .Select_Logic_reg_19(Shift_Logic_Res9_out),
        .Select_Logic_reg_2(Shift_Logic_Res28_out),
        .Select_Logic_reg_20(Shift_Logic_Res8_out),
        .Select_Logic_reg_21(Shift_Logic_Res7_out),
        .Select_Logic_reg_22(Shift_Logic_Res6_out),
        .Select_Logic_reg_23(Shift_Logic_Res5_out),
        .Select_Logic_reg_24(Shift_Logic_Res4_out),
        .Select_Logic_reg_25(Shift_Logic_Res3_out),
        .Select_Logic_reg_26(Shift_Logic_Res2_out),
        .Select_Logic_reg_27(Shift_Logic_Res1_out),
        .Select_Logic_reg_28(Shift_Logic_Res0_out),
        .Select_Logic_reg_29(Shift_Logic_Res),
        .Select_Logic_reg_3(Shift_Logic_Res27_out),
        .Select_Logic_reg_4(Shift_Logic_Res26_out),
        .Select_Logic_reg_5(Shift_Logic_Res24_out),
        .Select_Logic_reg_6(Shift_Logic_Res23_out),
        .Select_Logic_reg_7(Shift_Logic_Res22_out),
        .Select_Logic_reg_8(Shift_Logic_Res21_out),
        .Select_Logic_reg_9(Shift_Logic_Res20_out),
        .Shift_Logic_Res(Shift_Logic_Res32_out),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ),
        .\Using_FPGA.Native (ALU_I_n_3),
        .\Using_FPGA.Native_0 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_Shift_Logic_Module Shift_Logic_Module_I
       (.EX_Op2(EX_Op2),
        .Op1_Logic(Op1_Low[1]),
        .Op1_Shift(EX_Op1),
        .Op2(Operand_Select_I_n_5),
        .Q(Q),
        .Select_Logic(Select_Logic),
        .Sext(Sext),
        .Sext8_reg(Sext8_reg),
        .Sext8_reg_0(Sext8_reg_0),
        .Sext8_reg_1(Sext8_reg_1),
        .Sext8_reg_2(Sext8_reg_2),
        .Sext8_reg_3(Sext8_reg_3),
        .Sext8_reg_4(Sext8_reg_4),
        .Sext8_reg_5(Sext8_reg_5),
        .Shift_Logic_Res(Shift_Logic_Res32_out),
        .Shift_Oper(Shift_Oper),
        .Shifted(Op1_Shift),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (Shift_Logic_Res28_out),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 (Shift_Logic_Res27_out),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 (Shift_Logic_Res26_out),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 (Shift_Logic_Res24_out),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Shift_Logic_Res31_out),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (Shift_Logic_Res30_out),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 (Shift_Logic_Res29_out),
        .\Using_FPGA.Native (Shift_Logic_Res23_out),
        .\Using_FPGA.Native_0 (Shift_Logic_Res22_out),
        .\Using_FPGA.Native_1 (Shift_Logic_Res21_out),
        .\Using_FPGA.Native_10 (Shift_Logic_Res11_out),
        .\Using_FPGA.Native_11 (Shift_Logic_Res10_out),
        .\Using_FPGA.Native_12 (Shift_Logic_Res9_out),
        .\Using_FPGA.Native_13 (Shift_Logic_Res8_out),
        .\Using_FPGA.Native_14 (Shift_Logic_Res7_out),
        .\Using_FPGA.Native_15 (Shift_Logic_Res6_out),
        .\Using_FPGA.Native_16 (Shift_Logic_Res5_out),
        .\Using_FPGA.Native_17 (Shift_Logic_Res4_out),
        .\Using_FPGA.Native_18 (Shift_Logic_Res3_out),
        .\Using_FPGA.Native_19 (Shift_Logic_Res2_out),
        .\Using_FPGA.Native_2 (Shift_Logic_Res20_out),
        .\Using_FPGA.Native_20 (Shift_Logic_Res1_out),
        .\Using_FPGA.Native_21 (Shift_Logic_Res0_out),
        .\Using_FPGA.Native_22 (Shift_Logic_Res),
        .\Using_FPGA.Native_23 (Op1_Low[0]),
        .\Using_FPGA.Native_24 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_7),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_3 (Shift_Logic_Res19_out),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_12),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_13),
        .\Using_FPGA.Native_32 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_15),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_16),
        .\Using_FPGA.Native_35 (Operand_Select_I_n_17),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_18),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_19),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_20),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_21),
        .\Using_FPGA.Native_4 (Shift_Logic_Res18_out),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_22),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_23),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_24),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_25),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_26),
        .\Using_FPGA.Native_45 (Operand_Select_I_n_27),
        .\Using_FPGA.Native_46 (Operand_Select_I_n_28),
        .\Using_FPGA.Native_47 (Operand_Select_I_n_29),
        .\Using_FPGA.Native_48 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_49 (Operand_Select_I_n_31),
        .\Using_FPGA.Native_5 (Shift_Logic_Res17_out),
        .\Using_FPGA.Native_50 (Operand_Select_I_n_32),
        .\Using_FPGA.Native_51 (Operand_Select_I_n_33),
        .\Using_FPGA.Native_52 (Operand_Select_I_n_34),
        .\Using_FPGA.Native_53 (Operand_Select_I_n_66),
        .\Using_FPGA.Native_54 (Operand_Select_I_n_35),
        .\Using_FPGA.Native_55 (Operand_Select_I_n_36),
        .\Using_FPGA.Native_56 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_57 (Operand_Select_I_n_37),
        .\Using_FPGA.Native_58 (Operand_Select_I_n_38),
        .\Using_FPGA.Native_59 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_6 (Shift_Logic_Res15_out),
        .\Using_FPGA.Native_60 (Operand_Select_I_n_39),
        .\Using_FPGA.Native_61 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_62 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_63 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_64 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_65 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_66 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_67 (Operand_Select_I_n_44),
        .\Using_FPGA.Native_68 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_69 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_7 (Shift_Logic_Res14_out),
        .\Using_FPGA.Native_70 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_71 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_72 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_73 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_74 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_75 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_76 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_77 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_78 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_79 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_8 (Shift_Logic_Res13_out),
        .\Using_FPGA.Native_80 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_81 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_82 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_83 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_84 (Operand_Select_I_n_55),
        .\Using_FPGA.Native_85 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_86 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_87 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_88 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_89 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_9 (Shift_Logic_Res12_out),
        .\Using_FPGA.Native_90 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_91 (Operand_Select_I_n_60),
        .\Using_FPGA.Native_92 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_93 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_94 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .\Using_FPGA.Native_95 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_96 (Operand_Select_I_n_64),
        .\Using_FPGA.Native_97 (Shifted),
        .\Using_FPGA.Native_98 (Operand_Select_I_n_81));
  controller_Zero_Detect Zero_Detect_I
       (.Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_N(Reg_Test_Equal_N),
        .Reg_zero(Reg_zero),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7));
endmodule

(* ORIG_REF_NAME = "Decode" *) 
module controller_Decode
   (mbar_is_sleep_reg_0,
    Buffer_Addr,
    Reg1_Addr,
    Imm_Value,
    break_Pipe_i_reg_0,
    normal_piperun,
    Write_Addr,
    Res_Forward1,
    ALU_Op,
    Carry_In,
    Reg_Test_Equal,
    Reg_Test_Equal_N,
    Select_Logic_reg_0,
    OpSel1_SPR,
    \Using_FPGA.Native ,
    Unsigned_Op,
    Select_Logic,
    Byte,
    Doublet,
    Compare_Instr,
    Sext8,
    Sext16,
    PC_Incr,
    pc_write_I,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    E,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    lmb_reg_write0,
    lmb_reg_read0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    msb,
    MSR_Rst,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    data_Read_Mask,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \No_ECC.lmb_as_reg ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \No_ECC.lmb_as_reg_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    Sleep_Decode,
    Q,
    Sign_Extend,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    R,
    Clk,
    DATA_OUTA,
    \No_ECC.lmb_as_reg_1 ,
    LMB_Ready,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    out,
    Op1_Low,
    ALU_Carry,
    \Using_FPGA.Native_49 ,
    Reg_zero,
    active_wakeup0,
    MSR,
    lmb_reg_write_reg,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg_2 ,
    lmb_reg_read_Q_reg,
    EX_Result,
    Reg2_Data,
    \Size_17to32.imm_Reg_reg[0] ,
    INTC_IRQ,
    \Using_FPGA.Native_50 ,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    lmb_as,
    Sl_Rdy,
    New_Value,
    \Using_FPGA.Native_54 ,
    reset_temp,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    POR_FF_I,
    \Synchronize.use_sync_reset.sync_reg[2]_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output mbar_is_sleep_reg_0;
  output [2:0]Buffer_Addr;
  output [0:4]Reg1_Addr;
  output [0:15]Imm_Value;
  output break_Pipe_i_reg_0;
  output normal_piperun;
  output [0:4]Write_Addr;
  output Res_Forward1;
  output [0:1]ALU_Op;
  output Carry_In;
  output Reg_Test_Equal;
  output Reg_Test_Equal_N;
  output Select_Logic_reg_0;
  output OpSel1_SPR;
  output \Using_FPGA.Native ;
  output Unsigned_Op;
  output Select_Logic;
  output Byte;
  output Doublet;
  output Compare_Instr;
  output Sext8;
  output Sext16;
  output PC_Incr;
  output pc_write_I;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output [0:0]E;
  output Reg_Write;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output lmb_reg_write0;
  output lmb_reg_read0;
  output \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  output msb;
  output MSR_Rst;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output \Using_FPGA.Native_36 ;
  output \Using_FPGA.Native_37 ;
  output \Using_FPGA.Native_38 ;
  output \Using_FPGA.Native_39 ;
  output \Using_FPGA.Native_40 ;
  output [23:0]data_Read_Mask;
  output \Using_FPGA.Native_41 ;
  output \Using_FPGA.Native_42 ;
  output \Using_FPGA.Native_43 ;
  output \No_ECC.lmb_as_reg ;
  output \Using_FPGA.Native_44 ;
  output \Using_FPGA.Native_45 ;
  output \Using_FPGA.Native_46 ;
  output \No_ECC.lmb_as_reg_0 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output Sleep_Decode;
  output [1:0]Q;
  output Sign_Extend;
  output [1:0]\Using_FPGA.Native_47 ;
  output [1:0]\Using_FPGA.Native_48 ;
  input R;
  input Clk;
  input [0:31]DATA_OUTA;
  input \No_ECC.lmb_as_reg_1 ;
  input LMB_Ready;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input [0:0]out;
  input [0:1]Op1_Low;
  input ALU_Carry;
  input \Using_FPGA.Native_49 ;
  input Reg_zero;
  input active_wakeup0;
  input [2:0]MSR;
  input lmb_reg_write_reg;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg_2 ;
  input lmb_reg_read_Q_reg;
  input [0:31]EX_Result;
  input [0:31]Reg2_Data;
  input [15:0]\Size_17to32.imm_Reg_reg[0] ;
  input INTC_IRQ;
  input [1:0]\Using_FPGA.Native_50 ;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input lmb_as;
  input Sl_Rdy;
  input New_Value;
  input \Using_FPGA.Native_54 ;
  input reset_temp;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input POR_FF_I;
  input \Synchronize.use_sync_reset.sync_reg[2]_1 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;

  wire ALU_Carry;
  wire [0:1]ALU_Op;
  wire [2:0]Buffer_Addr;
  wire Byte;
  wire CI;
  wire CI64_in;
  wire CI97_in;
  wire Carry_In;
  wire Clk;
  wire Compare_Instr;
  wire D;
  wire [0:31]DATA_OUTA;
  wire DI;
  wire \Data_Flow_I/Result_Mux_I/p_0_in2_out ;
  wire \Data_Flow_I/Result_Mux_I/p_0_in3_out ;
  wire Doublet;
  wire [0:0]E;
  wire [0:31]EX_Result;
  wire I179_in;
  wire I190_in;
  wire I2;
  wire I210_in;
  wire I214_out;
  wire I3;
  wire INTC_IRQ;
  wire [0:15]Imm_Value;
  wire LMB_Ready;
  wire LWX_SWX_Carry;
  wire [2:0]MSR;
  wire MSR_Rst;
  wire New_Carry;
  wire New_Value;
  wire \No_ECC.lmb_as_reg ;
  wire \No_ECC.lmb_as_reg_0 ;
  wire \No_ECC.lmb_as_reg_1 ;
  wire \No_ECC.lmb_as_reg_2 ;
  wire [0:1]Op1_Low;
  wire OpSel1_SPR;
  wire PC_Incr;
  wire POR_FF_I;
  wire PreFetch_Buffer_I_n_1;
  wire PreFetch_Buffer_I_n_100;
  wire PreFetch_Buffer_I_n_101;
  wire PreFetch_Buffer_I_n_102;
  wire PreFetch_Buffer_I_n_103;
  wire PreFetch_Buffer_I_n_104;
  wire PreFetch_Buffer_I_n_105;
  wire PreFetch_Buffer_I_n_106;
  wire PreFetch_Buffer_I_n_107;
  wire PreFetch_Buffer_I_n_108;
  wire PreFetch_Buffer_I_n_109;
  wire PreFetch_Buffer_I_n_110;
  wire PreFetch_Buffer_I_n_111;
  wire PreFetch_Buffer_I_n_112;
  wire PreFetch_Buffer_I_n_113;
  wire PreFetch_Buffer_I_n_114;
  wire PreFetch_Buffer_I_n_115;
  wire PreFetch_Buffer_I_n_119;
  wire PreFetch_Buffer_I_n_120;
  wire PreFetch_Buffer_I_n_121;
  wire PreFetch_Buffer_I_n_122;
  wire PreFetch_Buffer_I_n_123;
  wire PreFetch_Buffer_I_n_124;
  wire PreFetch_Buffer_I_n_125;
  wire PreFetch_Buffer_I_n_126;
  wire PreFetch_Buffer_I_n_127;
  wire PreFetch_Buffer_I_n_128;
  wire PreFetch_Buffer_I_n_34;
  wire PreFetch_Buffer_I_n_35;
  wire PreFetch_Buffer_I_n_36;
  wire PreFetch_Buffer_I_n_42;
  wire PreFetch_Buffer_I_n_43;
  wire PreFetch_Buffer_I_n_47;
  wire PreFetch_Buffer_I_n_48;
  wire PreFetch_Buffer_I_n_5;
  wire PreFetch_Buffer_I_n_50;
  wire PreFetch_Buffer_I_n_52;
  wire PreFetch_Buffer_I_n_53;
  wire PreFetch_Buffer_I_n_8;
  wire PreFetch_Buffer_I_n_87;
  wire PreFetch_Buffer_I_n_96;
  wire PreFetch_Buffer_I_n_99;
  wire [1:0]Q;
  wire R;
  wire R_0;
  wire [0:4]Reg1_Addr;
  wire [0:31]Reg2_Data;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire Reg_Write;
  wire Reg_zero;
  wire Res_Forward1;
  wire Res_Forward2;
  wire S;
  wire S0_out;
  wire Select_Logic;
  wire Select_Logic0;
  wire Select_Logic_reg_0;
  wire Set_BIP;
  wire Sext16;
  wire Sext8;
  wire Shift_Carry_In;
  wire [0:1]Shift_Oper;
  wire Sign_Extend;
  wire Sign_Extend_i_1_n_0;
  wire [15:0]\Size_17to32.imm_Reg_reg[0] ;
  wire Sl_Rdy;
  wire Sleep_Decode;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_1 ;
  wire Unsigned_Op;
  wire Use_Imm_Reg;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.ALU_Carry_FDRE_n_1 ;
  wire \Using_FPGA.ALU_Carry_FDRE_n_2 ;
  wire \Using_FPGA.ALU_Carry_MUXCY_n_0 ;
  wire \Using_FPGA.Correct_Carry_MUXCY_n_0 ;
  wire \Using_FPGA.Force1_FDRE_n_0 ;
  wire \Using_FPGA.Force2_FDRE_n_0 ;
  wire \Using_FPGA.Force_Val1_FDRE_n_0 ;
  wire \Using_FPGA.Force_Val2_FDRSE_n_0 ;
  wire \Using_FPGA.I_correct_Carry_Select_n_0 ;
  wire \Using_FPGA.Intr_Carry_MUXCY_n_0 ;
  wire \Using_FPGA.MULT_AND_I_n_0 ;
  wire \Using_FPGA.MUXCY_JUMP_CARRY_n_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire [1:0]\Using_FPGA.Native_47 ;
  wire [1:0]\Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire [1:0]\Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__65_n_0 ;
  wire \Using_FPGA.Native_i_2__12_n_0 ;
  wire \Using_FPGA.Native_i_3__13_n_0 ;
  wire \Using_FPGA.Native_i_3__5_n_0 ;
  wire \Using_FPGA.Native_i_4__8_n_0 ;
  wire \Using_FPGA.Native_i_5__7_n_0 ;
  wire \Using_FPGA.OpSel1_SPR_Select_LUT_1_n_0 ;
  wire \Using_FPGA.OpSel1_SPR_Select_LUT_2_n_0 ;
  wire \Using_FPGA.OpSel1_SPR_Select_LUT_3_n_0 ;
  wire \Using_FPGA.OpSel1_SPR_Select_LUT_4_n_0 ;
  wire \Using_FPGA.Res_Forward1_LUT1_n_0 ;
  wire \Using_FPGA.Res_Forward1_LUT2_n_0 ;
  wire \Using_FPGA.Res_Forward1_LUT3_n_0 ;
  wire \Using_FPGA.Res_Forward2_LUT1_n_0 ;
  wire \Using_FPGA.Res_Forward2_LUT2_n_0 ;
  wire \Using_FPGA.Res_Forward2_LUT3_n_0 ;
  wire \Using_FPGA.Use_Reg_Neg_DI_FDRE_n_0 ;
  wire \Using_FPGA.Use_Reg_Neg_S_FDRE_n_0 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_n_0 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_n_0 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_n_0 ;
  wire \Using_FPGA.force_di1_LUT3_n_0 ;
  wire \Using_FPGA.force_di2_LUT4_n_0 ;
  wire \Using_FPGA.force_jump1_LUT3_n_0 ;
  wire \Using_FPGA.force_jump2_LUT4_n_0 ;
  wire \Using_FPGA.of_PipeRun_Select_LUT4_n_0 ;
  wire \Using_FPGA.reset_BIP_I_reg_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg_n_0 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  wire \Using_LWX_SWX_instr.reservation_i_1_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ;
  wire [0:4]Write_Addr;
  wire active_wakeup;
  wire active_wakeup0;
  wire break_Pipe_i_reg0;
  wire break_Pipe_i_reg_0;
  wire break_Pipe_i_reg__0;
  wire byte_i14_out;
  wire d_AS_I;
  wire d_AS_I17_out;
  wire [23:0]data_Read_Mask;
  wire doublet_Read_i_i_1_n_0;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_first_cycle;
  wire force1_i31_out;
  wire force2_i;
  wire force_Val1_i29_out;
  wire iFetch_In_Progress_i_1_n_0;
  wire iFetch_In_Progress_reg_n_0;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_i_1_n_0;
  wire inHibit_EX_i_2_n_0;
  wire is_lwx_I;
  wire is_swx_I_reg_n_0;
  wire jump2_I_reg_n_0;
  wire lmb_as;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire lmb_reg_write_i_2_n_0;
  wire lmb_reg_write_reg;
  wire load_Store_i;
  wire load_Store_i2;
  wire lopt;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire lopt_9;
  wire mbar_decode_I;
  wire mbar_first_i_3_n_0;
  wire mbar_first_reg_n_0;
  wire mbar_hold_I_reg_n_0;
  wire mbar_is_sleep;
  wire mbar_is_sleep_reg_0;
  wire mbar_sleep;
  wire mbar_sleep0;
  wire mbar_sleep_i_1_n_0;
  wire missed_IFetch;
  wire msb;
  wire mtsmsr_write_i_reg_n_0;
  wire mul_Executing;
  wire mul_Executing0;
  wire nonvalid_IFetch_n_reg_n_0;
  wire normal_piperun;
  wire of_mbar_decode;
  wire old_IE_value;
  wire [0:0]out;
  wire [0:0]p_1_in;
  wire p_1_in48_in;
  wire p_76_in;
  wire pc_write_I;
  wire quadlet_Read_i_i_1_n_0;
  wire reset_BIP_I8_out;
  wire reset_delay;
  wire reset_temp;
  wire select_ALU_Carry_reg_n_0;
  wire sleep_i_i_1_n_0;
  wire swx_ready;
  wire take_intr_2nd_cycle_reg_n_0;
  wire use_Reg_Neg_DI_i28_out;
  wire use_Reg_Neg_S_i30_out;
  wire \write_Addr_I[0]_i_1_n_0 ;
  wire write_Carry_I_reg_n_0;
  wire writing_reg_n_0;

  assign \^lopt_1  = lopt_2;
  assign \^lopt_2  = lopt_5;
  assign lopt_1 = select_ALU_Carry_reg_n_0;
  assign lopt_3 = \Using_FPGA.ALU_Carry_FDRE_n_1 ;
  assign lopt_4 = \Using_FPGA.ALU_Carry_FDRE_n_2 ;
  assign lopt_6 = \Using_FPGA.force_di1_LUT3_n_0 ;
  assign lopt_7 = \Using_FPGA.force_jump1_LUT3_n_0 ;
  FDRE Compare_Instr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_114),
        .Q(Compare_Instr),
        .R(1'b0));
  FDRE \Logic_Oper_reg[0] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(PreFetch_Buffer_I_n_8),
        .Q(\Using_FPGA.Native_47 [1]),
        .R(out));
  FDRE \Logic_Oper_reg[1] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(p_1_in),
        .Q(\Using_FPGA.Native_47 [0]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    \No_ECC.lmb_as_i_1 
       (.I0(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I1(reset_temp),
        .O(\No_ECC.lmb_as_reg ));
  LUT4 #(
    .INIT(16'h00D0)) 
    \No_ECC.lmb_as_i_1__0 
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(d_AS_I),
        .I3(POR_FF_I),
        .O(\No_ECC.lmb_as_reg_0 ));
  controller_PreFetch_Buffer PreFetch_Buffer_I
       (.Byte(Byte),
        .CI(mbar_is_sleep_reg_0),
        .CI64_in(CI64_in),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .Compare_Instr_reg(PreFetch_Buffer_I_n_114),
        .D(D),
        .DATA_OUTA(DATA_OUTA),
        .Doublet(Doublet),
        .E(PreFetch_Buffer_I_n_36),
        .EX_Result(EX_Result),
        .I179_in(I179_in),
        .I2(I2),
        .I210_in(I210_in),
        .I214_out(I214_out),
        .INTC_IRQ(INTC_IRQ),
        .Imm_Value({Imm_Value[2],Imm_Value[3],Imm_Value[4],Imm_Value[5],Imm_Value[6],Imm_Value[7],Imm_Value[8],Imm_Value[9],Imm_Value[10],Imm_Value[11],Imm_Value[12],Imm_Value[13],Imm_Value[14],Imm_Value[15]}),
        .LMB_Ready(LMB_Ready),
        .\Logic_Oper_reg[0] (PreFetch_Buffer_I_n_8),
        .MSR(MSR),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg_2 ),
        .PC_Incr(PC_Incr),
        .R(R),
        .R_0(R_0),
        .Reg1_Addr(Reg1_Addr[4]),
        .Reg2_Data(Reg2_Data),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .Res_Forward2(Res_Forward2),
        .\Result_Sel_reg[0] (PreFetch_Buffer_I_n_1),
        .\Result_Sel_reg[1] (PreFetch_Buffer_I_n_5),
        .S(S),
        .SR(PreFetch_Buffer_I_n_35),
        .Select_Logic0(Select_Logic0),
        .Sext16_reg(PreFetch_Buffer_I_n_121),
        .Sext16_reg_0(Sext16),
        .Sext8_reg(PreFetch_Buffer_I_n_122),
        .Sext8_reg_0(Sext8),
        .Sign_Extend_reg(PreFetch_Buffer_I_n_47),
        .\Size_17to32.imm_Reg_reg[0] (Imm_Value[0]),
        .\Size_17to32.imm_Reg_reg[0]_0 (\Size_17to32.imm_Reg_reg[0] ),
        .\Size_17to32.imm_Reg_reg[15] (E),
        .\Size_17to32.imm_Reg_reg[1] (Imm_Value[1]),
        .Sl_Rdy(Sl_Rdy),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .Unsigned_Op_reg(PreFetch_Buffer_I_n_34),
        .Use_Imm_Reg(Use_Imm_Reg),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Reg1_Addr[1]),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (Reg1_Addr[2]),
        .\Using_FPGA.Native (PreFetch_Buffer_I_n_42),
        .\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_43),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_33 (PreFetch_Buffer_I_n_87),
        .\Using_FPGA.Native_34 (PreFetch_Buffer_I_n_103),
        .\Using_FPGA.Native_35 (PreFetch_Buffer_I_n_104),
        .\Using_FPGA.Native_36 (PreFetch_Buffer_I_n_112),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_38 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_40 (break_Pipe_i_reg_0),
        .\Using_FPGA.Native_41 (\Using_FPGA.Force_Val2_FDRSE_n_0 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.set_BIP_I_reg (PreFetch_Buffer_I_n_106),
        .\Using_FPGA.set_BIP_I_reg_0 (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (Select_Logic_reg_0),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.Native ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_n_0 ),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ),
        .\Using_LWX_SWX_instr.reservation_reg (PreFetch_Buffer_I_n_53),
        .\Using_LWX_SWX_instr.reservation_reg_0 (\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .break_Pipe_i_reg(PreFetch_Buffer_I_n_96),
        .break_Pipe_i_reg0(break_Pipe_i_reg0),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .byte_i14_out(byte_i14_out),
        .byte_i_reg(PreFetch_Buffer_I_n_128),
        .d_AS_I17_out(d_AS_I17_out),
        .doublet_i_reg(PreFetch_Buffer_I_n_127),
        .enable_Interrupts_I(enable_Interrupts_I),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(PreFetch_Buffer_I_n_50),
        .force1_i31_out(force1_i31_out),
        .force2_i(force2_i),
        .force_Val1_i29_out(force_Val1_i29_out),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX1(inHibit_EX1),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_48),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(PreFetch_Buffer_I_n_125),
        .is_swx_I_reg(PreFetch_Buffer_I_n_119),
        .is_swx_I_reg_0(is_swx_I_reg_n_0),
        .jump2_I_reg(Reg1_Addr[0]),
        .jump2_I_reg_0(PreFetch_Buffer_I_n_52),
        .jump2_I_reg_1(jump2_I_reg_n_0),
        .lmb_as(lmb_as),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .load_Store_i(load_Store_i),
        .load_Store_i2(load_Store_i2),
        .load_Store_i_reg(PreFetch_Buffer_I_n_123),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .mbar_decode_I_reg(Reg1_Addr[3]),
        .mbar_hold_I_reg(PreFetch_Buffer_I_n_110),
        .mbar_hold_I_reg_0(mbar_hold_I_reg_n_0),
        .mbar_is_sleep_reg(Buffer_Addr[0]),
        .mbar_is_sleep_reg_0(Buffer_Addr[1]),
        .mbar_is_sleep_reg_1(Buffer_Addr[2]),
        .mbar_sleep_reg(mbar_first_i_3_n_0),
        .missed_IFetch(missed_IFetch),
        .missed_IFetch_reg(PreFetch_Buffer_I_n_111),
        .mtsmsr_write_i_reg(PreFetch_Buffer_I_n_107),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_n_0),
        .mul_Executing(mul_Executing),
        .mul_Executing0(mul_Executing0),
        .mul_Executing_reg(normal_piperun),
        .mul_Executing_reg_0(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .nonvalid_IFetch_n_reg(PreFetch_Buffer_I_n_105),
        .nonvalid_IFetch_n_reg_0(nonvalid_IFetch_n_reg_n_0),
        .of_mbar_decode(of_mbar_decode),
        .out(out),
        .p_1_in(p_1_in),
        .p_1_in48_in(p_1_in48_in),
        .p_76_in(p_76_in),
        .pc_write_I(pc_write_I),
        .reset_BIP_I8_out(reset_BIP_I8_out),
        .select_ALU_Carry_reg(PreFetch_Buffer_I_n_113),
        .select_ALU_Carry_reg_0(select_ALU_Carry_reg_n_0),
        .swx_ready(swx_ready),
        .swx_ready_reg(PreFetch_Buffer_I_n_124),
        .take_intr_2nd_cycle_reg(PreFetch_Buffer_I_n_108),
        .take_intr_2nd_cycle_reg_0(take_intr_2nd_cycle_reg_n_0),
        .use_Reg_Neg_DI_i28_out(use_Reg_Neg_DI_i28_out),
        .use_Reg_Neg_S_i30_out(use_Reg_Neg_S_i30_out),
        .using_Imm_reg(PreFetch_Buffer_I_n_109),
        .\write_Addr_I_reg[1] ({PreFetch_Buffer_I_n_99,PreFetch_Buffer_I_n_100,PreFetch_Buffer_I_n_101,PreFetch_Buffer_I_n_102}),
        .write_Carry_I_reg(PreFetch_Buffer_I_n_120),
        .write_Carry_I_reg_0(write_Carry_I_reg_n_0),
        .write_Reg_reg(PreFetch_Buffer_I_n_115),
        .writing_reg(PreFetch_Buffer_I_n_126));
  FDRE \Result_Sel_reg[0] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(PreFetch_Buffer_I_n_1),
        .Q(\Using_FPGA.Native_48 [1]),
        .R(PreFetch_Buffer_I_n_35));
  FDRE \Result_Sel_reg[1] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(PreFetch_Buffer_I_n_5),
        .Q(\Using_FPGA.Native_48 [0]),
        .R(PreFetch_Buffer_I_n_35));
  FDRE Select_Logic_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(Select_Logic0),
        .Q(Select_Logic),
        .R(out));
  FDRE Sext16_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_121),
        .Q(Sext16),
        .R(1'b0));
  FDRE Sext8_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_122),
        .Q(Sext8),
        .R(1'b0));
  FDRE Shift_Carry_In_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.Correct_Carry_MUXCY_n_0 ),
        .Q(Shift_Carry_In),
        .R(out));
  FDRE \Shift_Oper_reg[0] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(Imm_Value[9]),
        .Q(Shift_Oper[0]),
        .R(out));
  FDRE \Shift_Oper_reg[1] 
       (.C(Clk),
        .CE(normal_piperun),
        .D(Imm_Value[10]),
        .Q(Shift_Oper[1]),
        .R(out));
  LUT6 #(
    .INIT(64'hFF8FFFFFFF8F0000)) 
    Sign_Extend_i_1
       (.I0(Imm_Value[9]),
        .I1(Imm_Value[10]),
        .I2(PreFetch_Buffer_I_n_47),
        .I3(\Using_FPGA.Native ),
        .I4(normal_piperun),
        .I5(Sign_Extend),
        .O(Sign_Extend_i_1_n_0));
  FDRE Sign_Extend_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Sign_Extend_i_1_n_0),
        .Q(Sign_Extend),
        .R(out));
  FDRE Unsigned_Op_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(Imm_Value[14]),
        .Q(Unsigned_Op),
        .R(PreFetch_Buffer_I_n_34));
  LUT6 #(
    .INIT(64'h7F007F7F00000000)) 
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_i_1 
       (.I0(mul_Executing),
        .I1(ex_Valid),
        .I2(mbar_decode_I),
        .I3(LMB_Ready),
        .I4(iFetch_In_Progress_reg_n_0),
        .I5(CI97_in),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
  LUT3 #(
    .INIT(8'h8A)) 
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_i_2 
       (.I0(d_AS_I),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(is_swx_I_reg_n_0),
        .O(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'h5DFFFFFF)) 
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_i_4 
       (.I0(writing_reg_n_0),
        .I1(is_swx_I_reg_n_0),
        .I2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I3(load_Store_i),
        .I4(ex_Valid),
        .O(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ));
  controller_microblaze_v9_5_MB_FDRE \Using_FPGA.ALU_Carry_FDRE 
       (.Carry_In(Carry_In),
        .Clk(Clk),
        .MSR(MSR[1]),
        .Shift_Carry_In_reg(\Using_FPGA.ALU_Carry_FDRE_n_1 ),
        .Shift_Carry_In_reg_0(\Using_FPGA.ALU_Carry_FDRE_n_2 ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .ex_Valid(ex_Valid),
        .is_lwx_I(is_lwx_I),
        .is_swx_I_reg(is_swx_I_reg_n_0),
        .load_Store_i(load_Store_i),
        .mul_Executing_reg(normal_piperun),
        .out(out),
        .write_Carry_I_reg(\Using_FPGA.Intr_Carry_MUXCY_n_0 ),
        .write_Carry_I_reg_0(write_Carry_I_reg_n_0));
  controller_microblaze_v9_5_MB_MUXCY \Using_FPGA.ALU_Carry_MUXCY 
       (.\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_FPGA.I_correct_Carry_Select_n_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_FPGA.MULT_AND_I_n_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.ALU_Carry_MUXCY_n_0 ),
        .lopt(\^lopt_5 ),
        .lopt_1(\^lopt_6 ),
        .lopt_2(load_Store_i2),
        .write_Carry_I_reg(\Using_FPGA.Correct_Carry_MUXCY_n_0 ));
  controller_microblaze_v9_5_MB_FDRE_0 \Using_FPGA.ALU_OP0_FDRE 
       (.ALU_Op(ALU_Op[0]),
        .Clk(Clk),
        .D(D),
        .mul_Executing_reg(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_1 \Using_FPGA.ALU_OP1_FDRE 
       (.ALU_Op(ALU_Op[1]),
        .Clk(Clk),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (PreFetch_Buffer_I_n_42),
        .mul_Executing_reg(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_MUXCY_2 \Using_FPGA.Correct_Carry_MUXCY 
       (.New_Carry(New_Carry),
        .Shift_Carry_In_reg(\Using_FPGA.Correct_Carry_MUXCY_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_FPGA.ALU_Carry_FDRE_n_1 ),
        .lopt(\^lopt_1 ),
        .write_Carry_I_reg(\Using_FPGA.ALU_Carry_FDRE_n_2 ));
  controller_microblaze_v9_5_MB_FDRE_3 \Using_FPGA.Force1_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .break_Pipe_i_reg(\Using_FPGA.Force1_FDRE_n_0 ),
        .force1_i31_out(force1_i31_out),
        .mul_Executing_reg(normal_piperun));
  controller_microblaze_v9_5_MB_FDRE_4 \Using_FPGA.Force2_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .break_Pipe_i_reg(\Using_FPGA.Force2_FDRE_n_0 ),
        .force2_i(force2_i),
        .mul_Executing_reg(normal_piperun));
  controller_microblaze_v9_5_MB_FDRE_5 \Using_FPGA.Force_Val1_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .break_Pipe_i_reg(\Using_FPGA.Force_Val1_FDRE_n_0 ),
        .force_Val1_i29_out(force_Val1_i29_out),
        .mul_Executing_reg(normal_piperun));
  controller_MB_FDRSE \Using_FPGA.Force_Val2_FDRSE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Force_Val2_FDRSE_n_0 ),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_112),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Native ));
  controller_MB_LUT4__parameterized21 \Using_FPGA.I_correct_Carry_Select 
       (.\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (PreFetch_Buffer_I_n_43),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (PreFetch_Buffer_I_n_103),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (PreFetch_Buffer_I_n_104),
        .\Using_FPGA.Native_0 (\Using_FPGA.I_correct_Carry_Select_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_6 \Using_FPGA.Intr_Carry_MUXCY 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Intr_Carry_MUXCY_n_0 ),
        .load_Store_i2(load_Store_i2),
        .lopt(\^lopt_5 ),
        .lopt_1(\^lopt_6 ),
        .write_Carry_I_reg(\Using_FPGA.ALU_Carry_MUXCY_n_0 ));
  controller_MB_MULT_AND \Using_FPGA.MULT_AND_I 
       (.\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (PreFetch_Buffer_I_n_43),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (PreFetch_Buffer_I_n_104),
        .\Using_FPGA.Native_0 (\Using_FPGA.MULT_AND_I_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_7 \Using_FPGA.MUXCY_JUMP_CARRY 
       (.Reg_zero(Reg_zero),
        .\Using_FPGA.Native_0 (\Using_FPGA.force_jump1_LUT3_n_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.force_di1_LUT3_n_0 ),
        .break_Pipe_i_reg(\Using_FPGA.MUXCY_JUMP_CARRY_n_0 ),
        .lopt(\^lopt_2 ));
  controller_microblaze_v9_5_MB_MUXCY_8 \Using_FPGA.MUXCY_JUMP_CARRY2 
       (.CI64_in(CI64_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.force_di2_LUT4_n_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.MUXCY_JUMP_CARRY_n_0 ),
        .ex_Valid_reg(\Using_FPGA.force_jump2_LUT4_n_0 ),
        .lopt(\^lopt_7 ),
        .lopt_1(lopt_8),
        .lopt_2(PreFetch_Buffer_I_n_96),
        .lopt_3(lopt_9),
        .lopt_4(S),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .lopt_7(\Synchronize.use_sync_reset.sync_reg[2] ));
  controller_microblaze_v9_5_MB_MUXCY_9 \Using_FPGA.MUXCY_JUMP_CARRY3 
       (.CI64_in(CI64_in),
        .\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_96),
        .break_Pipe_i_reg(break_Pipe_i_reg_0),
        .lopt(\^lopt_7 ),
        .lopt_1(lopt_8));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[12]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[13]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[14]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[15]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[16]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[17]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[18]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[19]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[20]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__109 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[21]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__110 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[22]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__111 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[23]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__112 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[7]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__113 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[6]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__114 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[5]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__115 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[4]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__116 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[3]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__117 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[2]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__118 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[1]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__119 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(data_Read_Mask[0]));
  LUT6 #(
    .INIT(64'hBAAABAAABAAABABA)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(reset_delay),
        .I1(\Using_FPGA.Native_i_2__12_n_0 ),
        .I2(ex_Valid),
        .I3(I214_out),
        .I4(lmb_reg_write_reg),
        .I5(writing_reg_n_0),
        .O(Reg_Write));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(\Using_FPGA.Native ),
        .I1(ex_Valid),
        .I2(mtsmsr_write_i_reg_n_0),
        .I3(break_Pipe_i_reg__0),
        .O(\Using_FPGA.Native_i_1__65_n_0 ));
  LUT4 #(
    .INIT(16'hAAAB)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(\Using_FPGA.Native ),
        .I1(inHibit_EX),
        .I2(jump2_I_reg_n_0),
        .I3(Use_Imm_Reg),
        .O(S0_out));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(\Using_FPGA.Native_51 ),
        .I1(Shift_Oper[1]),
        .I2(Shift_Carry_In),
        .I3(Shift_Oper[0]),
        .O(msb));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(out),
        .I1(ex_Valid),
        .I2(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .O(MSR_Rst));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'hBAAA)) 
    \Using_FPGA.Native_i_1__71 
       (.I0(out),
        .I1(New_Carry),
        .I2(write_Carry_I_reg_n_0),
        .I3(ex_Valid),
        .O(\Using_FPGA.Native_32 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__73 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_33 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_34 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_35 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_36 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_37 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_38 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_39 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(Sext8),
        .I1(\Using_FPGA.Native_52 ),
        .I2(Sext16),
        .O(\Using_FPGA.Native_40 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[8]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[9]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[10]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(\Using_FPGA.Native_52 ),
        .I1(Sext8),
        .I2(\Using_FPGA.Native_53 ),
        .I3(Sext16),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(data_Read_Mask[11]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(writing_reg_n_0),
        .O(I190_in));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(Write_Addr[0]),
        .I1(Write_Addr[1]),
        .I2(Write_Addr[4]),
        .I3(Write_Addr[3]),
        .I4(Write_Addr[2]),
        .O(\Using_FPGA.Native_i_2__12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT5 #(
    .INIT(32'hFCECACEC)) 
    \Using_FPGA.Native_i_2__39 
       (.I0(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .I1(MSR[2]),
        .I2(ex_Valid),
        .I3(mtsmsr_write_i_reg_n_0),
        .I4(New_Value),
        .O(\Using_FPGA.Native_41 ));
  LUT6 #(
    .INIT(64'hFFFEFFAEAAFEAAAE)) 
    \Using_FPGA.Native_i_2__40 
       (.I0(\Using_FPGA.Native_i_3__13_n_0 ),
        .I1(MSR[1]),
        .I2(\Using_FPGA.Native_i_4__8_n_0 ),
        .I3(\Using_FPGA.Native_i_5__7_n_0 ),
        .I4(\Using_FPGA.Native_54 ),
        .I5(LWX_SWX_Carry),
        .O(\Using_FPGA.Native_42 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'hFCECACEC)) 
    \Using_FPGA.Native_i_2__41 
       (.I0(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I1(MSR[0]),
        .I2(ex_Valid),
        .I3(mtsmsr_write_i_reg_n_0),
        .I4(Op1_Low[0]),
        .O(\Using_FPGA.Native_43 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_3__13 
       (.I0(write_Carry_I_reg_n_0),
        .I1(ex_Valid),
        .O(\Using_FPGA.Native_i_3__13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_3__5 
       (.I0(Write_Addr[2]),
        .I1(Write_Addr[3]),
        .I2(Write_Addr[4]),
        .I3(Write_Addr[1]),
        .I4(Write_Addr[0]),
        .O(\Using_FPGA.Native_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_4__8 
       (.I0(mtsmsr_write_i_reg_n_0),
        .I1(ex_Valid),
        .O(\Using_FPGA.Native_i_4__8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    \Using_FPGA.Native_i_5__7 
       (.I0(is_swx_I_reg_n_0),
        .I1(is_lwx_I),
        .I2(load_Store_i),
        .I3(ex_Valid),
        .O(\Using_FPGA.Native_i_5__7_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_10 \Using_FPGA.New_Carry_MUXCY 
       (.ALU_Carry(ALU_Carry),
        .New_Carry(New_Carry),
        .Op1_Low(Op1_Low[1]),
        .lopt(lopt),
        .select_ALU_Carry_reg(select_ALU_Carry_reg_n_0));
  controller_MB_LUT4__parameterized5 \Using_FPGA.OpSel1_SPR_Select_LUT_1 
       (.D({PreFetch_Buffer_I_n_1,PreFetch_Buffer_I_n_5}),
        .I2(I2),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (PreFetch_Buffer_I_n_8),
        .\Using_FPGA.Native_0 (\Using_FPGA.OpSel1_SPR_Select_LUT_1_n_0 ));
  controller_MB_LUT4__parameterized7 \Using_FPGA.OpSel1_SPR_Select_LUT_2 
       (.D({PreFetch_Buffer_I_n_1,PreFetch_Buffer_I_n_5}),
        .I2(I2),
        .I210_in(I210_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.OpSel1_SPR_Select_LUT_2_n_0 ));
  controller_MB_LUT3 \Using_FPGA.OpSel1_SPR_Select_LUT_3 
       (.D(p_1_in),
        .Imm_Value(Imm_Value[1]),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (PreFetch_Buffer_I_n_8),
        .\Using_FPGA.Native_0 (\Using_FPGA.OpSel1_SPR_Select_LUT_3_n_0 ));
  controller_MB_LUT3__parameterized1 \Using_FPGA.OpSel1_SPR_Select_LUT_4 
       (.\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Using_FPGA.OpSel1_SPR_Select_LUT_1_n_0 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (\Using_FPGA.OpSel1_SPR_Select_LUT_2_n_0 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Using_FPGA.OpSel1_SPR_Select_LUT_3_n_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.OpSel1_SPR_Select_LUT_4_n_0 ));
  controller_MB_FDSE \Using_FPGA.Reg_Test_Equal_FDSE 
       (.Clk(Clk),
        .R_0(R_0),
        .Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .mul_Executing_reg(normal_piperun));
  controller_microblaze_v9_5_MB_FDRE_11 \Using_FPGA.Reg_Test_Equal_N_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .Reg_Test_Equal_N(Reg_Test_Equal_N),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .mul_Executing_reg(normal_piperun));
  controller_MB_LUT4__parameterized9 \Using_FPGA.Res_Forward1_LUT1 
       (.Q(Write_Addr[1]),
        .Reg1_Addr({Reg1_Addr[0],Reg1_Addr[1]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward1_LUT1_n_0 ),
        .\write_Addr_I_reg[0] (Write_Addr[0]));
  controller_MB_LUT4__parameterized11 \Using_FPGA.Res_Forward1_LUT2 
       (.Q({Write_Addr[2],Write_Addr[3]}),
        .Reg1_Addr({Reg1_Addr[2],Reg1_Addr[3]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward1_LUT2_n_0 ));
  controller_MB_LUT3__parameterized3 \Using_FPGA.Res_Forward1_LUT3 
       (.Q(Write_Addr[4]),
        .Reg1_Addr(Reg1_Addr[4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward1_LUT3_n_0 ),
        .ex_Valid(ex_Valid));
  controller_MB_LUT4__parameterized13 \Using_FPGA.Res_Forward1_LUT4 
       (.I3(I3),
        .Res_Forward1(Res_Forward1),
        .\write_Addr_I_reg[0] (\Using_FPGA.Res_Forward1_LUT1_n_0 ),
        .\write_Addr_I_reg[2] (\Using_FPGA.Res_Forward1_LUT2_n_0 ),
        .\write_Addr_I_reg[4] (\Using_FPGA.Res_Forward1_LUT3_n_0 ));
  controller_MB_LUT4__parameterized15 \Using_FPGA.Res_Forward2_LUT1 
       (.Imm_Value({Imm_Value[0],Imm_Value[1]}),
        .Q(Write_Addr[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward2_LUT1_n_0 ),
        .\write_Addr_I_reg[0] (Write_Addr[0]));
  controller_MB_LUT4__parameterized17 \Using_FPGA.Res_Forward2_LUT2 
       (.Imm_Value({Imm_Value[2],Imm_Value[3]}),
        .Q({Write_Addr[2],Write_Addr[3]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward2_LUT2_n_0 ));
  controller_MB_LUT3__parameterized5 \Using_FPGA.Res_Forward2_LUT3 
       (.Imm_Value(Imm_Value[4]),
        .Q(Write_Addr[4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Res_Forward2_LUT3_n_0 ),
        .ex_Valid(ex_Valid));
  controller_MB_LUT4__parameterized19 \Using_FPGA.Res_Forward2_LUT4 
       (.I3(I3),
        .Res_Forward2(Res_Forward2),
        .\write_Addr_I_reg[0] (\Using_FPGA.Res_Forward2_LUT1_n_0 ),
        .\write_Addr_I_reg[2] (\Using_FPGA.Res_Forward2_LUT2_n_0 ),
        .\write_Addr_I_reg[4] (\Using_FPGA.Res_Forward2_LUT3_n_0 ));
  controller_microblaze_v9_5_MB_FDRE_12 \Using_FPGA.Use_Reg_Neg_DI_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .break_Pipe_i_reg(\Using_FPGA.Use_Reg_Neg_DI_FDRE_n_0 ),
        .mul_Executing_reg(normal_piperun),
        .use_Reg_Neg_DI_i28_out(use_Reg_Neg_DI_i28_out));
  controller_microblaze_v9_5_MB_FDRE_13 \Using_FPGA.Use_Reg_Neg_S_FDRE 
       (.Clk(Clk),
        .R_0(R_0),
        .break_Pipe_i_reg(\Using_FPGA.Use_Reg_Neg_S_FDRE_n_0 ),
        .mul_Executing_reg(normal_piperun),
        .use_Reg_Neg_S_i30_out(use_Reg_Neg_S_i30_out));
  controller_microblaze_v9_5_MB_MUXCY_14 \Using_FPGA.Using_Breakable_Pipe.OpSel1_SPR_MUXCY_1 
       (.OpSel1_SPR(OpSel1_SPR),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Using_FPGA.OpSel1_SPR_Select_LUT_4_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (Select_Logic_reg_0),
        .lopt(lopt_12),
        .lopt_1(\No_ECC.lmb_as_reg_1 ),
        .lopt_10(lopt_17),
        .lopt_11(lopt_18),
        .lopt_2(DI),
        .lopt_3(\Using_FPGA.of_PipeRun_Select_LUT4_n_0 ),
        .lopt_4(lopt_13),
        .lopt_5(S0_out),
        .lopt_6(lopt_14),
        .lopt_7(lopt_15),
        .lopt_8(\Using_FPGA.Native_i_1__65_n_0 ),
        .lopt_9(lopt_16));
  controller_microblaze_v9_5_MB_MUXCY_15 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1 
       (.S0_out(S0_out),
        .Select_Logic_reg(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_n_0 ),
        .lopt(lopt_13),
        .mul_Executing_reg(normal_piperun));
  controller_microblaze_v9_5_MB_MUXCY_16 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2 
       (.Select_Logic_reg(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Native_i_1__65_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_n_0 ),
        .lopt(lopt_14),
        .lopt_1(lopt_15));
  controller_microblaze_v9_5_MB_MUXCY_17 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3 
       (.Select_Logic_reg(Select_Logic_reg_0),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_n_0 ),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18));
  controller_microblaze_v9_5_MB_MUXCY_18 \Using_FPGA.clean_iReady_MuxCY 
       (.LMB_Ready(LMB_Ready),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .mbar_is_sleep_reg(mbar_is_sleep_reg_0),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg_n_0));
  FDRE \Using_FPGA.enable_Interrupts_I_reg 
       (.C(Clk),
        .CE(normal_piperun),
        .D(enable_Interrupts_I),
        .Q(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .R(out));
  controller_MB_LUT3__parameterized9 \Using_FPGA.force_di1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Use_Reg_Neg_DI_FDRE_n_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Force_Val1_FDRE_n_0 ),
        .break_Pipe_i_reg(\Using_FPGA.force_di1_LUT3_n_0 ));
  controller_MB_LUT4__parameterized25 \Using_FPGA.force_di2_LUT4 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Force_Val2_FDRSE_n_0 ),
        .break_Pipe_i_reg(\Using_FPGA.force_di2_LUT4_n_0 ),
        .ex_Valid(ex_Valid));
  controller_MB_LUT3__parameterized7 \Using_FPGA.force_jump1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Use_Reg_Neg_S_FDRE_n_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Force1_FDRE_n_0 ),
        .break_Pipe_i_reg(\Using_FPGA.force_jump1_LUT3_n_0 ));
  controller_MB_LUT4__parameterized23 \Using_FPGA.force_jump2_LUT4 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Force2_FDRE_n_0 ),
        .break_Pipe_i_reg(\Using_FPGA.force_jump2_LUT4_n_0 ),
        .ex_Valid(ex_Valid));
  controller_microblaze_v9_5_MB_MUXCY_19 \Using_FPGA.iFetch_MuxCY_1 
       (.CI(CI),
        .S(S),
        .\Using_FPGA.Native_0 (break_Pipe_i_reg_0),
        .lopt(lopt_9));
  controller_microblaze_v9_5_MB_MUXCY_20 \Using_FPGA.iFetch_MuxCY_2 
       (.CI(CI),
        .CI97_in(CI97_in),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  controller_microblaze_v9_5_MB_MUXCY_21 \Using_FPGA.of_PipeRun_MuxCY_1 
       (.DI(DI),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg_1 ),
        .\Using_FPGA.Native_0 (normal_piperun),
        .lopt(lopt_12),
        .mul_Executing_reg(\Using_FPGA.of_PipeRun_Select_LUT4_n_0 ));
  controller_MB_LUT4__parameterized1 \Using_FPGA.of_PipeRun_Select_LUT4 
       (.I179_in(I179_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.of_PipeRun_Select_LUT4_n_0 ),
        .load_Store_i(load_Store_i),
        .mul_Executing(mul_Executing));
  controller_MB_LUT4__parameterized3 \Using_FPGA.of_PipeRun_without_dready_LUT4 
       (.DI(DI),
        .I179_in(I179_in),
        .load_Store_i(load_Store_i),
        .mul_Executing(mul_Executing));
  FDRE \Using_FPGA.reset_BIP_I_reg 
       (.C(Clk),
        .CE(normal_piperun),
        .D(reset_BIP_I8_out),
        .Q(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .R(out));
  FDRE \Using_FPGA.set_BIP_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_106),
        .Q(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .R(1'b0));
  FDRE \Using_FPGA.take_Intr_2nd_Phase_reg 
       (.C(Clk),
        .CE(normal_piperun),
        .D(inHibit_EX1),
        .Q(\Using_FPGA.Native ),
        .R(out));
  LUT6 #(
    .INIT(64'h0A000A0000000E00)) 
    \Using_LWX_SWX_instr.reservation_i_1 
       (.I0(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I1(is_lwx_I),
        .I2(Set_BIP),
        .I3(\Synchronize.use_sync_reset.sync_reg[2]_1 ),
        .I4(is_swx_I_reg_n_0),
        .I5(PreFetch_Buffer_I_n_53),
        .O(\Using_LWX_SWX_instr.reservation_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_LWX_SWX_instr.reservation_i_2 
       (.I0(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .I1(ex_Valid),
        .O(Set_BIP));
  FDRE \Using_LWX_SWX_instr.reservation_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_LWX_SWX_instr.reservation_i_1_n_0 ),
        .Q(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h5504)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1 
       (.I0(out),
        .I1(MSR[0]),
        .I2(old_IE_value),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h04550404)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1 
       (.I0(out),
        .I1(MSR[0]),
        .I2(old_IE_value),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I4(take_intr_2nd_cycle_reg_n_0),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[0] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[1] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \Using_dynamic_instr_Address.old_IE_value_reg 
       (.C(Clk),
        .CE(normal_piperun),
        .D(MSR[0]),
        .Q(old_IE_value),
        .R(out));
  FDRE active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h8)) 
    break_Pipe_i_i_2
       (.I0(ex_Valid),
        .I1(mtsmsr_write_i_reg_n_0),
        .O(p_76_in));
  FDRE break_Pipe_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(break_Pipe_i_reg0),
        .Q(break_Pipe_i_reg__0),
        .R(out));
  FDRE byte_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_128),
        .Q(Byte),
        .R(1'b0));
  FDRE d_AS_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(d_AS_I17_out),
        .Q(d_AS_I),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFEFFFE0)) 
    doublet_Read_i_i_1
       (.I0(p_1_in),
        .I1(PreFetch_Buffer_I_n_8),
        .I2(normal_piperun),
        .I3(byte_i14_out),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .O(doublet_Read_i_i_1_n_0));
  FDRE doublet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(doublet_Read_i_i_1_n_0),
        .Q(\Data_Flow_I/Result_Mux_I/p_0_in3_out ),
        .R(out));
  FDRE doublet_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_127),
        .Q(Doublet),
        .R(1'b0));
  FDRE ex_Valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_50),
        .Q(ex_Valid),
        .R(out));
  FDRE ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(normal_piperun),
        .Q(ex_first_cycle),
        .R(out));
  LUT5 #(
    .INIT(32'h22323232)) 
    iFetch_In_Progress_i_1
       (.I0(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I1(out),
        .I2(iFetch_In_Progress_reg_n_0),
        .I3(lmb_as),
        .I4(Sl_Rdy),
        .O(iFetch_In_Progress_i_1_n_0));
  FDRE iFetch_In_Progress_reg
       (.C(Clk),
        .CE(1'b1),
        .D(iFetch_In_Progress_i_1_n_0),
        .Q(iFetch_In_Progress_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAA2AAA2A0000AA2A)) 
    inHibit_EX_i_1
       (.I0(inHibit_EX_i_2_n_0),
        .I1(Sl_Rdy),
        .I2(lmb_as),
        .I3(nonvalid_IFetch_n_reg_n_0),
        .I4(Select_Logic_reg_0),
        .I5(\Using_FPGA.Native ),
        .O(inHibit_EX_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFF01FFFFFF0500)) 
    inHibit_EX_i_2
       (.I0(PreFetch_Buffer_I_n_48),
        .I1(break_Pipe_i_reg_0),
        .I2(PreFetch_Buffer_I_n_87),
        .I3(normal_piperun),
        .I4(\Using_FPGA.Native ),
        .I5(inHibit_EX),
        .O(inHibit_EX_i_2_n_0));
  FDRE inHibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(inHibit_EX_i_1_n_0),
        .Q(inHibit_EX),
        .R(1'b0));
  FDRE is_lwx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_125),
        .Q(is_lwx_I),
        .R(1'b0));
  FDRE is_swx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_119),
        .Q(is_swx_I_reg_n_0),
        .R(1'b0));
  FDRE jump2_I_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(PreFetch_Buffer_I_n_52),
        .Q(jump2_I_reg_n_0),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    lmb_reg_read_i_1
       (.I0(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I1(\Using_FPGA.Native_50 [0]),
        .I2(\Using_FPGA.Native_50 [1]),
        .I3(ex_Valid),
        .I4(load_Store_i),
        .I5(writing_reg_n_0),
        .O(lmb_reg_read0));
  LUT6 #(
    .INIT(64'h0000000000200000)) 
    lmb_reg_write_i_1
       (.I0(d_AS_I),
        .I1(\Using_FPGA.Native_50 [0]),
        .I2(\Using_FPGA.Native_50 [1]),
        .I3(lmb_reg_write_i_2_n_0),
        .I4(writing_reg_n_0),
        .I5(LWX_SWX_Carry),
        .O(lmb_reg_write0));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'h7)) 
    lmb_reg_write_i_2
       (.I0(ex_Valid),
        .I1(load_Store_i),
        .O(lmb_reg_write_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h2)) 
    lmb_reg_write_i_3
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .O(LWX_SWX_Carry));
  FDRE load_Store_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_123),
        .Q(load_Store_i),
        .R(1'b0));
  FDRE mbar_decode_I_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(of_mbar_decode),
        .Q(mbar_decode_I),
        .R(out));
  LUT5 #(
    .INIT(32'hEEFE0000)) 
    mbar_first_i_3
       (.I0(mbar_sleep),
        .I1(ex_first_cycle),
        .I2(iFetch_In_Progress_reg_n_0),
        .I3(Write_Addr[4]),
        .I4(mbar_first_reg_n_0),
        .O(mbar_first_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_first_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing0),
        .Q(mbar_first_reg_n_0),
        .R(out));
  FDRE mbar_hold_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_110),
        .Q(mbar_hold_I_reg_n_0),
        .R(1'b0));
  FDRE mbar_is_sleep_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(p_1_in48_in),
        .Q(mbar_is_sleep),
        .R(out));
  LUT4 #(
    .INIT(16'h000E)) 
    mbar_sleep_i_1
       (.I0(mbar_sleep),
        .I1(mbar_sleep0),
        .I2(active_wakeup),
        .I3(out),
        .O(mbar_sleep_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    mbar_sleep_i_2
       (.I0(mbar_is_sleep),
        .I1(ex_first_cycle),
        .I2(mbar_decode_I),
        .I3(ex_Valid),
        .O(mbar_sleep0));
  FDRE mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_sleep_i_1_n_0),
        .Q(mbar_sleep),
        .R(1'b0));
  FDRE missed_IFetch_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_111),
        .Q(missed_IFetch),
        .R(out));
  FDRE mtsmsr_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_107),
        .Q(mtsmsr_write_i_reg_n_0),
        .R(1'b0));
  FDRE mul_Executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing0),
        .Q(mul_Executing),
        .R(out));
  FDSE nonvalid_IFetch_n_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_105),
        .Q(nonvalid_IFetch_n_reg_n_0),
        .S(out));
  LUT5 #(
    .INIT(32'hFF4FFF40)) 
    quadlet_Read_i_i_1
       (.I0(p_1_in),
        .I1(PreFetch_Buffer_I_n_8),
        .I2(normal_piperun),
        .I3(byte_i14_out),
        .I4(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .O(quadlet_Read_i_i_1_n_0));
  FDRE quadlet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(quadlet_Read_i_i_1_n_0),
        .Q(\Data_Flow_I/Result_Mux_I/p_0_in2_out ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    reset_delay_reg
       (.C(Clk),
        .CE(1'b1),
        .D(out),
        .Q(reset_delay),
        .R(1'b0));
  FDRE select_ALU_Carry_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_113),
        .Q(select_ALU_Carry_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000FBAA)) 
    sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(iFetch_In_Progress_reg_n_0),
        .I2(Write_Addr[4]),
        .I3(mbar_sleep),
        .I4(active_wakeup),
        .I5(out),
        .O(sleep_i_i_1_n_0));
  FDRE sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_i_i_1_n_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  FDRE swx_ready_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_124),
        .Q(swx_ready),
        .R(1'b0));
  FDRE take_intr_2nd_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_108),
        .Q(take_intr_2nd_cycle_reg_n_0),
        .R(1'b0));
  FDRE using_Imm_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_109),
        .Q(Use_Imm_Reg),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000030AA)) 
    \write_Addr_I[0]_i_1 
       (.I0(Write_Addr[0]),
        .I1(Select_Logic_reg_0),
        .I2(p_1_in48_in),
        .I3(normal_piperun),
        .I4(out),
        .O(\write_Addr_I[0]_i_1_n_0 ));
  FDRE \write_Addr_I_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I[0]_i_1_n_0 ),
        .Q(Write_Addr[0]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[1] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(PreFetch_Buffer_I_n_99),
        .Q(Write_Addr[1]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[2] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(PreFetch_Buffer_I_n_100),
        .Q(Write_Addr[2]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[3] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(PreFetch_Buffer_I_n_101),
        .Q(Write_Addr[3]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[4] 
       (.C(Clk),
        .CE(PreFetch_Buffer_I_n_36),
        .D(PreFetch_Buffer_I_n_102),
        .Q(Write_Addr[4]),
        .R(1'b0));
  FDRE write_Carry_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_120),
        .Q(write_Carry_I_reg_n_0),
        .R(1'b0));
  controller_MB_LUT4 write_Reg_I_LUT
       (.I190_in(I190_in),
        .I214_out(I214_out),
        .I3(I3),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg_1 ),
        .\write_Addr_I_reg[2] (\Using_FPGA.Native_i_3__5_n_0 ));
  FDRE write_Reg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_115),
        .Q(I214_out),
        .R(1'b0));
  FDRE writing_reg
       (.C(Clk),
        .CE(normal_piperun),
        .D(PreFetch_Buffer_I_n_126),
        .Q(writing_reg_n_0),
        .R(out));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module controller_Divide_part
   (Clk_En,
    Clk);
  output Clk_En;
  input Clk;

  wire Clk;
  wire Clk_En;

  controller_XIL_SRL16E_682 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En(Clk_En));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module controller_Divide_part__parameterized0
   (\not_First.Out1_reg_0 ,
    Clk_En,
    Clk);
  output \not_First.Out1_reg_0 ;
  input Clk_En;
  input Clk;

  wire Clk;
  wire Clk_En;
  wire D;
  wire Out1;
  wire \not_First.Out1_reg_0 ;

  controller_XIL_SRL16E_681 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En(Clk_En),
        .D(D));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(Out1),
        .D(Clk_En),
        .Q(\not_First.Out1_reg_0 ),
        .R(1'b0));
  FDRE \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(Out1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module controller_Divide_part__parameterized1
   (FDRE_I,
    \not_First.Clk_En_Out_i_reg_0 ,
    Clk);
  output FDRE_I;
  input \not_First.Clk_En_Out_i_reg_0 ;
  input Clk;

  wire Clk;
  wire D;
  wire FDRE_I;
  wire Q;
  wire \not_First.Clk_En_Out_i_i_1_n_0 ;
  wire \not_First.Clk_En_Out_i_reg_0 ;
  wire \not_First.Out1_reg_n_0 ;

  controller_XIL_SRL16E__parameterized7 \Two_SRL16.SRL16E_2 
       (.Clk(Clk),
        .D(D),
        .Q(Q),
        .\not_First.Clk_En_Out_i_reg (\not_First.Clk_En_Out_i_reg_0 ));
  controller_XIL_SRLC16E \Two_SRL16.SRLC16E_1 
       (.Clk(Clk),
        .D(D),
        .Q(Q),
        .\not_First.Clk_En_Out_i_reg (\not_First.Clk_En_Out_i_reg_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \not_First.Clk_En_Out_i_i_1 
       (.I0(\not_First.Clk_En_Out_i_reg_0 ),
        .I1(\not_First.Out1_reg_n_0 ),
        .I2(FDRE_I),
        .O(\not_First.Clk_En_Out_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\not_First.Clk_En_Out_i_i_1_n_0 ),
        .Q(FDRE_I),
        .R(1'b0));
  FDRE \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Q),
        .Q(\not_First.Out1_reg_n_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "FIT_Module" *) 
module controller_FIT_Module
   (FDRE_I,
    Clk);
  output FDRE_I;
  input Clk;

  wire Clk;
  wire Clk_En;
  wire FDRE_I;
  wire \Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I_n_0 ;

  controller_Divide_part \Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I 
       (.Clk(Clk),
        .Clk_En(Clk_En));
  controller_Divide_part__parameterized0 \Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I 
       (.Clk(Clk),
        .Clk_En(Clk_En),
        .\not_First.Out1_reg_0 (\Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I_n_0 ));
  controller_Divide_part__parameterized1 \Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I 
       (.Clk(Clk),
        .FDRE_I(FDRE_I),
        .\not_First.Clk_En_Out_i_reg_0 (\Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I_n_0 ));
endmodule

(* ORIG_REF_NAME = "GPI_Module" *) 
module controller_GPI_Module
   (Extend_Data_Read,
    Data_Read,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \cipr_rd_dff_all[23].fdr_i ,
    DATA_OUTB,
    \No_ECC.lmb_as_reg ,
    sel_LSB,
    \cipr_rd_dff_all[22].fdr_i ,
    \cipr_rd_dff_all[21].fdr_i ,
    \cipr_rd_dff_all[20].fdr_i ,
    \cipr_rd_dff_all[19].fdr_i ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    INTC_CIPR,
    lmb_reg_write_reg,
    lmb_reg_read_Q_reg,
    \lmb_abus_Q_reg[1] ,
    lmb_reg_read_reg,
    \UART_Status_reg[6] ,
    \RX_Data_reg[7] ,
    lmb_reg_read_Q_reg_0,
    GPI1,
    Clk);
  output [13:0]Extend_Data_Read;
  output Data_Read;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [17:0]Q;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  input \cipr_rd_dff_all[23].fdr_i ;
  input [28:0]DATA_OUTB;
  input \No_ECC.lmb_as_reg ;
  input [1:0]sel_LSB;
  input \cipr_rd_dff_all[22].fdr_i ;
  input \cipr_rd_dff_all[21].fdr_i ;
  input \cipr_rd_dff_all[20].fdr_i ;
  input \cipr_rd_dff_all[19].fdr_i ;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [28:0]INTC_CIPR;
  input lmb_reg_write_reg;
  input lmb_reg_read_Q_reg;
  input [4:0]\lmb_abus_Q_reg[1] ;
  input lmb_reg_read_reg;
  input [2:0]\UART_Status_reg[6] ;
  input [4:0]\RX_Data_reg[7] ;
  input lmb_reg_read_Q_reg_0;
  input [31:0]GPI1;
  input Clk;

  wire Clk;
  wire [28:0]DATA_OUTB;
  wire Data_Read;
  wire [13:0]Extend_Data_Read;
  wire [31:0]GPI1;
  wire [28:0]INTC_CIPR;
  wire \No_ECC.lmb_as_reg ;
  wire [17:0]Q;
  wire [4:0]\RX_Data_reg[7] ;
  wire [2:0]\UART_Status_reg[6] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_i_3__10_n_0 ;
  wire \Using_FPGA.Native_i_3__11_n_0 ;
  wire \Using_FPGA.Native_i_3__12_n_0 ;
  wire \Using_FPGA.Native_i_3__8_n_0 ;
  wire \Using_FPGA.Native_i_3__9_n_0 ;
  wire \Using_FPGA.Native_i_3_n_0 ;
  wire \Using_FPGA.Native_i_4__1_n_0 ;
  wire \Using_FPGA.Native_i_4__2_n_0 ;
  wire \Using_FPGA.Native_i_4__3_n_0 ;
  wire \Using_FPGA.Native_i_4__4_n_0 ;
  wire \Using_FPGA.Native_i_4__5_n_0 ;
  wire \Using_FPGA.Native_i_5__0_n_0 ;
  wire \Using_FPGA.Native_i_5__1_n_0 ;
  wire \Using_FPGA.Native_i_5__2_n_0 ;
  wire \Using_FPGA.Native_i_5__3_n_0 ;
  wire \Using_FPGA.Native_i_5__4_n_0 ;
  wire \Using_FPGA.Native_i_5__5_n_0 ;
  wire \Using_FPGA.Native_i_5__6_n_0 ;
  wire \Using_FPGA.Native_i_6__0_n_0 ;
  wire \Using_FPGA.Native_i_6__1_n_0 ;
  wire \Using_FPGA.Native_i_6__2_n_0 ;
  wire \Using_FPGA.Native_i_6__3_n_0 ;
  wire \Using_FPGA.Native_i_6__4_n_0 ;
  wire \Using_FPGA.Native_i_6__5_n_0 ;
  wire \Using_FPGA.Native_i_6_n_0 ;
  wire \Using_FPGA.Native_i_7_n_0 ;
  wire \Using_FPGA.Native_i_8_n_0 ;
  wire \Using_GPI.GPI_In[31]_i_1_n_0 ;
  wire \cipr_rd_dff_all[19].fdr_i ;
  wire \cipr_rd_dff_all[20].fdr_i ;
  wire \cipr_rd_dff_all[21].fdr_i ;
  wire \cipr_rd_dff_all[22].fdr_i ;
  wire \cipr_rd_dff_all[23].fdr_i ;
  wire [4:0]\lmb_abus_Q_reg[1] ;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_read_Q_reg_0;
  wire lmb_reg_read_reg;
  wire lmb_reg_write_reg;
  wire [16:3]p_2_in;
  wire [1:0]sel_LSB;

  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(\cipr_rd_dff_all[23].fdr_i ),
        .I1(DATA_OUTB[4]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__12_n_0 ),
        .I4(\Using_FPGA.Native_i_4__5_n_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[5]));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(\cipr_rd_dff_all[22].fdr_i ),
        .I1(DATA_OUTB[3]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__11_n_0 ),
        .I4(\Using_FPGA.Native_i_4__4_n_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[4]));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(\cipr_rd_dff_all[21].fdr_i ),
        .I1(DATA_OUTB[2]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__10_n_0 ),
        .I4(\Using_FPGA.Native_i_4__3_n_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[3]));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(\cipr_rd_dff_all[20].fdr_i ),
        .I1(DATA_OUTB[1]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__9_n_0 ),
        .I4(\Using_FPGA.Native_i_4__2_n_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[2]));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(\cipr_rd_dff_all[19].fdr_i ),
        .I1(DATA_OUTB[0]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__8_n_0 ),
        .I4(\Using_FPGA.Native_i_4__1_n_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[1]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hE0E000FF)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(Data_Read),
        .I1(sel_LSB[1]),
        .I2(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I3(\Using_FPGA.Native_i_3_n_0 ),
        .I4(sel_LSB[0]),
        .O(Extend_Data_Read[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(\Using_FPGA.Native_i_3_n_0 ),
        .O(Extend_Data_Read[6]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(\Using_FPGA.Native ),
        .O(Extend_Data_Read[7]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(\Using_FPGA.Native_0 ),
        .O(Extend_Data_Read[8]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(\Using_FPGA.Native_i_4__1_n_0 ),
        .O(Extend_Data_Read[9]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(\Using_FPGA.Native_i_4__2_n_0 ),
        .O(Extend_Data_Read[10]));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__44 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[20]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[9]),
        .I5(INTC_CIPR[20]),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__46 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[19]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[8]),
        .I5(INTC_CIPR[19]),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__48 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[18]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[7]),
        .I5(INTC_CIPR[18]),
        .O(\Using_FPGA.Native_3 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(\Using_FPGA.Native_i_4__3_n_0 ),
        .O(Extend_Data_Read[11]));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__50 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[17]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[6]),
        .I5(INTC_CIPR[17]),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__52 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[16]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[5]),
        .I5(INTC_CIPR[16]),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__54 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[15]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[4]),
        .I5(INTC_CIPR[15]),
        .O(\Using_FPGA.Native_6 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__56 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[14]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(Q[3]),
        .I5(INTC_CIPR[14]),
        .O(\Using_FPGA.Native_7 ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF88888)) 
    \Using_FPGA.Native_i_2__57 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(DATA_OUTB[13]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .I4(p_2_in[16]),
        .I5(INTC_CIPR[13]),
        .O(Data_Read));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(\Using_FPGA.Native_i_4__4_n_0 ),
        .O(Extend_Data_Read[12]));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(\Using_FPGA.Native_i_4__5_n_0 ),
        .O(Extend_Data_Read[13]));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_3 
       (.I0(\Using_FPGA.Native_i_5__0_n_0 ),
        .I1(DATA_OUTB[5]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[21]),
        .I5(\Using_FPGA.Native_i_6_n_0 ),
        .O(\Using_FPGA.Native_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \Using_FPGA.Native_i_3__10 
       (.I0(p_2_in[5]),
        .I1(\UART_Status_reg[6] [1]),
        .I2(\RX_Data_reg[7] [2]),
        .I3(INTC_CIPR[2]),
        .I4(lmb_reg_read_Q_reg_0),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \Using_FPGA.Native_i_3__11 
       (.I0(p_2_in[6]),
        .I1(\UART_Status_reg[6] [2]),
        .I2(\RX_Data_reg[7] [3]),
        .I3(INTC_CIPR[3]),
        .I4(lmb_reg_read_Q_reg_0),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__11_n_0 ));
  LUT6 #(
    .INIT(64'hFEFEFE00FFFFFFFF)) 
    \Using_FPGA.Native_i_3__12 
       (.I0(p_2_in[7]),
        .I1(\RX_Data_reg[7] [4]),
        .I2(INTC_CIPR[4]),
        .I3(lmb_reg_read_Q_reg),
        .I4(lmb_reg_write_reg),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__12_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \Using_FPGA.Native_i_3__8 
       (.I0(p_2_in[3]),
        .I1(\UART_Status_reg[6] [0]),
        .I2(\RX_Data_reg[7] [0]),
        .I3(INTC_CIPR[0]),
        .I4(lmb_reg_read_Q_reg_0),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__8_n_0 ));
  LUT6 #(
    .INIT(64'hFEFEFE00FFFFFFFF)) 
    \Using_FPGA.Native_i_3__9 
       (.I0(p_2_in[4]),
        .I1(\RX_Data_reg[7] [1]),
        .I2(INTC_CIPR[1]),
        .I3(lmb_reg_read_Q_reg),
        .I4(lmb_reg_write_reg),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__9_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__0 
       (.I0(\Using_FPGA.Native_i_5__1_n_0 ),
        .I1(DATA_OUTB[7]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[23]),
        .I5(\Using_FPGA.Native_i_6__0_n_0 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__1 
       (.I0(\Using_FPGA.Native_i_5__2_n_0 ),
        .I1(DATA_OUTB[8]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[24]),
        .I5(\Using_FPGA.Native_i_6__1_n_0 ),
        .O(\Using_FPGA.Native_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__2 
       (.I0(\Using_FPGA.Native_i_5__3_n_0 ),
        .I1(DATA_OUTB[9]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[25]),
        .I5(\Using_FPGA.Native_i_6__2_n_0 ),
        .O(\Using_FPGA.Native_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__3 
       (.I0(\Using_FPGA.Native_i_5__4_n_0 ),
        .I1(DATA_OUTB[10]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[26]),
        .I5(\Using_FPGA.Native_i_6__3_n_0 ),
        .O(\Using_FPGA.Native_i_4__3_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__4 
       (.I0(\Using_FPGA.Native_i_5__5_n_0 ),
        .I1(DATA_OUTB[11]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[27]),
        .I5(\Using_FPGA.Native_i_6__4_n_0 ),
        .O(\Using_FPGA.Native_i_4__4_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_4__5 
       (.I0(\Using_FPGA.Native_i_5__6_n_0 ),
        .I1(DATA_OUTB[12]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[28]),
        .I5(\Using_FPGA.Native_i_6__5_n_0 ),
        .O(\Using_FPGA.Native_i_4__5_n_0 ));
  LUT6 #(
    .INIT(64'h20A020A020AF2FAF)) 
    \Using_FPGA.Native_i_5 
       (.I0(\Using_FPGA.Native_i_7_n_0 ),
        .I1(DATA_OUTB[6]),
        .I2(sel_LSB[1]),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(DATA_OUTB[22]),
        .I5(\Using_FPGA.Native_i_8_n_0 ),
        .O(\Using_FPGA.Native ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__0 
       (.I0(p_2_in[8]),
        .I1(INTC_CIPR[5]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__1 
       (.I0(p_2_in[10]),
        .I1(INTC_CIPR[7]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__1_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__2 
       (.I0(p_2_in[11]),
        .I1(INTC_CIPR[8]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__2_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__3 
       (.I0(p_2_in[12]),
        .I1(INTC_CIPR[9]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__3_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__4 
       (.I0(p_2_in[13]),
        .I1(INTC_CIPR[10]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__4_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__5 
       (.I0(p_2_in[14]),
        .I1(INTC_CIPR[11]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__5_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_5__6 
       (.I0(p_2_in[15]),
        .I1(INTC_CIPR[12]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_5__6_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[10]),
        .I3(INTC_CIPR[21]),
        .O(\Using_FPGA.Native_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__0 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[12]),
        .I3(INTC_CIPR[23]),
        .O(\Using_FPGA.Native_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__1 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[13]),
        .I3(INTC_CIPR[24]),
        .O(\Using_FPGA.Native_i_6__1_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__2 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[14]),
        .I3(INTC_CIPR[25]),
        .O(\Using_FPGA.Native_i_6__2_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__3 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[15]),
        .I3(INTC_CIPR[26]),
        .O(\Using_FPGA.Native_i_6__3_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__4 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[16]),
        .I3(INTC_CIPR[27]),
        .O(\Using_FPGA.Native_i_6__4_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_6__5 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[17]),
        .I3(INTC_CIPR[28]),
        .O(\Using_FPGA.Native_i_6__5_n_0 ));
  LUT4 #(
    .INIT(16'h111F)) 
    \Using_FPGA.Native_i_7 
       (.I0(p_2_in[9]),
        .I1(INTC_CIPR[6]),
        .I2(lmb_reg_write_reg),
        .I3(lmb_reg_read_Q_reg),
        .O(\Using_FPGA.Native_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \Using_FPGA.Native_i_8 
       (.I0(lmb_reg_write_reg),
        .I1(lmb_reg_read_Q_reg),
        .I2(Q[11]),
        .I3(INTC_CIPR[22]),
        .O(\Using_FPGA.Native_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFDFFFFFFFF)) 
    \Using_GPI.GPI_In[31]_i_1 
       (.I0(\lmb_abus_Q_reg[1] [3]),
        .I1(\lmb_abus_Q_reg[1] [2]),
        .I2(\lmb_abus_Q_reg[1] [1]),
        .I3(\lmb_abus_Q_reg[1] [0]),
        .I4(\lmb_abus_Q_reg[1] [4]),
        .I5(lmb_reg_read_reg),
        .O(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[0]),
        .Q(Q[0]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[10]),
        .Q(p_2_in[10]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[11]),
        .Q(p_2_in[11]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[12]),
        .Q(p_2_in[12]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[13]),
        .Q(p_2_in[13]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[14]),
        .Q(p_2_in[14]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[15]),
        .Q(p_2_in[15]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[16]),
        .Q(p_2_in[16]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[17]),
        .Q(Q[3]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[18]),
        .Q(Q[4]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[19]),
        .Q(Q[5]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[1]),
        .Q(Q[1]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[20]),
        .Q(Q[6]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[21]),
        .Q(Q[7]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[22]),
        .Q(Q[8]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[23]),
        .Q(Q[9]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[24]),
        .Q(Q[10]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[25]),
        .Q(Q[11]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[26]),
        .Q(Q[12]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[27]),
        .Q(Q[13]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[28]),
        .Q(Q[14]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[29]),
        .Q(Q[15]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[2]),
        .Q(Q[2]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[30]),
        .Q(Q[16]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[31]),
        .Q(Q[17]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[3]),
        .Q(p_2_in[3]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[4]),
        .Q(p_2_in[4]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[5]),
        .Q(p_2_in[5]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[6]),
        .Q(p_2_in[6]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[7]),
        .Q(p_2_in[7]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[8]),
        .Q(p_2_in[8]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
  FDRE \Using_GPI.GPI_In_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(GPI1[9]),
        .Q(p_2_in[9]),
        .R(\Using_GPI.GPI_In[31]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "GPO_Module" *) 
module controller_GPO_Module
   (\Use_it.gpo_io_i_reg[0]_0 ,
    GPO1,
    Q,
    lmb_reg_write_reg,
    LMB_Rst_reg,
    out,
    Clk);
  output \Use_it.gpo_io_i_reg[0]_0 ;
  output [31:0]GPO1;
  input [5:0]Q;
  input lmb_reg_write_reg;
  input LMB_Rst_reg;
  input [31:0]out;
  input Clk;

  wire Clk;
  wire [31:0]GPO1;
  wire LMB_Rst_reg;
  wire [5:0]Q;
  wire \Use_it.gpo_io_i_reg[0]_0 ;
  wire gpo1_write;
  wire lmb_reg_write_reg;
  wire [31:0]out;

  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \Use_it.gpo_io_i[31]_i_1 
       (.I0(Q[4]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\Use_it.gpo_io_i_reg[0]_0 ),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(gpo1_write));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_it.gpo_io_i[31]_i_2 
       (.I0(Q[5]),
        .I1(lmb_reg_write_reg),
        .O(\Use_it.gpo_io_i_reg[0]_0 ));
  FDRE \Use_it.gpo_io_i_reg[0] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[0]),
        .Q(GPO1[0]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[10] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[10]),
        .Q(GPO1[10]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[11] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[11]),
        .Q(GPO1[11]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[12] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[12]),
        .Q(GPO1[12]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[13] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[13]),
        .Q(GPO1[13]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[14] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[14]),
        .Q(GPO1[14]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[15] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[15]),
        .Q(GPO1[15]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[16] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[16]),
        .Q(GPO1[16]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[17] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[17]),
        .Q(GPO1[17]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[18] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[18]),
        .Q(GPO1[18]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[19] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[19]),
        .Q(GPO1[19]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[1] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[1]),
        .Q(GPO1[1]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[20] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[20]),
        .Q(GPO1[20]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[21] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[21]),
        .Q(GPO1[21]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[22] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[22]),
        .Q(GPO1[22]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[23] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[23]),
        .Q(GPO1[23]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[24] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[24]),
        .Q(GPO1[24]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[25] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[25]),
        .Q(GPO1[25]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[26] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[26]),
        .Q(GPO1[26]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[27] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[27]),
        .Q(GPO1[27]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[28] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[28]),
        .Q(GPO1[28]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[29] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[29]),
        .Q(GPO1[29]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[2] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[2]),
        .Q(GPO1[2]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[30] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[30]),
        .Q(GPO1[30]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[31] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[31]),
        .Q(GPO1[31]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[3] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[3]),
        .Q(GPO1[3]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[4] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[4]),
        .Q(GPO1[4]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[5] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[5]),
        .Q(GPO1[5]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[6] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[6]),
        .Q(GPO1[6]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[7] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[7]),
        .Q(GPO1[7]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[8] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[8]),
        .Q(GPO1[8]),
        .R(LMB_Rst_reg));
  FDRE \Use_it.gpo_io_i_reg[9] 
       (.C(Clk),
        .CE(gpo1_write),
        .D(out[9]),
        .Q(GPO1[9]),
        .R(LMB_Rst_reg));
endmodule

(* ORIG_REF_NAME = "Iomodule_core" *) 
module controller_Iomodule_core
   (INTC_IRQ,
    UART_Tx,
    active_wakeup0,
    Extend_Data_Read,
    Data_Read,
    \fifo_DOut_reg[7] ,
    UART_Interrupt,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    GPO1,
    Clk,
    LMB_Rst_reg,
    UART_Rx,
    Sleep_Decode,
    DATA_OUTB,
    \No_ECC.lmb_as_reg ,
    sel_LSB,
    lmb_reg_write_reg,
    lmb_reg_read_Q_reg,
    Q,
    lmb_reg_read_reg,
    \Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ,
    lmb_reg_read_Q_reg_0,
    out,
    E,
    GPI1);
  output INTC_IRQ;
  output UART_Tx;
  output active_wakeup0;
  output [15:0]Extend_Data_Read;
  output Data_Read;
  output \fifo_DOut_reg[7] ;
  output UART_Interrupt;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output [12:0]\Using_FPGA.Native_14 ;
  output [31:0]GPO1;
  input Clk;
  input LMB_Rst_reg;
  input UART_Rx;
  input Sleep_Decode;
  input [0:31]DATA_OUTB;
  input \No_ECC.lmb_as_reg ;
  input [1:0]sel_LSB;
  input lmb_reg_write_reg;
  input lmb_reg_read_Q_reg;
  input [5:0]Q;
  input lmb_reg_read_reg;
  input [1:0]\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ;
  input lmb_reg_read_Q_reg_0;
  input [31:0]out;
  input [0:0]E;
  input [31:0]GPI1;

  wire Clk;
  wire [0:31]DATA_OUTB;
  wire Data_Read;
  wire [0:0]E;
  wire [15:0]Extend_Data_Read;
  wire [31:0]GPI1;
  wire GPI_I1_n_15;
  wire GPI_I1_n_16;
  wire [31:0]GPO1;
  wire GPO_I1_n_0;
  wire [31:3]INTC_CIPR;
  wire INTC_IRQ;
  wire LMB_Rst_reg;
  wire \No_ECC.lmb_as_reg ;
  wire [5:0]Q;
  wire Q_0;
  wire [7:0]RX_Data;
  wire RX_Data_Exists;
  wire RX_Data_Received;
  wire Sleep_Decode;
  wire TX_Data_Transmitted;
  wire UART_Interrupt;
  wire UART_Rx;
  wire [6:0]UART_Status;
  wire UART_Tx;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire [12:0]\Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_UART.No_Dynamic_BaudRate.UART_FIT_I_n_0 ;
  wire \Using_UART.Uart_Control_Status_I1_n_2 ;
  wire \Using_UART.Uart_Control_Status_I1_n_4 ;
  wire \Using_UART_RX.UART_RX_I1_n_3 ;
  wire \Using_UART_RX.UART_RX_I1_n_4 ;
  wire \Using_UART_RX.UART_RX_I1_n_6 ;
  wire \Using_UART_RX.UART_RX_I1_n_7 ;
  wire [1:0]\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ;
  wire active_wakeup0;
  wire \fifo_DOut_reg[7] ;
  wire intr_ctrl_I1_n_33;
  wire intr_ctrl_I1_n_35;
  wire intr_ctrl_I1_n_36;
  wire intr_ctrl_I1_n_37;
  wire intr_ctrl_I1_n_38;
  wire intr_ctrl_I1_n_39;
  wire intr_ctrl_I1_n_40;
  wire intr_ctrl_I1_n_41;
  wire intr_ctrl_I1_n_50;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_read_Q_reg_0;
  wire lmb_reg_read_reg;
  wire lmb_reg_write_reg;
  wire [0:0]new_rx_data_orig;
  wire [31:0]out;
  wire [6:3]p_0_out;
  wire [31:0]p_2_in;
  wire [1:0]sel_LSB;

  controller_GPI_Module GPI_I1
       (.Clk(Clk),
        .DATA_OUTB({DATA_OUTB[0],DATA_OUTB[1],DATA_OUTB[2],DATA_OUTB[3],DATA_OUTB[4],DATA_OUTB[5],DATA_OUTB[6],DATA_OUTB[7],DATA_OUTB[8],DATA_OUTB[9],DATA_OUTB[10],DATA_OUTB[11],DATA_OUTB[12],DATA_OUTB[13],DATA_OUTB[14],DATA_OUTB[15],DATA_OUTB[16],DATA_OUTB[17],DATA_OUTB[18],DATA_OUTB[19],DATA_OUTB[20],DATA_OUTB[21],DATA_OUTB[22],DATA_OUTB[23],DATA_OUTB[24],DATA_OUTB[25],DATA_OUTB[26],DATA_OUTB[27],DATA_OUTB[28]}),
        .Data_Read(Data_Read),
        .Extend_Data_Read({Extend_Data_Read[15:3],Extend_Data_Read[0]}),
        .GPI1(GPI1),
        .INTC_CIPR(INTC_CIPR),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .Q({p_2_in[31:17],p_2_in[2:0]}),
        .\RX_Data_reg[7] (RX_Data[7:3]),
        .\UART_Status_reg[6] ({UART_Status[6:5],UART_Status[3]}),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (intr_ctrl_I1_n_50),
        .\Using_FPGA.Native (GPI_I1_n_15),
        .\Using_FPGA.Native_0 (GPI_I1_n_16),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_5 ),
        .\cipr_rd_dff_all[19].fdr_i (intr_ctrl_I1_n_41),
        .\cipr_rd_dff_all[20].fdr_i (intr_ctrl_I1_n_40),
        .\cipr_rd_dff_all[21].fdr_i (intr_ctrl_I1_n_39),
        .\cipr_rd_dff_all[22].fdr_i (intr_ctrl_I1_n_38),
        .\cipr_rd_dff_all[23].fdr_i (intr_ctrl_I1_n_37),
        .\lmb_abus_Q_reg[1] (Q[4:0]),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_read_Q_reg_0(lmb_reg_read_Q_reg_0),
        .lmb_reg_read_reg(lmb_reg_read_reg),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .sel_LSB(sel_LSB));
  controller_GPO_Module GPO_I1
       (.Clk(Clk),
        .GPO1(GPO1),
        .LMB_Rst_reg(LMB_Rst_reg),
        .Q(Q),
        .\Use_it.gpo_io_i_reg[0]_0 (GPO_I1_n_0),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .out(out));
  controller_FIT_Module \Using_UART.No_Dynamic_BaudRate.UART_FIT_I 
       (.Clk(Clk),
        .FDRE_I(\Using_UART.No_Dynamic_BaudRate.UART_FIT_I_n_0 ));
  controller_Uart_Control_Status \Using_UART.Uart_Control_Status_I1 
       (.\All_INTR_Bits[0].Using_Intr.cisr_reg[0] (\Using_UART.Uart_Control_Status_I1_n_4 ),
        .\All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 (intr_ctrl_I1_n_35),
        .Clk(Clk),
        .D(p_0_out[6:5]),
        .LMB_Rst_reg(\Using_UART_RX.UART_RX_I1_n_6 ),
        .LMB_Rst_reg_0(LMB_Rst_reg),
        .Q(Q[4:0]),
        .Q_0(Q_0),
        .RX_Data_Received(RX_Data_Received),
        .TX_Data_Transmitted(TX_Data_Transmitted),
        .UART_Interrupt(UART_Interrupt),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ({UART_Status[6:5],UART_Status[3],UART_Status[0]}),
        .frame_error_reg_0(\Using_UART.Uart_Control_Status_I1_n_2 ),
        .\lmb_abus_Q_reg[0] (intr_ctrl_I1_n_33),
        .lmb_reg_read_reg(lmb_reg_read_reg),
        .new_rx_data_orig(new_rx_data_orig),
        .new_rx_data_write_reg(\Using_UART_RX.UART_RX_I1_n_4 ),
        .\not_First.Clk_En_Out_i_reg (\Using_UART.No_Dynamic_BaudRate.UART_FIT_I_n_0 ),
        .out(out[0]),
        .stop_Bit_Position_reg(\Using_UART_RX.UART_RX_I1_n_3 ),
        .tx_buffer_empty_i_reg({p_0_out[3],RX_Data_Exists}));
  controller_UART_Receive \Using_UART_RX.UART_RX_I1 
       (.\All_INTR_Bits[2].Using_Intr.cisr_reg[2] (\Using_UART_RX.UART_RX_I1_n_7 ),
        .\All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 (intr_ctrl_I1_n_36),
        .Clk(Clk),
        .D(p_0_out[6:5]),
        .LMB_Rst_reg(LMB_Rst_reg),
        .Q(Q[4:0]),
        .Q_0(Q_0),
        .RX_Data_Received(RX_Data_Received),
        .UART_Rx(UART_Rx),
        .\UART_Status_reg[0] (RX_Data_Exists),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (RX_Data),
        .frame_error_reg(\Using_UART_RX.UART_RX_I1_n_6 ),
        .\lmb_abus_Q_reg[0] (intr_ctrl_I1_n_33),
        .\lmb_abus_Q_reg[1] (\Using_UART.Uart_Control_Status_I1_n_2 ),
        .lmb_reg_read_reg(lmb_reg_read_reg),
        .new_rx_data_write_reg_0(new_rx_data_orig),
        .new_rx_data_write_reg_1(\Using_UART_RX.UART_RX_I1_n_3 ),
        .\not_First.Clk_En_Out_i_reg (\Using_UART.No_Dynamic_BaudRate.UART_FIT_I_n_0 ),
        .out(out[2]),
        .overrun_error_reg(\Using_UART_RX.UART_RX_I1_n_4 ));
  controller_UART_Transmit \Using_UART_TX.UART_TX_I1 
       (.Clk(Clk),
        .E(E),
        .LMB_Rst_reg(LMB_Rst_reg),
        .TX_Data_Transmitted(TX_Data_Transmitted),
        .\UART_Status_reg[3] (p_0_out[3]),
        .UART_Tx(UART_Tx),
        .\not_First.Clk_En_Out_i_reg (\Using_UART.No_Dynamic_BaudRate.UART_FIT_I_n_0 ),
        .out(out[7:0]));
  controller_intr_ctrl intr_ctrl_I1
       (.\All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 (intr_ctrl_I1_n_35),
        .\All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 (intr_ctrl_I1_n_33),
        .\All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 (intr_ctrl_I1_n_36),
        .Clk(Clk),
        .DATA_OUTB({DATA_OUTB[0],DATA_OUTB[1],DATA_OUTB[2],DATA_OUTB[3],DATA_OUTB[4],DATA_OUTB[5],DATA_OUTB[6],DATA_OUTB[7],DATA_OUTB[8],DATA_OUTB[9],DATA_OUTB[10],DATA_OUTB[11],DATA_OUTB[12],DATA_OUTB[13],DATA_OUTB[14],DATA_OUTB[29],DATA_OUTB[30],DATA_OUTB[31]}),
        .Extend_Data_Read(Extend_Data_Read[2:1]),
        .INTC_IRQ(INTC_IRQ),
        .LMB_Rst_reg(\Using_UART.Uart_Control_Status_I1_n_4 ),
        .LMB_Rst_reg_0(\Using_UART_RX.UART_RX_I1_n_7 ),
        .LMB_Rst_reg_1(LMB_Rst_reg),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .Q(Q),
        .\RX_Data_reg[2] (RX_Data[2:0]),
        .Sleep_Decode(Sleep_Decode),
        .TX_Data_Transmitted(TX_Data_Transmitted),
        .\UART_Status_reg[0] (UART_Status[0]),
        .\Using_B36_S4.The_BRAMs[5].RAMB36_I1 (GPI_I1_n_16),
        .\Using_B36_S4.The_BRAMs[5].RAMB36_I1_0 (GPI_I1_n_15),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (intr_ctrl_I1_n_37),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 (intr_ctrl_I1_n_38),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 (intr_ctrl_I1_n_39),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 (intr_ctrl_I1_n_40),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (intr_ctrl_I1_n_41),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (intr_ctrl_I1_n_50),
        .\Using_FPGA.Native (INTC_CIPR),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_14 ),
        .\Using_GPI.GPI_In_reg[31] ({p_2_in[31:17],p_2_in[2:0]}),
        .\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] (\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ),
        .active_wakeup0(active_wakeup0),
        .\fifo_DOut_reg[7] (\fifo_DOut_reg[7] ),
        .\lmb_abus_Q_reg[0] (GPO_I1_n_0),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg_0),
        .lmb_reg_read_Q_reg_0(lmb_reg_read_Q_reg),
        .lmb_reg_read_reg(lmb_reg_read_reg),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .out(out[14:0]),
        .sel_LSB(sel_LSB));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[9] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[9] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[9] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[9] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_459
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[8] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[8] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[8] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[8] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_463
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[7] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[7] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[7] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[7] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_467
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[6] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[6] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[6] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[6] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_471
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[5] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[5] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[5] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[5] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_475
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[4] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[4] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[4] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[4] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_479
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[3] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[3] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[3] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[3] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_483
   (EX_Op2,
    WEB,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk,
    writing_reg,
    M_BE,
    ALU_Result);
  output EX_Op2;
  output [0:3]WEB;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;
  input writing_reg;
  input [0:3]M_BE;
  input ALU_Result;

  wire ALU_Result;
  wire Clk;
  wire EX_Op2;
  wire [0:3]M_BE;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:3]WEB;
  wire normal_piperun;
  wire writing_reg;

  LUT3 #(
    .INIT(8'h04)) 
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_i_3 
       (.I0(writing_reg),
        .I1(M_BE[0]),
        .I2(ALU_Result),
        .O(WEB[0]));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_i_1 
       (.I0(writing_reg),
        .I1(M_BE[1]),
        .I2(ALU_Result),
        .O(WEB[1]));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1_i_1 
       (.I0(writing_reg),
        .I1(M_BE[2]),
        .I2(ALU_Result),
        .O(WEB[2]));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_i_1 
       (.I0(writing_reg),
        .I1(M_BE[3]),
        .I2(ALU_Result),
        .O(WEB[3]));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(EX_Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_487
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_491
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[2] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[2] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[2] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[2] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_495
   (Op2,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output Op2;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire Op2;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_499
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_503
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_507
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_511
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_515
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_519
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_523
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_527
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_531
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_535
   (lmb_reg_write_reg,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[1] ,
    Clk);
  output lmb_reg_write_reg;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[1] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[1] ;
  wire lmb_reg_write_reg;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[1] ),
        .Q(lmb_reg_write_reg),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_539
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_543
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_547
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_551
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_555
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[15] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[15] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[15] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_559
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[14] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[14] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[14] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[14] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_563
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[13] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[13] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[13] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[13] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_567
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[12] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[12] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[12] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[12] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_571
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[11] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[11] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[11] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[11] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_575
   (\Using_FPGA.Native_0 ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[10] ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[10] ;
  input Clk;

  wire Clk;
  wire \Size_17to32.imm_Reg_reg[10] ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[10] ),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module controller_MB_FDE_579
   (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \No_ECC.Sl_Rdy_reg ,
    normal_piperun,
    \Size_17to32.imm_Reg_reg[0] ,
    Clk,
    ALU_Result,
    POR_FF_I);
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output \No_ECC.Sl_Rdy_reg ;
  input normal_piperun;
  input \Size_17to32.imm_Reg_reg[0] ;
  input Clk;
  input ALU_Result;
  input POR_FF_I;

  wire ALU_Result;
  wire Clk;
  wire \No_ECC.Sl_Rdy_reg ;
  wire POR_FF_I;
  wire \Size_17to32.imm_Reg_reg[0] ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire normal_piperun;

  LUT2 #(
    .INIT(4'h1)) 
    \No_ECC.Sl_Rdy_i_1 
       (.I0(ALU_Result),
        .I1(POR_FF_I),
        .O(\No_ECC.Sl_Rdy_reg ));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(\Size_17to32.imm_Reg_reg[0] ),
        .Q(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module controller_MB_FDR
   (\Size_17to32.imm_Reg_reg[15] ,
    PC_Incr,
    S,
    S1_out,
    S3_out,
    Unsigned_Op_reg,
    SR,
    E,
    load_Store_i2,
    mul_Executing0,
    inHibit_EX1,
    pc_write_I,
    \Size_17to32.imm_Reg_reg[15]_0 ,
    d_AS_I17_out,
    ex_Valid_reg,
    R_0,
    \Using_LWX_SWX_instr.reservation_reg ,
    \Using_FPGA.Native_0 ,
    byte_i14_out,
    break_Pipe_i_reg,
    break_Pipe_i_reg0,
    Select_Logic0,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.set_BIP_I_reg ,
    mtsmsr_write_i_reg,
    take_intr_2nd_cycle_reg,
    using_Imm_reg,
    mbar_hold_I_reg,
    missed_IFetch_reg,
    \Using_FPGA.Native_1 ,
    select_ALU_Carry_reg,
    Compare_Instr_reg,
    write_Reg_reg,
    is_swx_I_reg,
    write_Carry_I_reg,
    Sext16_reg,
    Sext8_reg,
    load_Store_i_reg,
    swx_ready_reg,
    is_lwx_I_reg,
    doublet_i_reg,
    byte_i_reg,
    R,
    Clk,
    D1_in,
    D0_in,
    \Using_FPGA.Native_2 ,
    mbar_hold_I_reg_0,
    ex_Valid,
    \Using_FPGA.Native_3 ,
    missed_IFetch,
    mul_Executing_reg,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    out,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    inHibit_EX,
    \Using_FPGA.Native_6 ,
    mbar_sleep_reg,
    mul_Executing_reg_0,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ,
    lmb_reg_write_reg,
    load_Store_i,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg ,
    swx_ready,
    lmb_reg_read_Q_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ,
    jump2_I_reg,
    CI64_in,
    mul_Executing,
    MSR,
    INTC_IRQ,
    p_76_in,
    LMB_Ready,
    nonvalid_IFetch_n_reg_0,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ,
    mtsmsr_write_i_reg_0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_6 ,
    take_intr_2nd_cycle_reg_0,
    break_Pipe_i_reg__0,
    Use_Imm_Reg,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    lmb_as,
    Sl_Rdy,
    \Using_FPGA.Native_7 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_7 ,
    select_ALU_Carry_reg_0,
    Compare_Instr,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_8 ,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    I214_out,
    is_swx_I_reg_0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_9 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_10 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_11 ,
    write_Carry_I_reg_0,
    Sext16_reg_0,
    Imm_Value,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Sext8_reg_0,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    is_lwx_I,
    is_lwx_I0,
    Doublet,
    Byte);
  output \Size_17to32.imm_Reg_reg[15] ;
  output PC_Incr;
  output S;
  output S1_out;
  output S3_out;
  output Unsigned_Op_reg;
  output [0:0]SR;
  output [0:0]E;
  output load_Store_i2;
  output mul_Executing0;
  output inHibit_EX1;
  output pc_write_I;
  output [0:0]\Size_17to32.imm_Reg_reg[15]_0 ;
  output d_AS_I17_out;
  output ex_Valid_reg;
  output R_0;
  output \Using_LWX_SWX_instr.reservation_reg ;
  output \Using_FPGA.Native_0 ;
  output byte_i14_out;
  output break_Pipe_i_reg;
  output break_Pipe_i_reg0;
  output Select_Logic0;
  output nonvalid_IFetch_n_reg;
  output \Using_FPGA.set_BIP_I_reg ;
  output mtsmsr_write_i_reg;
  output take_intr_2nd_cycle_reg;
  output using_Imm_reg;
  output mbar_hold_I_reg;
  output missed_IFetch_reg;
  output \Using_FPGA.Native_1 ;
  output select_ALU_Carry_reg;
  output Compare_Instr_reg;
  output write_Reg_reg;
  output is_swx_I_reg;
  output write_Carry_I_reg;
  output Sext16_reg;
  output Sext8_reg;
  output load_Store_i_reg;
  output swx_ready_reg;
  output is_lwx_I_reg;
  output doublet_i_reg;
  output byte_i_reg;
  input R;
  input Clk;
  input D1_in;
  input D0_in;
  input \Using_FPGA.Native_2 ;
  input mbar_hold_I_reg_0;
  input ex_Valid;
  input \Using_FPGA.Native_3 ;
  input missed_IFetch;
  input mul_Executing_reg;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]out;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input inHibit_EX;
  input \Using_FPGA.Native_6 ;
  input mbar_sleep_reg;
  input mul_Executing_reg_0;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  input lmb_reg_write_reg;
  input load_Store_i;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg ;
  input swx_ready;
  input lmb_reg_read_Q_reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ;
  input jump2_I_reg;
  input CI64_in;
  input mul_Executing;
  input [1:0]MSR;
  input INTC_IRQ;
  input p_76_in;
  input LMB_Ready;
  input nonvalid_IFetch_n_reg_0;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ;
  input mtsmsr_write_i_reg_0;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_6 ;
  input take_intr_2nd_cycle_reg_0;
  input break_Pipe_i_reg__0;
  input Use_Imm_Reg;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  input lmb_as;
  input Sl_Rdy;
  input \Using_FPGA.Native_7 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_7 ;
  input select_ALU_Carry_reg_0;
  input Compare_Instr;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_8 ;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input I214_out;
  input is_swx_I_reg_0;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_9 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_10 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_11 ;
  input write_Carry_I_reg_0;
  input Sext16_reg_0;
  input [1:0]Imm_Value;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input Sext8_reg_0;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input is_lwx_I;
  input is_lwx_I0;
  input Doublet;
  input Byte;

  wire Byte;
  wire CI64_in;
  wire Clk;
  wire Compare_Instr;
  wire Compare_Instr_i_3_n_0;
  wire Compare_Instr_reg;
  wire D0_in;
  wire D1_in;
  wire Doublet;
  wire [0:0]E;
  wire I214_out;
  wire INTC_IRQ;
  wire [1:0]Imm_Value;
  wire LMB_Ready;
  wire [1:0]MSR;
  wire \No_ECC.lmb_as_reg ;
  wire PC_Incr;
  wire R;
  wire R_0;
  wire S;
  wire S1_out;
  wire S3_out;
  wire S98_out;
  wire [0:0]SR;
  wire Select_Logic0;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire [0:0]\Size_17to32.imm_Reg_reg[15]_0 ;
  wire Sl_Rdy;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire Unsigned_Op_reg;
  wire Use_Imm_Reg;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_10 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_11 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_6 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_7 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_8 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_9 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_i_2_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire Write_DCache_I;
  wire break_Pipe_i_reg;
  wire break_Pipe_i_reg0;
  wire break_Pipe_i_reg__0;
  wire byte_i14_out;
  wire byte_i_reg;
  wire d_AS_I17_out;
  wire doublet_i_reg;
  wire ex_Valid;
  wire ex_Valid_i_2_n_0;
  wire ex_Valid_reg;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire is_lwx_I;
  wire is_lwx_I0;
  wire is_lwx_I_reg;
  wire is_swx_I;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire jump2_I_reg;
  wire lmb_as;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write_reg;
  wire load_Store_i;
  wire load_Store_i2;
  wire load_Store_i_i_2_n_0;
  wire load_Store_i_reg;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_sleep_reg;
  wire missed_IFetch;
  wire missed_IFetch_reg;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing;
  wire mul_Executing0;
  wire mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire [0:0]out;
  wire p_76_in;
  wire pc_write_I;
  wire select_ALU_Carry_reg;
  wire select_ALU_Carry_reg_0;
  wire swx_ready;
  wire swx_ready_reg;
  wire take_intr_2nd_cycle_reg;
  wire take_intr_2nd_cycle_reg_0;
  wire using_Imm_reg;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Reg_reg;

  LUT6 #(
    .INIT(64'h000000002E222222)) 
    Compare_Instr_i_1
       (.I0(Compare_Instr),
        .I1(mul_Executing_reg),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ),
        .I3(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_8 ),
        .I5(Compare_Instr_i_3_n_0),
        .O(Compare_Instr_reg));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    Compare_Instr_i_3
       (.I0(mul_Executing_reg),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(out),
        .O(Compare_Instr_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \Result_Sel[0]_i_1 
       (.I0(mul_Executing_reg),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(out),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h1)) 
    Select_Logic_i_1
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(Select_Logic0));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    Sext16_i_1
       (.I0(Sext16_reg_0),
        .I1(mul_Executing_reg),
        .I2(Imm_Value[0]),
        .I3(Imm_Value[1]),
        .I4(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I5(\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .O(Sext16_reg));
  LUT6 #(
    .INIT(64'h000000002E222222)) 
    Sext8_i_1
       (.I0(Sext8_reg_0),
        .I1(mul_Executing_reg),
        .I2(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I3(Imm_Value[0]),
        .I4(Imm_Value[1]),
        .I5(\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .O(Sext8_reg));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \Size_17to32.imm_Reg[0]_i_1 
       (.I0(\Size_17to32.imm_Reg_reg[15] ),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\Size_17to32.imm_Reg_reg[15]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    Unsigned_Op_i_1
       (.I0(mul_Executing_reg),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(out),
        .O(Unsigned_Op_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2_n_0 ),
        .Q(\Size_17to32.imm_Reg_reg[15] ),
        .R(R));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(mul_Executing_reg),
        .I1(\Using_FPGA.Native_4 ),
        .O(S1_out));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(mul_Executing_reg),
        .I1(\Using_FPGA.Native_5 ),
        .O(S3_out));
  LUT6 #(
    .INIT(64'hFEFEFEFEAEAEAEFE)) 
    \Using_FPGA.Native_i_1__122 
       (.I0(S98_out),
        .I1(\Using_FPGA.Native_7 ),
        .I2(mul_Executing_reg),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_7 ),
        .I5(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I1(inHibit_EX),
        .I2(\Using_FPGA.Native_6 ),
        .O(R_0));
  LUT5 #(
    .INIT(32'h00000777)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(mbar_hold_I_reg_0),
        .I1(ex_Valid),
        .I2(\Size_17to32.imm_Reg_reg[15] ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(missed_IFetch),
        .O(PC_Incr));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(\Size_17to32.imm_Reg_reg[15] ),
        .I1(\Using_FPGA.Native_3 ),
        .O(S));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(\Size_17to32.imm_Reg_reg[15] ),
        .I1(jump2_I_reg),
        .O(break_Pipe_i_reg));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(load_Store_i2));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(mul_Executing_reg_0),
        .O(pc_write_I));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_2 
       (.I0(D1_in),
        .I1(D0_in),
        .I2(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBABBBBBB)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'h02022202)) 
    \Using_FPGA.set_BIP_I_i_1 
       (.I0(\Using_FPGA.set_BIP_I_reg_0 ),
        .I1(out),
        .I2(mul_Executing_reg),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\Using_FPGA.set_BIP_I_reg ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.take_Intr_2nd_Phase_i_1 
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .O(inHibit_EX1));
  LUT6 #(
    .INIT(64'h777777777777777F)) 
    \Using_LWX_SWX_instr.reservation_i_4 
       (.I0(load_Store_i),
        .I1(ex_Valid),
        .I2(mul_Executing_reg),
        .I3(lmb_reg_write),
        .I4(lmb_reg_read_Q),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_LWX_SWX_instr.reservation_reg ));
  LUT6 #(
    .INIT(64'h0000070000000000)) 
    break_Pipe_i_i_1
       (.I0(jump2_I_reg),
        .I1(\Using_FPGA.Native_6 ),
        .I2(MSR[1]),
        .I3(INTC_IRQ),
        .I4(p_76_in),
        .I5(MSR[0]),
        .O(break_Pipe_i_reg0));
  LUT6 #(
    .INIT(64'h000000000000222E)) 
    byte_i_i_1
       (.I0(Byte),
        .I1(mul_Executing_reg),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I4(byte_i14_out),
        .I5(out),
        .O(byte_i_reg));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    d_AS_I_i_1
       (.I0(out),
        .I1(mul_Executing_reg),
        .I2(S98_out),
        .I3(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(d_AS_I17_out));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h8)) 
    d_AS_I_i_2
       (.I0(\Using_FPGA.Native_6 ),
        .I1(inHibit_EX),
        .O(S98_out));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    doublet_Read_i_i_2
       (.I0(mul_Executing_reg),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I3(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(byte_i14_out));
  LUT6 #(
    .INIT(64'h0000000000002E22)) 
    doublet_i_i_1
       (.I0(Doublet),
        .I1(mul_Executing_reg),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .I4(byte_i14_out),
        .I5(out),
        .O(doublet_i_reg));
  LUT6 #(
    .INIT(64'hEAEAEAEA00EAEAEA)) 
    ex_Valid_i_1
       (.I0(ex_Valid_i_2_n_0),
        .I1(lmb_reg_write_reg),
        .I2(load_Store_i),
        .I3(mul_Executing_reg),
        .I4(S98_out),
        .I5(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(ex_Valid_reg));
  LUT5 #(
    .INIT(32'hFFFFFF40)) 
    ex_Valid_i_2
       (.I0(\Size_17to32.imm_Reg_reg[15] ),
        .I1(jump2_I_reg),
        .I2(CI64_in),
        .I3(mul_Executing),
        .I4(mul_Executing_reg),
        .O(ex_Valid_i_2_n_0));
  LUT4 #(
    .INIT(16'h00E2)) 
    is_lwx_I_i_1
       (.I0(is_lwx_I),
        .I1(mul_Executing_reg),
        .I2(is_lwx_I0),
        .I3(is_swx_I),
        .O(is_lwx_I_reg));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFFEAAAA)) 
    is_lwx_I_i_3
       (.I0(out),
        .I1(swx_ready),
        .I2(lmb_reg_read_Q_reg),
        .I3(\No_ECC.lmb_as_reg ),
        .I4(load_Store_i),
        .I5(mul_Executing_reg),
        .O(is_swx_I));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    is_swx_I_i_1
       (.I0(is_swx_I_reg_0),
        .I1(mul_Executing_reg),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_9 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_10 ),
        .I5(is_swx_I),
        .O(is_swx_I_reg));
  LUT6 #(
    .INIT(64'h000000002EEE2222)) 
    load_Store_i_i_1
       (.I0(load_Store_i),
        .I1(mul_Executing_reg),
        .I2(\Using_FPGA.Native_6 ),
        .I3(inHibit_EX),
        .I4(load_Store_i_i_2_n_0),
        .I5(is_swx_I),
        .O(load_Store_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h40)) 
    load_Store_i_i_2
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(load_Store_i_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFEFEFEF00202020)) 
    mbar_first_i_1
       (.I0(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(mul_Executing_reg),
        .I3(inHibit_EX),
        .I4(\Using_FPGA.Native_6 ),
        .I5(mbar_sleep_reg),
        .O(mul_Executing0));
  LUT6 #(
    .INIT(64'h00003000000030AA)) 
    mbar_hold_I_i_1
       (.I0(mbar_hold_I_reg_0),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I3(mul_Executing_reg),
        .I4(out),
        .I5(mul_Executing_reg_0),
        .O(mbar_hold_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h707F7070)) 
    missed_IFetch_i_1
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .I2(missed_IFetch),
        .I3(mul_Executing_reg_0),
        .I4(\Using_FPGA.Native_6 ),
        .O(missed_IFetch_reg));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT5 #(
    .INIT(32'h000003AA)) 
    mtsmsr_write_i_i_1
       (.I0(mtsmsr_write_i_reg_0),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_6 ),
        .I3(mul_Executing_reg),
        .I4(out),
        .O(mtsmsr_write_i_reg));
  LUT6 #(
    .INIT(64'hFF11FFFFF0F0F0F0)) 
    nonvalid_IFetch_n_i_1
       (.I0(\Size_17to32.imm_Reg_reg[15] ),
        .I1(inHibit_EX),
        .I2(LMB_Ready),
        .I3(mul_Executing_reg_0),
        .I4(\Using_FPGA.Native_6 ),
        .I5(nonvalid_IFetch_n_reg_0),
        .O(nonvalid_IFetch_n_reg));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT5 #(
    .INIT(32'h00030A0A)) 
    select_ALU_Carry_i_1
       (.I0(select_ALU_Carry_reg_0),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .I2(out),
        .I3(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I4(mul_Executing_reg),
        .O(select_ALU_Carry_reg));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    swx_ready_i_1
       (.I0(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I1(is_swx_I_reg_0),
        .I2(out),
        .I3(mul_Executing_reg),
        .O(swx_ready_reg));
  LUT6 #(
    .INIT(64'h00000000303000AA)) 
    take_intr_2nd_cycle_i_1
       (.I0(take_intr_2nd_cycle_reg_0),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(break_Pipe_i_reg__0),
        .I3(mul_Executing_reg),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I5(out),
        .O(take_intr_2nd_cycle_reg));
  LUT6 #(
    .INIT(64'h0000000022222E22)) 
    using_Imm_i_1
       (.I0(Use_Imm_Reg),
        .I1(mul_Executing_reg),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .I4(S98_out),
        .I5(out),
        .O(using_Imm_reg));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \write_Addr_I[1]_i_1 
       (.I0(mul_Executing_reg),
        .I1(out),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h001F0010)) 
    write_Carry_I_i_1
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_11 ),
        .I2(mul_Executing_reg),
        .I3(out),
        .I4(write_Carry_I_reg_0),
        .O(write_Carry_I_reg));
  LUT6 #(
    .INIT(64'hAA08FFFFAA080000)) 
    write_Reg_i_1
       (.I0(\Synchronize.use_sync_reset.sync_reg[2] ),
        .I1(\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .I3(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I4(Write_DCache_I),
        .I5(I214_out),
        .O(write_Reg_reg));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hE)) 
    write_Reg_i_5
       (.I0(mul_Executing_reg),
        .I1(out),
        .O(Write_DCache_I));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module controller_MB_FDRSE
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module controller_MB_FDRSE_582
   (MSR,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    Clk);
  output [0:0]MSR;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input Clk;

  wire Clk;
  wire [0:0]MSR;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.enable_Interrupts_I_reg ),
        .Q(MSR),
        .R(\Synchronize.use_sync_reset.sync_reg[2] ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module controller_MB_FDRSE_583
   (MSR,
    I3,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    PC_OF);
  output [0:0]MSR;
  output I3;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input PC_OF;

  wire Clk;
  wire I3;
  wire [0:0]MSR;
  wire PC_OF;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(MSR),
        .R(\Synchronize.use_sync_reset.sync_reg[2] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(MSR),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .I2(PC_OF),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module controller_MB_FDRSE_584
   (MSR,
    I3_0,
    MSR_Rst,
    \Using_FPGA.set_BIP_I_reg ,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    \Using_FPGA.Native_0 );
  output [0:0]MSR;
  output I3_0;
  input MSR_Rst;
  input \Using_FPGA.set_BIP_I_reg ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire I3_0;
  wire [0:0]MSR;
  wire MSR_Rst;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.set_BIP_I_reg ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.set_BIP_I_reg ),
        .Q(MSR),
        .R(MSR_Rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(MSR),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .I2(\Using_FPGA.Native_0 ),
        .O(I3_0));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module controller_MB_FDS
   (mbar_is_sleep_reg,
    S_0,
    R,
    D0_in,
    Clk,
    mul_Executing_reg);
  output mbar_is_sleep_reg;
  output S_0;
  input R;
  input D0_in;
  input Clk;
  input mul_Executing_reg;

  wire Clk;
  wire D0_in;
  wire R;
  wire S_0;
  wire mbar_is_sleep_reg;
  wire mul_Executing_reg;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D0_in),
        .Q(mbar_is_sleep_reg),
        .S(R));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I2_i_1 
       (.I0(mbar_is_sleep_reg),
        .I1(mul_Executing_reg),
        .O(S_0));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE
   (Reg_Test_Equal,
    R_0,
    mul_Executing_reg,
    Reg_Test_Equal_i,
    Clk);
  output Reg_Test_Equal;
  input R_0;
  input mul_Executing_reg;
  input Reg_Test_Equal_i;
  input Clk;

  wire Clk;
  wire R_0;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_i;
  wire mul_Executing_reg;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(Reg_Test_Equal_i),
        .Q(Reg_Test_Equal),
        .S(R_0));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_389
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_394
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_399
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_404
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_409
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_414
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_419
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_424
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_429
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_434
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_439
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_444
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module controller_MB_FDSE_449
   (\Using_FPGA.Native_0 ,
    out,
    PC_Write,
    ADDRARDADDR,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input PC_Write;
  input [0:0]ADDRARDADDR;
  input Clk;

  wire [0:0]ADDRARDADDR;
  wire Clk;
  wire PC_Write;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(ADDRARDADDR),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module controller_MB_FDS_22
   (mbar_is_sleep_reg,
    R,
    O,
    Clk);
  output mbar_is_sleep_reg;
  input R;
  input O;
  input Clk;

  wire Clk;
  wire O;
  wire R;
  wire mbar_is_sleep_reg;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(mbar_is_sleep_reg),
        .S(R));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module controller_MB_FDS_24
   (mbar_is_sleep_reg,
    R,
    O,
    Clk);
  output mbar_is_sleep_reg;
  input R;
  input O;
  input Clk;

  wire Clk;
  wire O;
  wire R;
  wire mbar_is_sleep_reg;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(mbar_is_sleep_reg),
        .S(R));
endmodule

(* ORIG_REF_NAME = "MB_LUT2" *) 
module controller_MB_LUT2
   (sel_LSB,
    \Using_FPGA.Native_0 ,
    Byte);
  output [0:0]sel_LSB;
  input \Using_FPGA.Native_0 ;
  input Byte;

  wire Byte;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]sel_LSB;

  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Byte),
        .O(sel_LSB));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3
   (\Using_FPGA.Native_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    D,
    Imm_Value);
  output \Using_FPGA.Native_0 ;
  input [0:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input [0:0]D;
  input [0:0]Imm_Value;

  wire [0:0]D;
  wire [0:0]Imm_Value;
  wire [0:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native 
       (.I0(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I1(D),
        .I2(Imm_Value),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized1
   (\Using_FPGA.Native_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 );
  output \Using_FPGA.Native_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;

  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \Using_FPGA.Native 
       (.I0(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized11
   (S,
    Carry_In);
  output S;
  input Carry_In;

  wire Carry_In;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h00)) 
    \Using_FPGA.Native 
       (.I0(Carry_In),
        .I1(Carry_In),
        .I2(1'b1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized13
   (sel_LSB,
    \Using_FPGA.Native_0 ,
    Byte,
    Doublet);
  output [0:0]sel_LSB;
  input \Using_FPGA.Native_0 ;
  input Byte;
  input Doublet;

  wire Byte;
  wire Doublet;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]sel_LSB;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Byte),
        .I2(Doublet),
        .O(sel_LSB));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized3
   (\Using_FPGA.Native_0 ,
    Reg1_Addr,
    Q,
    ex_Valid);
  output \Using_FPGA.Native_0 ;
  input [0:0]Reg1_Addr;
  input [0:0]Q;
  input ex_Valid;

  wire [0:0]Q;
  wire [0:0]Reg1_Addr;
  wire \Using_FPGA.Native_0 ;
  wire ex_Valid;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Addr),
        .I1(Q),
        .I2(ex_Valid),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized5
   (\Using_FPGA.Native_0 ,
    Imm_Value,
    Q,
    ex_Valid);
  output \Using_FPGA.Native_0 ;
  input [0:0]Imm_Value;
  input [0:0]Q;
  input ex_Valid;

  wire [0:0]Imm_Value;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire ex_Valid;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(Imm_Value),
        .I1(Q),
        .I2(ex_Valid),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized7
   (break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output break_Pipe_i_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire break_Pipe_i_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(break_Pipe_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module controller_MB_LUT3__parameterized9
   (break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output break_Pipe_i_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire break_Pipe_i_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(break_Pipe_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4
   (I3,
    \No_ECC.lmb_as_reg ,
    I190_in,
    I214_out,
    \write_Addr_I_reg[2] );
  output I3;
  input \No_ECC.lmb_as_reg ;
  input I190_in;
  input I214_out;
  input \write_Addr_I_reg[2] ;

  wire I190_in;
  wire I214_out;
  wire I3;
  wire \No_ECC.lmb_as_reg ;
  wire \write_Addr_I_reg[2] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF800)) 
    \Using_FPGA.Native 
       (.I0(\No_ECC.lmb_as_reg ),
        .I1(I190_in),
        .I2(I214_out),
        .I3(\write_Addr_I_reg[2] ),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized1
   (\Using_FPGA.Native_0 ,
    mul_Executing,
    I179_in,
    load_Store_i);
  output \Using_FPGA.Native_0 ;
  input mul_Executing;
  input I179_in;
  input load_Store_i;

  wire I179_in;
  wire \Using_FPGA.Native_0 ;
  wire load_Store_i;
  wire mul_Executing;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(I179_in),
        .I2(load_Store_i),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized11
   (\Using_FPGA.Native_0 ,
    Reg1_Addr,
    Q);
  output \Using_FPGA.Native_0 ;
  input [1:0]Reg1_Addr;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]Reg1_Addr;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Addr[1]),
        .I1(Reg1_Addr[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized13
   (Res_Forward1,
    \write_Addr_I_reg[0] ,
    \write_Addr_I_reg[2] ,
    \write_Addr_I_reg[4] ,
    I3);
  output Res_Forward1;
  input \write_Addr_I_reg[0] ;
  input \write_Addr_I_reg[2] ;
  input \write_Addr_I_reg[4] ;
  input I3;

  wire I3;
  wire Res_Forward1;
  wire \write_Addr_I_reg[0] ;
  wire \write_Addr_I_reg[2] ;
  wire \write_Addr_I_reg[4] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(\write_Addr_I_reg[0] ),
        .I1(\write_Addr_I_reg[2] ),
        .I2(\write_Addr_I_reg[4] ),
        .I3(I3),
        .O(Res_Forward1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized15
   (\Using_FPGA.Native_0 ,
    Imm_Value,
    \write_Addr_I_reg[0] ,
    Q);
  output \Using_FPGA.Native_0 ;
  input [1:0]Imm_Value;
  input \write_Addr_I_reg[0] ;
  input [0:0]Q;

  wire [1:0]Imm_Value;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \write_Addr_I_reg[0] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(Imm_Value[1]),
        .I1(Imm_Value[0]),
        .I2(\write_Addr_I_reg[0] ),
        .I3(Q),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized17
   (\Using_FPGA.Native_0 ,
    Imm_Value,
    Q);
  output \Using_FPGA.Native_0 ;
  input [1:0]Imm_Value;
  input [1:0]Q;

  wire [1:0]Imm_Value;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(Imm_Value[1]),
        .I1(Imm_Value[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized19
   (Res_Forward2,
    \write_Addr_I_reg[0] ,
    \write_Addr_I_reg[2] ,
    \write_Addr_I_reg[4] ,
    I3);
  output Res_Forward2;
  input \write_Addr_I_reg[0] ;
  input \write_Addr_I_reg[2] ;
  input \write_Addr_I_reg[4] ;
  input I3;

  wire I3;
  wire Res_Forward2;
  wire \write_Addr_I_reg[0] ;
  wire \write_Addr_I_reg[2] ;
  wire \write_Addr_I_reg[4] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(\write_Addr_I_reg[0] ),
        .I1(\write_Addr_I_reg[2] ),
        .I2(\write_Addr_I_reg[4] ),
        .I3(I3),
        .O(Res_Forward2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized21
   (\Using_FPGA.Native_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 );
  output \Using_FPGA.Native_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;

  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h00F0)) 
    \Using_FPGA.Native 
       (.I0(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized23
   (break_Pipe_i_reg,
    ex_Valid,
    \Using_FPGA.Native_0 );
  output break_Pipe_i_reg;
  input ex_Valid;
  input \Using_FPGA.Native_0 ;

  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire ex_Valid;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(ex_Valid),
        .I1(1'b0),
        .I2(1'b0),
        .I3(\Using_FPGA.Native_0 ),
        .O(break_Pipe_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized25
   (break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    ex_Valid);
  output break_Pipe_i_reg;
  input \Using_FPGA.Native_0 ;
  input ex_Valid;

  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire ex_Valid;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAABA)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_Valid),
        .I3(1'b0),
        .O(break_Pipe_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized27
   (S,
    Op2,
    ALU_Op,
    Compare_Instr_reg,
    I3);
  output S;
  input Op2;
  input [0:0]ALU_Op;
  input Compare_Instr_reg;
  input I3;

  wire [0:0]ALU_Op;
  wire Compare_Instr_reg;
  wire I3;
  wire Op2;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFA0A)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(ALU_Op),
        .I2(Compare_Instr_reg),
        .I3(I3),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_101
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_104
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_107
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_110
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_113
   (I1,
    EX_Op2,
    Op1_Logic,
    Q);
  output I1;
  input EX_Op2;
  input Op1_Logic;
  input [1:0]Q;

  wire EX_Op2;
  wire I1;
  wire Op1_Logic;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Logic),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_116
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_119
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_122
   (I1,
    Op2,
    Op1_Shift,
    Q);
  output I1;
  input Op2;
  input Op1_Shift;
  input [1:0]Q;

  wire I1;
  wire Op1_Shift;
  wire Op2;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(Op1_Shift),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_125
   (I1,
    \Using_FPGA.Native_0 ,
    Shifted,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_128
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_131
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_134
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_137
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_140
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_143
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_146
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_149
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_152
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_155
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_158
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_161
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_164
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_167
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_170
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_173
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_176
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_179
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_182
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_185
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_95
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized29_98
   (I1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q);
  output I1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;

  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized3
   (DI,
    mul_Executing,
    I179_in,
    load_Store_i);
  output DI;
  input mul_Executing;
  input I179_in;
  input load_Store_i;

  wire DI;
  wire I179_in;
  wire load_Store_i;
  wire mul_Executing;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(I179_in),
        .I2(load_Store_i),
        .I3(1'b0),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_102
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_105
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_108
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_111
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_114
   (I0,
    \Using_FPGA.Native_0 ,
    Op1_Logic,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input Op1_Logic;
  input Shift_Oper;

  wire I0;
  wire Op1_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Op1_Logic),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_117
   (I0,
    Op1_Shift,
    \Using_FPGA.Native_0 ,
    Shift_Oper);
  output I0;
  input Op1_Shift;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;

  wire I0;
  wire Op1_Shift;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(Op1_Shift),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_120
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_123
   (I0,
    Shifted,
    Op1_Shift,
    Shift_Oper);
  output I0;
  input Shifted;
  input Op1_Shift;
  input Shift_Oper;

  wire I0;
  wire Op1_Shift;
  wire Shift_Oper;
  wire Shifted;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(Shifted),
        .I1(Op1_Shift),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_126
   (I0,
    \Using_FPGA.Native_0 ,
    Shifted,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_129
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_132
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_135
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_138
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_141
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire I0;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_144
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_147
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_150
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_153
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_156
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_159
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_162
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_165
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext8_reg,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext8_reg;
  input Shift_Oper;

  wire I0;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext8_reg),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_168
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_171
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_174
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_177
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_180
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_183
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_186
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_96
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized31_99
   (I0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output I0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire I0;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_220
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_222
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_224
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_226
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_228
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_230
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_232
   (I4,
    \Result_Sel_reg[1] ,
    ALU_Result);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input ALU_Result;

  wire ALU_Result;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ALU_Result),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_234
   (I4,
    \Result_Sel_reg[1] ,
    \Using_FPGA.Native_0 );
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input \Using_FPGA.Native_0 ;

  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(\Using_FPGA.Native_0 ),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_236
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_238
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_240
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_242
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_244
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_246
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_248
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_250
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_252
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_254
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_256
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_258
   (I4,
    \Result_Sel_reg[1] ,
    \Using_FPGA.Native_0 );
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]\Using_FPGA.Native_0 ;

  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;
  wire [0:0]\Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(\Using_FPGA.Native_0 ),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_260
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_262
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_264
   (I4,
    \Result_Sel_reg[1] ,
    ADDRBWRADDR);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]ADDRBWRADDR;

  wire [0:0]ADDRBWRADDR;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(ADDRBWRADDR),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_266
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_268
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_270
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_272
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_274
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_276
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_278
   (I4,
    \Result_Sel_reg[1] ,
    BRAM_Addr_B);
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]BRAM_Addr_B;

  wire [0:0]BRAM_Addr_B;
  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(BRAM_Addr_B),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized33_280
   (I4,
    \Result_Sel_reg[1] ,
    \Using_FPGA.Native_0 );
  output I4;
  input [0:0]\Result_Sel_reg[1] ;
  input [0:0]\Using_FPGA.Native_0 ;

  wire I4;
  wire [0:0]\Result_Sel_reg[1] ;
  wire [0:0]\Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Result_Sel_reg[1] ),
        .I3(\Using_FPGA.Native_0 ),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35
   (S,
    DI,
    \Using_FPGA.Native_0 );
  output S;
  input DI;
  input \Using_FPGA.Native_0 ;

  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_393
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_398
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_403
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_408
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_413
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_418
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_423
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_428
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_433
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_438
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_443
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized35_448
   (S,
    \Using_FPGA.Native_0 );
  output S;
  input \Using_FPGA.Native_0 ;

  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_391
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_396
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_401
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_406
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_411
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_416
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_421
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_426
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_431
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_436
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_441
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized37_446
   (ADDRARDADDR,
    I0,
    ADDRBWRADDR,
    Jump);
  output [0:0]ADDRARDADDR;
  input I0;
  input [0:0]ADDRBWRADDR;
  input Jump;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire I0;
  wire Jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(ADDRBWRADDR),
        .I2(Jump),
        .I3(1'b0),
        .O(ADDRARDADDR));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized5
   (\Using_FPGA.Native_0 ,
    D,
    I2,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 );
  output \Using_FPGA.Native_0 ;
  input [1:0]D;
  input I2;
  input [0:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;

  wire [1:0]D;
  wire I2;
  wire [0:0]\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native 
       (.I0(D[1]),
        .I1(D[0]),
        .I2(I2),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized7
   (\Using_FPGA.Native_0 ,
    D,
    I210_in,
    I2);
  output \Using_FPGA.Native_0 ;
  input [1:0]D;
  input I210_in;
  input I2;

  wire [1:0]D;
  wire I2;
  wire I210_in;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(D[1]),
        .I1(D[0]),
        .I2(I210_in),
        .I3(I2),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module controller_MB_LUT4__parameterized9
   (\Using_FPGA.Native_0 ,
    Reg1_Addr,
    \write_Addr_I_reg[0] ,
    Q);
  output \Using_FPGA.Native_0 ;
  input [1:0]Reg1_Addr;
  input \write_Addr_I_reg[0] ;
  input [0:0]Q;

  wire [0:0]Q;
  wire [1:0]Reg1_Addr;
  wire \Using_FPGA.Native_0 ;
  wire \write_Addr_I_reg[0] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Addr[1]),
        .I1(Reg1_Addr[0]),
        .I2(\write_Addr_I_reg[0] ),
        .I3(Q),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_456
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_460
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_464
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_468
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_472
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_476
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_480
   (D0_out,
    D,
    Reg1_Data,
    EX_Result,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input EX_Result;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire EX_Result;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(EX_Result),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_484
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_488
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_492
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    I3,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input I3;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire I3;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(I3),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_496
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    I3_0,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input I3_0;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire I3_0;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(I3_0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_500
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_504
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_508
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_512
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_516
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    PC_OF,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input PC_OF;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire PC_OF;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_520
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_524
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_528
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_532
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_536
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_540
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_544
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_548
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_552
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_556
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_560
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_564
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_568
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_572
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2_576
   (D0_out,
    D,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR);
  output D0_out;
  output D;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;

  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(\Result_Sel_reg[1] ),
        .I2(Res_Forward1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(1'b0),
        .I5(OpSel1_SPR),
        .O5(D0_out),
        .O6(D));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_618
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_620
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_622
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_624
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_626
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_628
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_630
   (DI,
    S,
    EX_Op2,
    ALU_Op,
    EX_Op1);
  output DI;
  output S;
  input EX_Op2;
  input [0:1]ALU_Op;
  input EX_Op1;

  wire [0:1]ALU_Op;
  wire DI;
  wire EX_Op1;
  wire EX_Op2;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(ALU_Op[0]),
        .I2(EX_Op1),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_632
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_634
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_636
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    Op1_Shift);
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input Op1_Shift;

  wire [0:1]ALU_Op;
  wire DI;
  wire Op1_Shift;
  wire S;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(Op1_Shift),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_638
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_640
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_642
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_644
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_646
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_648
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_650
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_652
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_654
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_656
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_658
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_660
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_662
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_664
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_666
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_668
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_670
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_672
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_674
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized28_676
   (DI,
    S,
    \Using_FPGA.Native_0 ,
    ALU_Op,
    \Using_FPGA.Native_1 );
  output DI;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:1]ALU_Op;
  input \Using_FPGA.Native_1 ;

  wire [0:1]ALU_Op;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ALU_Op[0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized32
   (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    EX_Op2,
    Op1_Low,
    \Using_FPGA.Native_0 );
  output \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input EX_Op2;
  input [0:1]Op1_Low;
  input \Using_FPGA.Native_0 ;

  wire EX_Op2;
  wire [0:1]Op1_Low;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7887877899996666)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Low[1]),
        .I2(\Using_FPGA.Native_0 ),
        .I3(Op1_Low[0]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .O6(\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized34
   (M_BE,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Byte,
    Doublet);
  output [1:0]M_BE;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Byte;
  input Doublet;

  wire Byte;
  wire Doublet;
  wire [1:0]M_BE;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2A2F2A2F8A8F8A8F)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Byte),
        .I3(Doublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(M_BE[0]),
        .O6(M_BE[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized36
   (M_BE,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Byte,
    Doublet);
  output [1:0]M_BE;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Byte;
  input Doublet;

  wire Byte;
  wire Doublet;
  wire [1:0]M_BE;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h151F151F454F454F)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Byte),
        .I3(Doublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(M_BE[0]),
        .O6(M_BE[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized38
   (O58_out,
    O67_out,
    Byte,
    Doublet);
  output O58_out;
  output O67_out;
  input Byte;
  input Doublet;

  wire Byte;
  wire Doublet;
  wire O58_out;
  wire O67_out;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h1111111155555555)) 
    \Using_FPGA.Native 
       (.I0(Byte),
        .I1(Doublet),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(O58_out),
        .O6(O67_out));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized40
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized42
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized44
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized46
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized48
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized50
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized52
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized54
   (DATA_INB,
    Data_Write,
    S);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input [0:1]S;

  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;
  wire [0:1]S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[0]),
        .I1(Data_Write[2]),
        .I2(Data_Write[1]),
        .I3(Data_Write[3]),
        .I4(S[0]),
        .I5(S[1]),
        .O5(DATA_INB[0]),
        .O6(DATA_INB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized56
   (DATA_INB,
    Data_Write,
    Byte);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input Byte;

  wire Byte;
  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[3]),
        .I1(Data_Write[1]),
        .I2(Data_Write[2]),
        .I3(Data_Write[0]),
        .I4(Byte),
        .I5(1'b1),
        .O5(DATA_INB[1]),
        .O6(DATA_INB[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized58
   (DATA_INB,
    Data_Write,
    Byte);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input Byte;

  wire Byte;
  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[3]),
        .I1(Data_Write[1]),
        .I2(Data_Write[2]),
        .I3(Data_Write[0]),
        .I4(Byte),
        .I5(1'b1),
        .O5(DATA_INB[1]),
        .O6(DATA_INB[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized60
   (DATA_INB,
    Data_Write,
    Byte);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input Byte;

  wire Byte;
  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[3]),
        .I1(Data_Write[1]),
        .I2(Data_Write[2]),
        .I3(Data_Write[0]),
        .I4(Byte),
        .I5(1'b1),
        .O5(DATA_INB[1]),
        .O6(DATA_INB[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module controller_MB_LUT6_2__parameterized62
   (DATA_INB,
    Data_Write,
    Byte);
  output [1:0]DATA_INB;
  input [3:0]Data_Write;
  input Byte;

  wire Byte;
  wire [1:0]DATA_INB;
  wire [3:0]Data_Write;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Data_Write[3]),
        .I1(Data_Write[1]),
        .I2(Data_Write[2]),
        .I3(Data_Write[0]),
        .I4(Byte),
        .I5(1'b1),
        .O5(DATA_INB[1]),
        .O6(DATA_INB[0]));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module controller_MB_MULT_AND
   (\Using_FPGA.Native_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 );
  output \Using_FPGA.Native_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;

  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_FPGA.Native_0 ;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module controller_MB_MULT_AND_616
   (DI,
    Carry_In);
  output DI;
  input Carry_In;

  wire Carry_In;
  wire DI;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(Carry_In),
        .I1(Carry_In),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module controller_MB_MULT_AND_678
   (DI,
    Op2,
    ALU_Op);
  output DI;
  input Op2;
  input [0:0]ALU_Op;

  wire [0:0]ALU_Op;
  wire DI;
  wire Op2;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(ALU_Op),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY
   (D0_in,
    S_0,
    LO,
    lopt);
  output D0_in;
  input S_0;
  input LO;
  input lopt;

  wire D0_in;
  wire LO;
  wire S_0;

  assign D0_in = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_23
   (LO,
    O,
    S,
    mul_Executing_reg,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output LO;
  output O;
  input S;
  input mul_Executing_reg;
  input \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  input lopt_8;

  wire LO;
  wire O;
  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire mul_Executing_reg;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_5 ,lopt}),
        .CYINIT(lopt_1),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],mul_Executing_reg,mul_Executing_reg,\^lopt_3 }),
        .O({\^lopt_8 ,O,\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({lopt_9,S,\^lopt_6 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_25
   (LO,
    O,
    S,
    mul_Executing_reg,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input mul_Executing_reg;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire LO;
  wire O;
  wire S;
  wire mul_Executing_reg;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_387
   (LO,
    O,
    S,
    DI,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input DI;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire DI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_390
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_395
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_400
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_405
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_410
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_415
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_420
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_425
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_430
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_435
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_440
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44);
  output LO;
  output O;
  input S;
  input Carry_Out;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  output lopt_17;
  input lopt_18;
  input lopt_19;
  output lopt_20;
  input lopt_21;
  input lopt_22;
  output lopt_23;
  input lopt_24;
  input lopt_25;
  output lopt_26;
  input lopt_27;
  input lopt_28;
  output lopt_29;
  output lopt_30;
  output lopt_31;
  output lopt_32;
  output lopt_33;
  input lopt_34;
  input lopt_35;
  output lopt_36;
  input lopt_37;
  input lopt_38;
  output lopt_39;
  input lopt_40;
  input lopt_41;
  output lopt_42;
  output lopt_43;
  output lopt_44;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire \^lopt_12 ;
  wire \^lopt_13 ;
  wire \^lopt_14 ;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire \^lopt_29 ;
  wire \^lopt_3 ;
  wire \^lopt_30 ;
  wire \^lopt_31 ;
  wire \^lopt_32 ;
  wire \^lopt_33 ;
  wire \^lopt_34 ;
  wire \^lopt_35 ;
  wire \^lopt_37 ;
  wire \^lopt_38 ;
  wire \^lopt_39 ;
  wire \^lopt_4 ;
  wire \^lopt_40 ;
  wire \^lopt_41 ;
  wire \^lopt_42 ;
  wire \^lopt_43 ;
  wire \^lopt_44 ;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_12  = lopt_11;
  assign \^lopt_13  = lopt_12;
  assign \^lopt_20  = lopt_18;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_23  = lopt_21;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_26  = lopt_24;
  assign \^lopt_27  = lopt_25;
  assign \^lopt_29  = lopt_27;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_30  = lopt_28;
  assign \^lopt_37  = lopt_34;
  assign \^lopt_38  = lopt_35;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_40  = lopt_37;
  assign \^lopt_41  = lopt_38;
  assign \^lopt_43  = lopt_40;
  assign \^lopt_44  = lopt_41;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_13 = \^lopt_14 ;
  assign lopt_14 = \^lopt_15 ;
  assign lopt_15 = \^lopt_16 ;
  assign lopt_16 = \^lopt_17 ;
  assign lopt_17 = \^lopt_18 ;
  assign lopt_20 = \^lopt_22 ;
  assign lopt_23 = \^lopt_25 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_29 = \^lopt_31 ;
  assign lopt_30 = \^lopt_32 ;
  assign lopt_31 = \^lopt_33 ;
  assign lopt_32 = \^lopt_34 ;
  assign lopt_33 = \^lopt_35 ;
  assign lopt_36 = \^lopt_39 ;
  assign lopt_39 = \^lopt_42 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_42 = lopt_45;
  assign lopt_43 = lopt_46;
  assign lopt_44 = lopt_47;
  assign lopt_7 = \^lopt_8 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_11 ),
        .CO({\^lopt_28 ,\^lopt_25 ,\^lopt_22 ,\^lopt_18 }),
        .CYINIT(1'b0),
        .DI({\^lopt_29 ,\^lopt_26 ,\^lopt_23 ,\^lopt_20 }),
        .O({\^lopt_34 ,\^lopt_33 ,\^lopt_32 ,\^lopt_31 }),
        .S({\^lopt_30 ,\^lopt_27 ,\^lopt_24 ,\^lopt_21 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_1
       (.CI(\^lopt_28 ),
        .CO({LO,\^lopt_42 ,\^lopt_39 ,\^lopt_35 }),
        .CYINIT(1'b0),
        .DI({1'b0,\^lopt_43 ,\^lopt_40 ,\^lopt_37 }),
        .O({O,lopt_47,lopt_46,lopt_45}),
        .S({S,\^lopt_44 ,\^lopt_41 ,\^lopt_38 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,lopt}),
        .CYINIT(lopt_1),
        .DI({\^lopt_12 ,\^lopt_9 ,\^lopt_6 ,\^lopt_3 }),
        .O({\^lopt_17 ,\^lopt_16 ,\^lopt_15 ,\^lopt_14 }),
        .S({\^lopt_13 ,\^lopt_10 ,\^lopt_7 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_445
   (I0,
    S,
    Carry_Out);
  output I0;
  input S;
  input Carry_Out;

  wire Carry_Out;
  wire I0;
  wire S;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I2_CARRY4 
       (.CI(Carry_Out),
        .CO(\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED [3:1],I0}),
        .S({\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED [3:1],S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_617
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire CI;
  wire DI;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_619
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_621
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_623
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_625
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_627
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_629
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_631
   (LO,
    EX_Result,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output LO;
  output EX_Result;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire DI;
  wire EX_Result;
  wire LO;
  wire S;

  assign EX_Result = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_633
   (LO,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  assign LO = lopt;
  assign \Using_B36_S4.The_BRAMs[7].RAMB36_I1  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_635
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_637
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_639
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_641
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_643
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_645
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_647
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_649
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_651
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_653
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_655
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_657
   (LO,
    lmb_reg_write_reg,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]lmb_reg_write_reg;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]lmb_reg_write_reg;

  assign LO = lopt;
  assign lmb_reg_write_reg = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_659
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_661
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_663
   (LO,
    ADDRBWRADDR,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]ADDRBWRADDR;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]ADDRBWRADDR;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ADDRBWRADDR = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_665
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_667
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_669
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_671
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_673
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_675
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_677
   (LO,
    BRAM_Addr_B,
    S,
    DI,
    EX_CarryOut,
    lopt,
    lopt_1);
  output LO;
  output [0:0]BRAM_Addr_B;
  input S;
  input DI;
  input EX_CarryOut;
  input lopt;
  input lopt_1;

  wire [0:0]BRAM_Addr_B;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign BRAM_Addr_B = lopt_1;
  assign LO = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module controller_MB_MUXCY_XORCY_679
   (LO,
    O,
    S,
    DI,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76,
    lopt_77,
    lopt_78,
    lopt_79,
    lopt_80,
    lopt_81,
    lopt_82,
    lopt_83,
    lopt_84,
    lopt_85,
    lopt_86,
    lopt_87,
    lopt_88,
    lopt_89,
    lopt_90,
    lopt_91,
    lopt_92,
    lopt_93,
    lopt_94,
    lopt_95,
    lopt_96,
    lopt_97,
    lopt_98,
    lopt_99,
    lopt_100,
    lopt_101,
    lopt_102,
    lopt_103,
    lopt_104,
    lopt_105,
    lopt_106,
    lopt_107,
    lopt_108,
    lopt_109,
    lopt_110,
    lopt_111,
    lopt_112,
    lopt_113,
    lopt_114,
    lopt_115,
    lopt_116,
    lopt_117,
    lopt_118,
    lopt_119,
    lopt_120,
    lopt_121,
    lopt_122,
    lopt_123,
    lopt_124,
    lopt_125,
    lopt_126,
    lopt_127,
    lopt_128,
    lopt_129,
    lopt_130,
    lopt_131,
    lopt_132,
    lopt_133,
    lopt_134,
    lopt_135,
    lopt_136);
  output LO;
  output O;
  input S;
  input DI;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  input lopt_17;
  input lopt_18;
  output lopt_19;
  input lopt_20;
  input lopt_21;
  output lopt_22;
  input lopt_23;
  input lopt_24;
  output lopt_25;
  input lopt_26;
  input lopt_27;
  output lopt_28;
  output lopt_29;
  output lopt_30;
  output lopt_31;
  output lopt_32;
  input lopt_33;
  input lopt_34;
  output lopt_35;
  input lopt_36;
  input lopt_37;
  output lopt_38;
  input lopt_39;
  input lopt_40;
  output lopt_41;
  input lopt_42;
  input lopt_43;
  output lopt_44;
  output lopt_45;
  output lopt_46;
  output lopt_47;
  output lopt_48;
  input lopt_49;
  input lopt_50;
  output lopt_51;
  input lopt_52;
  input lopt_53;
  output lopt_54;
  input lopt_55;
  input lopt_56;
  output lopt_57;
  input lopt_58;
  input lopt_59;
  output lopt_60;
  output lopt_61;
  output lopt_62;
  output lopt_63;
  output lopt_64;
  input lopt_65;
  input lopt_66;
  output lopt_67;
  input lopt_68;
  input lopt_69;
  output lopt_70;
  input lopt_71;
  input lopt_72;
  output lopt_73;
  input lopt_74;
  input lopt_75;
  output lopt_76;
  output lopt_77;
  output lopt_78;
  output lopt_79;
  output lopt_80;
  input lopt_81;
  input lopt_82;
  output lopt_83;
  input lopt_84;
  input lopt_85;
  output lopt_86;
  input lopt_87;
  input lopt_88;
  output lopt_89;
  input lopt_90;
  input lopt_91;
  output lopt_92;
  output lopt_93;
  output lopt_94;
  output lopt_95;
  output lopt_96;
  input lopt_97;
  input lopt_98;
  output lopt_99;
  input lopt_100;
  input lopt_101;
  output lopt_102;
  input lopt_103;
  input lopt_104;
  output lopt_105;
  input lopt_106;
  input lopt_107;
  output lopt_108;
  output lopt_109;
  output lopt_110;
  output lopt_111;
  output lopt_112;
  input lopt_113;
  input lopt_114;
  output lopt_115;
  input lopt_116;
  input lopt_117;
  output lopt_118;
  input lopt_119;
  input lopt_120;
  output lopt_121;
  input lopt_122;
  input lopt_123;
  output lopt_124;
  output lopt_125;
  output lopt_126;
  output lopt_127;
  output lopt_128;
  input lopt_129;
  input lopt_130;
  output lopt_131;
  input lopt_132;
  input lopt_133;
  output lopt_134;
  input lopt_135;
  input lopt_136;

  wire CI;
  wire DI;
  wire LO;
  wire O;
  wire S;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_100 ;
  wire \^lopt_101 ;
  wire \^lopt_102 ;
  wire \^lopt_104 ;
  wire \^lopt_105 ;
  wire \^lopt_106 ;
  wire \^lopt_107 ;
  wire \^lopt_108 ;
  wire \^lopt_109 ;
  wire \^lopt_11 ;
  wire \^lopt_110 ;
  wire \^lopt_111 ;
  wire \^lopt_112 ;
  wire \^lopt_113 ;
  wire \^lopt_114 ;
  wire \^lopt_115 ;
  wire \^lopt_116 ;
  wire \^lopt_117 ;
  wire \^lopt_118 ;
  wire \^lopt_119 ;
  wire \^lopt_12 ;
  wire \^lopt_121 ;
  wire \^lopt_122 ;
  wire \^lopt_123 ;
  wire \^lopt_124 ;
  wire \^lopt_125 ;
  wire \^lopt_126 ;
  wire \^lopt_127 ;
  wire \^lopt_128 ;
  wire \^lopt_129 ;
  wire \^lopt_13 ;
  wire \^lopt_130 ;
  wire \^lopt_131 ;
  wire \^lopt_132 ;
  wire \^lopt_133 ;
  wire \^lopt_134 ;
  wire \^lopt_135 ;
  wire \^lopt_136 ;
  wire lopt_138;
  wire lopt_139;
  wire \^lopt_14 ;
  wire lopt_140;
  wire lopt_141;
  wire lopt_142;
  wire lopt_143;
  wire lopt_144;
  wire lopt_145;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_19 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire \^lopt_29 ;
  wire \^lopt_3 ;
  wire \^lopt_30 ;
  wire \^lopt_31 ;
  wire \^lopt_32 ;
  wire \^lopt_33 ;
  wire \^lopt_34 ;
  wire \^lopt_36 ;
  wire \^lopt_37 ;
  wire \^lopt_38 ;
  wire \^lopt_39 ;
  wire \^lopt_4 ;
  wire \^lopt_40 ;
  wire \^lopt_41 ;
  wire \^lopt_42 ;
  wire \^lopt_43 ;
  wire \^lopt_44 ;
  wire \^lopt_45 ;
  wire \^lopt_46 ;
  wire \^lopt_47 ;
  wire \^lopt_48 ;
  wire \^lopt_49 ;
  wire \^lopt_5 ;
  wire \^lopt_50 ;
  wire \^lopt_51 ;
  wire \^lopt_53 ;
  wire \^lopt_54 ;
  wire \^lopt_55 ;
  wire \^lopt_56 ;
  wire \^lopt_57 ;
  wire \^lopt_58 ;
  wire \^lopt_59 ;
  wire \^lopt_6 ;
  wire \^lopt_60 ;
  wire \^lopt_61 ;
  wire \^lopt_62 ;
  wire \^lopt_63 ;
  wire \^lopt_64 ;
  wire \^lopt_65 ;
  wire \^lopt_66 ;
  wire \^lopt_67 ;
  wire \^lopt_68 ;
  wire \^lopt_7 ;
  wire \^lopt_70 ;
  wire \^lopt_71 ;
  wire \^lopt_72 ;
  wire \^lopt_73 ;
  wire \^lopt_74 ;
  wire \^lopt_75 ;
  wire \^lopt_76 ;
  wire \^lopt_77 ;
  wire \^lopt_78 ;
  wire \^lopt_79 ;
  wire \^lopt_8 ;
  wire \^lopt_80 ;
  wire \^lopt_81 ;
  wire \^lopt_82 ;
  wire \^lopt_83 ;
  wire \^lopt_84 ;
  wire \^lopt_85 ;
  wire \^lopt_87 ;
  wire \^lopt_88 ;
  wire \^lopt_89 ;
  wire \^lopt_9 ;
  wire \^lopt_90 ;
  wire \^lopt_91 ;
  wire \^lopt_92 ;
  wire \^lopt_93 ;
  wire \^lopt_94 ;
  wire \^lopt_95 ;
  wire \^lopt_96 ;
  wire \^lopt_97 ;
  wire \^lopt_98 ;
  wire \^lopt_99 ;
  wire [1:1]NLW_CARRY4_6_CO_UNCONNECTED;
  wire [3:0]NLW_CARRY4_6_O_UNCONNECTED;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_104  = lopt_97;
  assign \^lopt_105  = lopt_98;
  assign \^lopt_107  = lopt_100;
  assign \^lopt_108  = lopt_101;
  assign \^lopt_110  = lopt_103;
  assign \^lopt_111  = lopt_104;
  assign \^lopt_113  = lopt_106;
  assign \^lopt_114  = lopt_107;
  assign \^lopt_12  = lopt_11;
  assign \^lopt_121  = lopt_113;
  assign \^lopt_122  = lopt_114;
  assign \^lopt_124  = lopt_116;
  assign \^lopt_125  = lopt_117;
  assign \^lopt_127  = lopt_119;
  assign \^lopt_128  = lopt_120;
  assign \^lopt_13  = lopt_12;
  assign \^lopt_130  = lopt_122;
  assign \^lopt_131  = lopt_123;
  assign \^lopt_19  = lopt_17;
  assign \^lopt_20  = lopt_18;
  assign \^lopt_22  = lopt_20;
  assign \^lopt_23  = lopt_21;
  assign \^lopt_25  = lopt_23;
  assign \^lopt_26  = lopt_24;
  assign \^lopt_28  = lopt_26;
  assign \^lopt_29  = lopt_27;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_36  = lopt_33;
  assign \^lopt_37  = lopt_34;
  assign \^lopt_39  = lopt_36;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_40  = lopt_37;
  assign \^lopt_42  = lopt_39;
  assign \^lopt_43  = lopt_40;
  assign \^lopt_45  = lopt_42;
  assign \^lopt_46  = lopt_43;
  assign \^lopt_53  = lopt_49;
  assign \^lopt_54  = lopt_50;
  assign \^lopt_56  = lopt_52;
  assign \^lopt_57  = lopt_53;
  assign \^lopt_59  = lopt_55;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_60  = lopt_56;
  assign \^lopt_62  = lopt_58;
  assign \^lopt_63  = lopt_59;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_70  = lopt_65;
  assign \^lopt_71  = lopt_66;
  assign \^lopt_73  = lopt_68;
  assign \^lopt_74  = lopt_69;
  assign \^lopt_76  = lopt_71;
  assign \^lopt_77  = lopt_72;
  assign \^lopt_79  = lopt_74;
  assign \^lopt_80  = lopt_75;
  assign \^lopt_87  = lopt_81;
  assign \^lopt_88  = lopt_82;
  assign \^lopt_9  = lopt_8;
  assign \^lopt_90  = lopt_84;
  assign \^lopt_91  = lopt_85;
  assign \^lopt_93  = lopt_87;
  assign \^lopt_94  = lopt_88;
  assign \^lopt_96  = lopt_90;
  assign \^lopt_97  = lopt_91;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_102 = \^lopt_109 ;
  assign lopt_105 = \^lopt_112 ;
  assign lopt_108 = \^lopt_115 ;
  assign lopt_109 = \^lopt_116 ;
  assign lopt_110 = \^lopt_117 ;
  assign lopt_111 = \^lopt_118 ;
  assign lopt_112 = \^lopt_119 ;
  assign lopt_115 = \^lopt_123 ;
  assign lopt_118 = \^lopt_126 ;
  assign lopt_121 = \^lopt_129 ;
  assign lopt_124 = \^lopt_132 ;
  assign lopt_125 = \^lopt_133 ;
  assign lopt_126 = \^lopt_134 ;
  assign lopt_127 = \^lopt_135 ;
  assign lopt_128 = \^lopt_136 ;
  assign lopt_13 = \^lopt_14 ;
  assign lopt_131 = lopt_140;
  assign lopt_134 = lopt_143;
  assign lopt_138 = lopt_129;
  assign lopt_139 = lopt_130;
  assign lopt_14 = \^lopt_15 ;
  assign lopt_141 = lopt_132;
  assign lopt_142 = lopt_133;
  assign lopt_144 = lopt_135;
  assign lopt_145 = lopt_136;
  assign lopt_15 = \^lopt_16 ;
  assign lopt_16 = \^lopt_17 ;
  assign lopt_19 = \^lopt_21 ;
  assign lopt_22 = \^lopt_24 ;
  assign lopt_25 = \^lopt_27 ;
  assign lopt_28 = \^lopt_30 ;
  assign lopt_29 = \^lopt_31 ;
  assign lopt_30 = \^lopt_32 ;
  assign lopt_31 = \^lopt_33 ;
  assign lopt_32 = \^lopt_34 ;
  assign lopt_35 = \^lopt_38 ;
  assign lopt_38 = \^lopt_41 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_41 = \^lopt_44 ;
  assign lopt_44 = \^lopt_47 ;
  assign lopt_45 = \^lopt_48 ;
  assign lopt_46 = \^lopt_49 ;
  assign lopt_47 = \^lopt_50 ;
  assign lopt_48 = \^lopt_51 ;
  assign lopt_51 = \^lopt_55 ;
  assign lopt_54 = \^lopt_58 ;
  assign lopt_57 = \^lopt_61 ;
  assign lopt_60 = \^lopt_64 ;
  assign lopt_61 = \^lopt_65 ;
  assign lopt_62 = \^lopt_66 ;
  assign lopt_63 = \^lopt_67 ;
  assign lopt_64 = \^lopt_68 ;
  assign lopt_67 = \^lopt_72 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_70 = \^lopt_75 ;
  assign lopt_73 = \^lopt_78 ;
  assign lopt_76 = \^lopt_81 ;
  assign lopt_77 = \^lopt_82 ;
  assign lopt_78 = \^lopt_83 ;
  assign lopt_79 = \^lopt_84 ;
  assign lopt_80 = \^lopt_85 ;
  assign lopt_83 = \^lopt_89 ;
  assign lopt_86 = \^lopt_92 ;
  assign lopt_89 = \^lopt_95 ;
  assign lopt_92 = \^lopt_98 ;
  assign lopt_93 = \^lopt_99 ;
  assign lopt_94 = \^lopt_100 ;
  assign lopt_95 = \^lopt_101 ;
  assign lopt_96 = \^lopt_102 ;
  assign lopt_99 = \^lopt_106 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_27 ),
        .CO({\^lopt_44 ,\^lopt_41 ,\^lopt_38 ,\^lopt_34 }),
        .CYINIT(1'b0),
        .DI({\^lopt_45 ,\^lopt_42 ,\^lopt_39 ,\^lopt_36 }),
        .O({\^lopt_50 ,\^lopt_49 ,\^lopt_48 ,\^lopt_47 }),
        .S({\^lopt_46 ,\^lopt_43 ,\^lopt_40 ,\^lopt_37 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_1
       (.CI(\^lopt_44 ),
        .CO({\^lopt_61 ,\^lopt_58 ,\^lopt_55 ,\^lopt_51 }),
        .CYINIT(1'b0),
        .DI({\^lopt_62 ,\^lopt_59 ,\^lopt_56 ,\^lopt_53 }),
        .O({\^lopt_67 ,\^lopt_66 ,\^lopt_65 ,\^lopt_64 }),
        .S({\^lopt_63 ,\^lopt_60 ,\^lopt_57 ,\^lopt_54 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_2
       (.CI(\^lopt_61 ),
        .CO({\^lopt_78 ,\^lopt_75 ,\^lopt_72 ,\^lopt_68 }),
        .CYINIT(1'b0),
        .DI({\^lopt_79 ,\^lopt_76 ,\^lopt_73 ,\^lopt_70 }),
        .O({\^lopt_84 ,\^lopt_83 ,\^lopt_82 ,\^lopt_81 }),
        .S({\^lopt_80 ,\^lopt_77 ,\^lopt_74 ,\^lopt_71 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_3
       (.CI(\^lopt_78 ),
        .CO({\^lopt_95 ,\^lopt_92 ,\^lopt_89 ,\^lopt_85 }),
        .CYINIT(1'b0),
        .DI({\^lopt_96 ,\^lopt_93 ,\^lopt_90 ,\^lopt_87 }),
        .O({\^lopt_101 ,\^lopt_100 ,\^lopt_99 ,\^lopt_98 }),
        .S({\^lopt_97 ,\^lopt_94 ,\^lopt_91 ,\^lopt_88 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_4
       (.CI(\^lopt_95 ),
        .CO({\^lopt_112 ,\^lopt_109 ,\^lopt_106 ,\^lopt_102 }),
        .CYINIT(1'b0),
        .DI({\^lopt_113 ,\^lopt_110 ,\^lopt_107 ,\^lopt_104 }),
        .O({\^lopt_118 ,\^lopt_117 ,\^lopt_116 ,\^lopt_115 }),
        .S({\^lopt_114 ,\^lopt_111 ,\^lopt_108 ,\^lopt_105 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_5
       (.CI(\^lopt_112 ),
        .CO({\^lopt_129 ,\^lopt_126 ,\^lopt_123 ,\^lopt_119 }),
        .CYINIT(1'b0),
        .DI({\^lopt_130 ,\^lopt_127 ,\^lopt_124 ,\^lopt_121 }),
        .O({\^lopt_135 ,\^lopt_134 ,\^lopt_133 ,\^lopt_132 }),
        .S({\^lopt_131 ,\^lopt_128 ,\^lopt_125 ,\^lopt_122 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_6
       (.CI(\^lopt_129 ),
        .CO({lopt_143,lopt_140,NLW_CARRY4_6_CO_UNCONNECTED[1],\^lopt_136 }),
        .CYINIT(1'b0),
        .DI({lopt_144,lopt_141,DI,lopt_138}),
        .O({NLW_CARRY4_6_O_UNCONNECTED[3:2],O,NLW_CARRY4_6_O_UNCONNECTED[0]}),
        .S({lopt_145,lopt_142,S,lopt_139}));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,lopt}),
        .CYINIT(lopt_1),
        .DI({\^lopt_12 ,\^lopt_9 ,\^lopt_6 ,\^lopt_3 }),
        .O({\^lopt_16 ,\^lopt_15 ,\^lopt_14 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_13 ,\^lopt_10 ,\^lopt_7 ,\^lopt_4 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\^lopt_11 ),
        .CO({\^lopt_27 ,\^lopt_24 ,\^lopt_21 ,\^lopt_17 }),
        .CYINIT(1'b0),
        .DI({\^lopt_28 ,\^lopt_25 ,\^lopt_22 ,\^lopt_19 }),
        .O({\^lopt_33 ,\^lopt_32 ,\^lopt_31 ,\^lopt_30 }),
        .S({\^lopt_29 ,\^lopt_26 ,\^lopt_23 ,\^lopt_20 }));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_312
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_313
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_314
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_315
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_316
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_317
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_318
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_319
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_320
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_321
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_322
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_323
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_324
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_325
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_326
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_327
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_328
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_329
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_330
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_331
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_332
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_333
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_334
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_335
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_336
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_337
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_338
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_339
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_340
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_341
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_342
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_343
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_344
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_345
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_346
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_347
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_348
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_349
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_350
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_351
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_352
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_353
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_354
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_355
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_356
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_357
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_358
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_359
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_360
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_361
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_362
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_363
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_364
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_365
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_366
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_367
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_368
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_369
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_370
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_371
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_372
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_373
   (Reg1_Data,
    Data_Write,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg1_Data),
        .DPRA0(Reg1_Addr[0]),
        .DPRA1(Reg1_Addr[1]),
        .DPRA2(Reg1_Addr[2]),
        .DPRA3(Reg1_Addr[3]),
        .DPRA4(Reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module controller_MB_RAM32X1D_374
   (Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Imm_Value);
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:4]Write_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(Write_Addr[0]),
        .A1(Write_Addr[1]),
        .A2(Write_Addr[2]),
        .A3(Write_Addr[3]),
        .A4(Write_Addr[4]),
        .D(EX_Result),
        .DPO(Reg2_Data),
        .DPRA0(Imm_Value[4]),
        .DPRA1(Imm_Value[3]),
        .DPRA2(Imm_Value[2]),
        .DPRA3(Imm_Value[1]),
        .DPRA4(Imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E
   (\Result_Sel_reg[0] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    D,
    \Size_17to32.imm_Reg_reg[15] ,
    write_Carry_I_reg,
    \Using_FPGA.Native_1 ,
    use_Reg_Neg_DI_i28_out,
    \Using_FPGA.Native_2 ,
    force_Val1_i29_out,
    use_Reg_Neg_S_i30_out,
    force1_i31_out,
    \Using_FPGA.enable_Interrupts_I_reg ,
    is_lwx_I_reg,
    Compare_Instr_reg,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    writing_reg,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    MSR,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 );
  output \Result_Sel_reg[0] ;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output D;
  output \Size_17to32.imm_Reg_reg[15] ;
  output write_Carry_I_reg;
  output \Using_FPGA.Native_1 ;
  output use_Reg_Neg_DI_i28_out;
  output \Using_FPGA.Native_2 ;
  output force_Val1_i29_out;
  output use_Reg_Neg_S_i30_out;
  output force1_i31_out;
  output \Using_FPGA.enable_Interrupts_I_reg ;
  output is_lwx_I_reg;
  output Compare_Instr_reg;
  output \Using_FPGA.set_BIP_I_reg ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output writing_reg;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input [1:0]MSR;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;

  wire CI;
  wire Clk;
  wire Compare_Instr_reg;
  wire D;
  wire [0:0]DATA_OUTA;
  wire [1:0]MSR;
  wire \Result_Sel_reg[0] ;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire force1_i31_out;
  wire force_Val1_i29_out;
  wire is_lwx_I_reg;
  wire use_Reg_Neg_DI_i28_out;
  wire use_Reg_Neg_S_i30_out;
  wire write_Carry_I_reg;
  wire writing_reg;

  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h1)) 
    Compare_Instr_i_2
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(Compare_Instr_reg));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[0].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_6 ),
        .A1(\Using_FPGA.Native_7 ),
        .A2(\Using_FPGA.Native_8 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Result_Sel_reg[0] ));
  LUT6 #(
    .INIT(64'hAAABAAAABBBBBBBB)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(\Result_Sel_reg[0] ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I5(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__123 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(MSR[0]),
        .O(\Using_FPGA.Native_3 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__128 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(MSR[1]),
        .O(\Using_FPGA.Native_5 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h2008)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .O(use_Reg_Neg_DI_i28_out));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .O(force_Val1_i29_out));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h2008)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .O(use_Reg_Neg_S_i30_out));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .I5(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h02000000)) 
    \Using_FPGA.Native_i_2__38 
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .O(\Using_FPGA.set_BIP_I_reg ));
  LUT6 #(
    .INIT(64'h0101010101010001)) 
    \Using_FPGA.Native_i_2__42 
       (.I0(\Using_FPGA.set_BIP_I_reg ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .I4(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .I5(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .O(\Using_FPGA.Native_4 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    \Using_FPGA.Native_i_2__73 
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .O(force1_i31_out));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I5(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hDFFF)) 
    \Using_FPGA.enable_Interrupts_I_i_2 
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .O(\Using_FPGA.enable_Interrupts_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h7)) 
    is_lwx_I_i_4
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(is_lwx_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'hFFDF)) 
    mbar_decode_I_i_2
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(\Size_17to32.imm_Reg_reg[15] ));
  LUT6 #(
    .INIT(64'hFE000000FEFEFEFE)) 
    write_Carry_I_i_2
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I3(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ),
        .I5(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(write_Carry_I_reg));
  LUT4 #(
    .INIT(16'h0800)) 
    writing_i_1
       (.I0(\Result_Sel_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .O(writing_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_26
   (\write_Addr_I_reg[4] ,
    \write_Addr_I_reg[4]_0 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    out,
    \Using_FPGA.take_Intr_2nd_Phase_reg );
  output \write_Addr_I_reg[4] ;
  output [0:0]\write_Addr_I_reg[4]_0 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input [0:0]out;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]out;
  wire \write_Addr_I_reg[4] ;
  wire [0:0]\write_Addr_I_reg[4]_0 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[10].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\write_Addr_I_reg[4] ));
  LUT3 #(
    .INIT(8'h04)) 
    \write_Addr_I[4]_i_1 
       (.I0(out),
        .I1(\write_Addr_I_reg[4] ),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\write_Addr_I_reg[4]_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_27
   (jump2_I_reg,
    inHibit_EX_reg,
    \Using_FPGA.set_BIP_I_reg ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    p_1_in48_in,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    mul_Executing_reg,
    \Using_FPGA.set_BIP_I_reg_0 );
  output jump2_I_reg;
  output inHibit_EX_reg;
  output \Using_FPGA.set_BIP_I_reg ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input p_1_in48_in;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input mul_Executing_reg;
  input \Using_FPGA.set_BIP_I_reg_0 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire inHibit_EX_reg;
  wire jump2_I_reg;
  wire mul_Executing_reg;
  wire p_1_in48_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[11].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(jump2_I_reg));
  LUT5 #(
    .INIT(32'h40FF4000)) 
    \Using_FPGA.set_BIP_I_i_2 
       (.I0(jump2_I_reg),
        .I1(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .I3(mul_Executing_reg),
        .I4(\Using_FPGA.set_BIP_I_reg_0 ),
        .O(\Using_FPGA.set_BIP_I_reg ));
  LUT5 #(
    .INIT(32'hCAFFFFFF)) 
    inHibit_EX_i_3
       (.I0(jump2_I_reg),
        .I1(p_1_in48_in),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(inHibit_EX_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_28
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[12].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_29
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[13].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_30
   (mbar_decode_I_reg,
    mbar_hold_I_reg,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 );
  output mbar_decode_I_reg;
  output mbar_hold_I_reg;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire mbar_decode_I_reg;
  wire mbar_hold_I_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[14].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(mbar_decode_I_reg));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    mbar_first_i_2
       (.I0(mbar_decode_I_reg),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(mbar_hold_I_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_31
   (Reg1_Addr,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Reg1_Addr;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Reg1_Addr;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[15].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Reg1_Addr));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_32
   (\Size_17to32.imm_Reg_reg[0] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    Clk,
    EX_Result,
    Res_Forward2,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg2_Data,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Imm_Value,
    \Size_17to32.imm_Reg_reg[0]_0 ,
    Use_Imm_Reg,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] );
  output \Size_17to32.imm_Reg_reg[0] ;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input Clk;
  input [0:31]EX_Result;
  input Res_Forward2;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:31]Reg2_Data;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [12:0]Imm_Value;
  input [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  input Use_Imm_Reg;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:31]EX_Result;
  wire [12:0]Imm_Value;
  wire [0:31]Reg2_Data;
  wire Res_Forward2;
  wire \Size_17to32.imm_Reg_reg[0] ;
  wire [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  wire Use_Imm_Reg;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_2__14_n_0 ;
  wire \Using_FPGA.Native_i_2__15_n_0 ;
  wire \Using_FPGA.Native_i_2__16_n_0 ;
  wire \Using_FPGA.Native_i_2__17_n_0 ;
  wire \Using_FPGA.Native_i_2__18_n_0 ;
  wire \Using_FPGA.Native_i_2__19_n_0 ;
  wire \Using_FPGA.Native_i_2__20_n_0 ;
  wire \Using_FPGA.Native_i_2__21_n_0 ;
  wire \Using_FPGA.Native_i_2__22_n_0 ;
  wire \Using_FPGA.Native_i_2__23_n_0 ;
  wire \Using_FPGA.Native_i_2__24_n_0 ;
  wire \Using_FPGA.Native_i_2__25_n_0 ;
  wire \Using_FPGA.Native_i_2__26_n_0 ;
  wire \Using_FPGA.Native_i_2__27_n_0 ;
  wire \Using_FPGA.Native_i_2__28_n_0 ;
  wire \Using_FPGA.Native_i_2__29_n_0 ;
  wire \Using_FPGA.Native_i_2__30_n_0 ;
  wire \Using_FPGA.Native_i_2__31_n_0 ;
  wire \Using_FPGA.Native_i_2__32_n_0 ;
  wire \Using_FPGA.Native_i_2__33_n_0 ;
  wire \Using_FPGA.Native_i_2__34_n_0 ;
  wire \Using_FPGA.Native_i_2__35_n_0 ;
  wire \Using_FPGA.Native_i_2__36_n_0 ;
  wire \Using_FPGA.Native_i_2__67_n_0 ;
  wire \Using_FPGA.Native_i_2__68_n_0 ;
  wire \Using_FPGA.Native_i_2__69_n_0 ;
  wire \Using_FPGA.Native_i_2__70_n_0 ;
  wire \Using_FPGA.Native_i_2__71_n_0 ;
  wire \Using_FPGA.Native_i_2__72_n_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[16].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_31 ),
        .A1(\Using_FPGA.Native_32 ),
        .A2(\Using_FPGA.Native_33 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Size_17to32.imm_Reg_reg[0] ));
  LUT6 #(
    .INIT(64'h0B08FFFF0B080000)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(EX_Result[31]),
        .I1(Res_Forward2),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Reg2_Data[31]),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I5(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0B08FFFF0B080000)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(EX_Result[30]),
        .I1(Res_Forward2),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Reg2_Data[30]),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I5(Imm_Value[0]),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(\Using_FPGA.Native_i_2__71_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[2]),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(\Using_FPGA.Native_i_2__70_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[3]),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(\Using_FPGA.Native_i_2__69_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[4]),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h3202FFFF32020000)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(Reg2_Data[16]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[16]),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I5(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(\Using_FPGA.Native_i_2__36_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [0]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_5 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(\Using_FPGA.Native_i_2__35_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [1]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_6 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(\Using_FPGA.Native_i_2__34_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [2]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_7 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(\Using_FPGA.Native_i_2__33_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [3]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_8 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(\Using_FPGA.Native_i_2__32_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [4]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_9 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(\Using_FPGA.Native_i_2__31_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [5]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_10 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(\Using_FPGA.Native_i_2__30_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [6]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_11 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(\Using_FPGA.Native_i_2__29_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [7]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_12 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(\Using_FPGA.Native_i_2__28_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [8]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_13 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(\Using_FPGA.Native_i_2__27_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [9]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_14 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(\Using_FPGA.Native_i_2__26_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [10]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_15 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(\Using_FPGA.Native_i_2__25_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [11]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_16 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(\Using_FPGA.Native_i_2__24_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [12]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_17 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(\Using_FPGA.Native_i_2__23_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [13]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_18 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(\Using_FPGA.Native_i_2__22_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [14]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_19 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(\Using_FPGA.Native_i_2__21_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Size_17to32.imm_Reg_reg[0]_0 [15]),
        .I3(Use_Imm_Reg),
        .I4(\Size_17to32.imm_Reg_reg[0] ),
        .O(\Using_FPGA.Native_20 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(\Using_FPGA.Native_i_2__72_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[1]),
        .O(\Using_FPGA.Native_21 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(\Using_FPGA.Native_i_2__68_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[5]),
        .O(\Using_FPGA.Native_22 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(\Using_FPGA.Native_i_2__67_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[6]),
        .O(\Using_FPGA.Native_23 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(\Using_FPGA.Native_i_2__14_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[7]),
        .O(\Using_FPGA.Native_24 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(\Using_FPGA.Native_i_2__15_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[8]),
        .O(\Using_FPGA.Native_25 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(\Using_FPGA.Native_i_2__16_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[9]),
        .O(\Using_FPGA.Native_26 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(\Using_FPGA.Native_i_2__17_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[10]),
        .O(\Using_FPGA.Native_27 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(\Using_FPGA.Native_i_2__18_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[11]),
        .O(\Using_FPGA.Native_28 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(\Using_FPGA.Native_i_2__19_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(Imm_Value[12]),
        .O(\Using_FPGA.Native_29 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(\Using_FPGA.Native_i_2__20_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .O(\Using_FPGA.Native_30 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(Reg2_Data[23]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[23]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [6]),
        .O(\Using_FPGA.Native_i_2__14_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(Reg2_Data[22]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[22]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [7]),
        .O(\Using_FPGA.Native_i_2__15_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(Reg2_Data[21]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[21]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [8]),
        .O(\Using_FPGA.Native_i_2__16_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(Reg2_Data[20]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[20]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [9]),
        .O(\Using_FPGA.Native_i_2__17_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(Reg2_Data[19]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[19]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [10]),
        .O(\Using_FPGA.Native_i_2__18_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(Reg2_Data[18]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[18]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [11]),
        .O(\Using_FPGA.Native_i_2__19_n_0 ));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(Reg2_Data[17]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[17]),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [12]),
        .O(\Using_FPGA.Native_i_2__20_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(Reg2_Data[0]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[0]),
        .O(\Using_FPGA.Native_i_2__21_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(Reg2_Data[1]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[1]),
        .O(\Using_FPGA.Native_i_2__22_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(Reg2_Data[2]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[2]),
        .O(\Using_FPGA.Native_i_2__23_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(Reg2_Data[3]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[3]),
        .O(\Using_FPGA.Native_i_2__24_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(Reg2_Data[4]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[4]),
        .O(\Using_FPGA.Native_i_2__25_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(Reg2_Data[5]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[5]),
        .O(\Using_FPGA.Native_i_2__26_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(Reg2_Data[6]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[6]),
        .O(\Using_FPGA.Native_i_2__27_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(Reg2_Data[7]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[7]),
        .O(\Using_FPGA.Native_i_2__28_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(Reg2_Data[8]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[8]),
        .O(\Using_FPGA.Native_i_2__29_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(Reg2_Data[9]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[9]),
        .O(\Using_FPGA.Native_i_2__30_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__31 
       (.I0(Reg2_Data[10]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[10]),
        .O(\Using_FPGA.Native_i_2__31_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__32 
       (.I0(Reg2_Data[11]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[11]),
        .O(\Using_FPGA.Native_i_2__32_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__33 
       (.I0(Reg2_Data[12]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[12]),
        .O(\Using_FPGA.Native_i_2__33_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__34 
       (.I0(Reg2_Data[13]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[13]),
        .O(\Using_FPGA.Native_i_2__34_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__35 
       (.I0(Reg2_Data[14]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[14]),
        .O(\Using_FPGA.Native_i_2__35_n_0 ));
  LUT4 #(
    .INIT(16'h3202)) 
    \Using_FPGA.Native_i_2__36 
       (.I0(Reg2_Data[15]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(Res_Forward2),
        .I3(EX_Result[15]),
        .O(\Using_FPGA.Native_i_2__36_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__67 
       (.I0(EX_Result[24]),
        .I1(Reg2_Data[24]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [5]),
        .O(\Using_FPGA.Native_i_2__67_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__68 
       (.I0(EX_Result[25]),
        .I1(Reg2_Data[25]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [4]),
        .O(\Using_FPGA.Native_i_2__68_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__69 
       (.I0(EX_Result[26]),
        .I1(Reg2_Data[26]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [3]),
        .O(\Using_FPGA.Native_i_2__69_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__70 
       (.I0(EX_Result[27]),
        .I1(Reg2_Data[27]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [2]),
        .O(\Using_FPGA.Native_i_2__70_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__71 
       (.I0(EX_Result[28]),
        .I1(Reg2_Data[28]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [1]),
        .O(\Using_FPGA.Native_i_2__71_n_0 ));
  LUT5 #(
    .INIT(32'hFAFC0A0C)) 
    \Using_FPGA.Native_i_2__72 
       (.I0(EX_Result[29]),
        .I1(Reg2_Data[29]),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(Res_Forward2),
        .I4(\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] [0]),
        .O(\Using_FPGA.Native_i_2__72_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_33
   (\Size_17to32.imm_Reg_reg[1] ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Size_17to32.imm_Reg_reg[1] ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Size_17to32.imm_Reg_reg[1] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[17].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Size_17to32.imm_Reg_reg[1] ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_34
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[18].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_35
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[19].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_36
   (\Result_Sel_reg[1] ,
    reset_BIP_I8_out,
    \Using_FPGA.Native ,
    mtsmsr_write_i_reg,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 );
  output \Result_Sel_reg[1] ;
  output reset_BIP_I8_out;
  output \Using_FPGA.Native ;
  output mtsmsr_write_i_reg;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire mtsmsr_write_i_i_3_n_0;
  wire mtsmsr_write_i_reg;
  wire reset_BIP_I8_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[1].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_0 ),
        .A1(\Using_FPGA.Native_1 ),
        .A2(\Using_FPGA.Native_2 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Result_Sel_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native_i_3__4 
       (.I0(\Result_Sel_reg[1] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \Using_FPGA.reset_BIP_I_i_1 
       (.I0(\Result_Sel_reg[1] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(reset_BIP_I8_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFAEFFFFFF)) 
    mtsmsr_write_i_i_2
       (.I0(mtsmsr_write_i_i_3_n_0),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(\Result_Sel_reg[1] ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I5(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(mtsmsr_write_i_reg));
  LUT4 #(
    .INIT(16'hBFFF)) 
    mtsmsr_write_i_i_3
       (.I0(\Result_Sel_reg[1] ),
        .I1(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(mtsmsr_write_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_37
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[20].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_38
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[21].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_388
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[29].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_39
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[22].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_392
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[28].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_397
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 );
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[27].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__124 
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_40
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[23].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_402
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 );
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[26].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__125 
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_407
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 );
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[25].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__126 
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_41
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[24].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_412
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 );
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[24].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__127 
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_417
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[23].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_42
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[25].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_422
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[22].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_427
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[21].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_43
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[26].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_432
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[20].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_437
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[19].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_44
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[27].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_442
   (\Using_FPGA.Native ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native_0 ,
    Buffer_Addr,
    Clk);
  output \Using_FPGA.Native ;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native_0 ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[18].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native_0 ),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_447
   (PC_OF,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.Native ,
    Buffer_Addr,
    Clk);
  output PC_OF;
  input nonvalid_IFetch_n_reg;
  input \Using_FPGA.Native ;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire PC_OF;
  wire \Using_FPGA.Native ;
  wire nonvalid_IFetch_n_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.PC_GEN[17].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(nonvalid_IFetch_n_reg),
        .CLK(Clk),
        .D(\Using_FPGA.Native ),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_45
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[28].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_46
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[29].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_47
   (Compare_Instr_reg,
    write_Reg_reg,
    write_Reg_reg_0,
    is_swx_I_reg,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    Imm_Value);
  output Compare_Instr_reg;
  output write_Reg_reg;
  output write_Reg_reg_0;
  output is_swx_I_reg;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input [0:0]Imm_Value;

  wire CI;
  wire Clk;
  wire Compare_Instr_reg;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire is_swx_I_reg;
  wire write_Reg_i_6_n_0;
  wire write_Reg_reg;
  wire write_Reg_reg_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[2].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Compare_Instr_reg));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    \Using_FPGA.Native_i_3__3 
       (.I0(Compare_Instr_reg),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(write_Reg_reg_0));
  LUT3 #(
    .INIT(8'h40)) 
    is_swx_I_i_2
       (.I0(Compare_Instr_reg),
        .I1(Imm_Value),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(is_swx_I_reg));
  LUT5 #(
    .INIT(32'h74447777)) 
    write_Reg_i_4
       (.I0(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(write_Reg_reg_0),
        .I3(\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .I4(write_Reg_i_6_n_0),
        .O(write_Reg_reg));
  LUT6 #(
    .INIT(64'h003FFFFF0077FFFF)) 
    write_Reg_i_6
       (.I0(Compare_Instr_reg),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .I5(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(write_Reg_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_48
   (Imm_Value,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]Imm_Value;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[30].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Imm_Value));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_49
   (\Size_17to32.imm_Reg_reg[15] ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Size_17to32.imm_Reg_reg[15] ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[31].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Size_17to32.imm_Reg_reg[15] ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_50
   (Select_Logic_reg,
    is_swx_I_reg,
    mbar_hold_I_reg,
    jump2_I_reg,
    \Using_FPGA.Native ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_FPGA.Native_3 ,
    inHibit_EX,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 );
  output Select_Logic_reg;
  output is_swx_I_reg;
  output mbar_hold_I_reg;
  output jump2_I_reg;
  output \Using_FPGA.Native ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_FPGA.Native_3 ;
  input inHibit_EX;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire inHibit_EX;
  wire is_swx_I_reg;
  wire jump2_I_reg;
  wire mbar_hold_I_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[3].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_0 ),
        .A1(\Using_FPGA.Native_1 ),
        .A2(\Using_FPGA.Native_2 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(Select_Logic_reg));
  LUT5 #(
    .INIT(32'h000400F0)) 
    \Using_FPGA.Native_i_1__120 
       (.I0(mbar_hold_I_reg),
        .I1(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.Native_i_4 
       (.I0(Select_Logic_reg),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .O(mbar_hold_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'h08)) 
    is_swx_I_i_3
       (.I0(Select_Logic_reg),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .O(is_swx_I_reg));
  LUT5 #(
    .INIT(32'hFFDFDFDF)) 
    jump2_I_i_2
       (.I0(Select_Logic_reg),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(inHibit_EX),
        .O(jump2_I_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_51
   (\Logic_Oper_reg[0] ,
    using_Imm_reg,
    of_mbar_decode,
    enable_Interrupts_I,
    Reg_Test_Equal_N_i7_out,
    \Using_FPGA.Native ,
    is_lwx_I0,
    \Using_FPGA.Native_0 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Clk,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    Imm_Value,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 );
  output \Logic_Oper_reg[0] ;
  output using_Imm_reg;
  output of_mbar_decode;
  output enable_Interrupts_I;
  output Reg_Test_Equal_N_i7_out;
  output \Using_FPGA.Native ;
  output is_lwx_I0;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input [0:0]Imm_Value;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [0:0]Imm_Value;
  wire \Logic_Oper_reg[0] ;
  wire Reg_Test_Equal_N_i7_out;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire enable_Interrupts_I;
  wire is_lwx_I0;
  wire of_mbar_decode;
  wire using_Imm_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[4].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_1 ),
        .A1(\Using_FPGA.Native_2 ),
        .A2(\Using_FPGA.Native_3 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Logic_Oper_reg[0] ));
  LUT5 #(
    .INIT(32'h00000028)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I3(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I4(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .O(Reg_Test_Equal_N_i7_out));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(\Logic_Oper_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_3__6 
       (.I0(\Logic_Oper_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \Using_FPGA.enable_Interrupts_I_i_1 
       (.I0(\Logic_Oper_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 ),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(enable_Interrupts_I));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    is_lwx_I_i_2
       (.I0(\Logic_Oper_reg[0] ),
        .I1(Imm_Value),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 ),
        .O(is_lwx_I0));
  LUT5 #(
    .INIT(32'h00000800)) 
    mbar_decode_I_i_1
       (.I0(\Logic_Oper_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 ),
        .I3(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I4(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(of_mbar_decode));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    using_Imm_i_2
       (.I0(\Logic_Oper_reg[0] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(using_Imm_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_52
   (\Logic_Oper_reg[1] ,
    write_Reg_reg,
    Sign_Extend_reg,
    Sext16_reg,
    jump2_I_reg,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    Imm_Value,
    out,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    mul_Executing_reg,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    p_1_in48_in,
    inHibit_EX_reg);
  output \Logic_Oper_reg[1] ;
  output write_Reg_reg;
  output Sign_Extend_reg;
  output Sext16_reg;
  output jump2_I_reg;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input [1:0]Imm_Value;
  input [0:0]out;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input mul_Executing_reg;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input p_1_in48_in;
  input inHibit_EX_reg;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire [1:0]Imm_Value;
  wire \Logic_Oper_reg[1] ;
  wire Sext16_reg;
  wire Sign_Extend_reg;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire inHibit_EX_reg;
  wire jump2_I_reg;
  wire mul_Executing_reg;
  wire [0:0]out;
  wire p_1_in48_in;
  wire write_Reg_reg;

  LUT4 #(
    .INIT(16'hFBAA)) 
    Sext8_i_2
       (.I0(out),
        .I1(Sign_Extend_reg),
        .I2(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I3(mul_Executing_reg),
        .O(Sext16_reg));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    Sign_Extend_i_2
       (.I0(\Logic_Oper_reg[1] ),
        .I1(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 ),
        .I3(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I4(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I5(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 ),
        .O(Sign_Extend_reg));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[5].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Logic_Oper_reg[1] ));
  LUT6 #(
    .INIT(64'h00000000EAC86240)) 
    jump2_I_i_1
       (.I0(\Logic_Oper_reg[1] ),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(p_1_in48_in),
        .I5(inHibit_EX_reg),
        .O(jump2_I_reg));
  LUT3 #(
    .INIT(8'h57)) 
    write_Reg_i_3
       (.I0(Sign_Extend_reg),
        .I1(Imm_Value[0]),
        .I2(Imm_Value[1]),
        .O(write_Reg_reg));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_53
   (p_1_in48_in,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output p_1_in48_in;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire p_1_in48_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[6].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(p_1_in48_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_54
   (\write_Addr_I_reg[1] ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    out);
  output [0:0]\write_Addr_I_reg[1] ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]out;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]out;
  wire [0:0]\write_Addr_I_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[7].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \write_Addr_I[1]_i_2 
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(out),
        .O(\write_Addr_I_reg[1] ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_55
   (\write_Addr_I_reg[2] ,
    \write_Addr_I_reg[2]_0 ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    out);
  output \write_Addr_I_reg[2] ;
  output [0:0]\write_Addr_I_reg[2]_0 ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]out;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]out;
  wire \write_Addr_I_reg[2] ;
  wire [0:0]\write_Addr_I_reg[2]_0 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[8].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native ),
        .A1(\Using_FPGA.Native_0 ),
        .A2(\Using_FPGA.Native_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\write_Addr_I_reg[2] ));
  LUT3 #(
    .INIT(8'h0E)) 
    \write_Addr_I[2]_i_1 
       (.I0(\write_Addr_I_reg[2] ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(out),
        .O(\write_Addr_I_reg[2]_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module controller_MB_SRL16E_56
   (\Using_FPGA.Native ,
    Reg_Test_Equal_i,
    \write_Addr_I_reg[3] ,
    \Using_FPGA.reset_BIP_I_reg ,
    CI,
    DATA_OUTA,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    out,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 );
  output \Using_FPGA.Native ;
  output Reg_Test_Equal_i;
  output [0:0]\write_Addr_I_reg[3] ;
  output \Using_FPGA.reset_BIP_I_reg ;
  input CI;
  input [0:0]DATA_OUTA;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  input [0:0]out;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;

  wire CI;
  wire Clk;
  wire [0:0]DATA_OUTA;
  wire Reg_Test_Equal_i;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.reset_BIP_I_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]out;
  wire [0:0]\write_Addr_I_reg[3] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\microblaze_I/MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[9].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FPGA.Native_0 ),
        .A1(\Using_FPGA.Native_1 ),
        .A2(\Using_FPGA.Native_2 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(DATA_OUTA),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFEEFFFFF)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .I4(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .O(Reg_Test_Equal_i));
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.reset_BIP_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .I3(\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .O(\Using_FPGA.reset_BIP_I_reg ));
  LUT3 #(
    .INIT(8'h0E)) 
    \write_Addr_I[3]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .I2(out),
        .O(\write_Addr_I_reg[3] ));
endmodule

(* ORIG_REF_NAME = "MSR_Reg" *) 
module controller_MSR_Reg
   (MSR,
    I3,
    I3_0,
    MSR_Rst,
    \Using_FPGA.set_BIP_I_reg ,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.Native ,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    PC_OF,
    \Using_FPGA.Native_0 );
  output [2:0]MSR;
  output I3;
  output I3_0;
  input MSR_Rst;
  input \Using_FPGA.set_BIP_I_reg ;
  input Clk;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.Native ;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input PC_OF;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire I3;
  wire I3_0;
  wire [2:0]MSR;
  wire MSR_Rst;
  wire PC_OF;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg ;

  controller_MSR_Reg_Bit \MSR_Bits[28].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .I3_0(I3_0),
        .MSR(MSR[2]),
        .MSR_Rst(MSR_Rst),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ));
  controller_MSR_Reg_Bit_580 \MSR_Bits[29].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .I3(I3),
        .MSR(MSR[1]),
        .PC_OF(PC_OF),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ));
  controller_MSR_Reg_Bit_581 \MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .MSR(MSR[0]),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .\Using_FPGA.enable_Interrupts_I_reg (\Using_FPGA.enable_Interrupts_I_reg ));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module controller_MSR_Reg_Bit
   (MSR,
    I3_0,
    MSR_Rst,
    \Using_FPGA.set_BIP_I_reg ,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    \Using_FPGA.Native );
  output [0:0]MSR;
  output I3_0;
  input MSR_Rst;
  input \Using_FPGA.set_BIP_I_reg ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input \Using_FPGA.Native ;

  wire Clk;
  wire I3_0;
  wire [0:0]MSR;
  wire MSR_Rst;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.set_BIP_I_reg ;

  controller_MB_FDRSE_584 MSR_I
       (.Clk(Clk),
        .I3_0(I3_0),
        .MSR(MSR),
        .MSR_Rst(MSR_Rst),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module controller_MSR_Reg_Bit_580
   (MSR,
    I3,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.Native ,
    Clk,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    PC_OF);
  output [0:0]MSR;
  output I3;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.Native ;
  input Clk;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input PC_OF;

  wire Clk;
  wire I3;
  wire [0:0]MSR;
  wire PC_OF;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;

  controller_MB_FDRSE_583 MSR_I
       (.Clk(Clk),
        .I3(I3),
        .MSR(MSR),
        .PC_OF(PC_OF),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module controller_MSR_Reg_Bit_581
   (MSR,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    Clk);
  output [0:0]MSR;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input Clk;

  wire Clk;
  wire [0:0]MSR;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;

  controller_MB_FDRSE_582 MSR_I
       (.Clk(Clk),
        .MSR(MSR),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Using_FPGA.enable_Interrupts_I_reg (\Using_FPGA.enable_Interrupts_I_reg ));
endmodule

(* ORIG_REF_NAME = "MicroBlaze" *) 
module controller_MicroBlaze
   (sel_LSB,
    DATA_INB,
    LMB_AddrStrobe,
    lmb_reg_write0,
    ADDRBWRADDR,
    lmb_reg_read0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \No_ECC.lmb_as_reg ,
    \No_ECC.lmb_as_reg_0 ,
    WEB,
    \No_ECC.Sl_Rdy_reg ,
    ADDRARDADDR,
    Sleep_Decode,
    Q,
    Clk,
    DATA_OUTA,
    \No_ECC.lmb_as_reg_1 ,
    LMB_Ready,
    active_wakeup0,
    lmb_reg_write_reg,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg_2 ,
    lmb_reg_read_Q_reg,
    INTC_IRQ,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ,
    lmb_as,
    Sl_Rdy,
    reset_temp,
    POR_FF_I,
    Extend_Data_Read,
    Data_Read,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ,
    \cipr_rd_dff_all[24].fdr_i ,
    \cipr_rd_dff_all[25].fdr_i ,
    \cipr_rd_dff_all[26].fdr_i ,
    \cipr_rd_dff_all[27].fdr_i ,
    \cipr_rd_dff_all[28].fdr_i ,
    \cipr_rd_dff_all[29].fdr_i ,
    \cipr_rd_dff_all[30].fdr_i ,
    \cipr_rd_dff_all[31].fdr_i );
  output [1:0]sel_LSB;
  output [0:31]DATA_INB;
  output LMB_AddrStrobe;
  output lmb_reg_write0;
  output [12:0]ADDRBWRADDR;
  output lmb_reg_read0;
  output \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  output \No_ECC.lmb_as_reg ;
  output \No_ECC.lmb_as_reg_0 ;
  output [0:3]WEB;
  output \No_ECC.Sl_Rdy_reg ;
  output [12:0]ADDRARDADDR;
  output Sleep_Decode;
  output [1:0]Q;
  input Clk;
  input [0:31]DATA_OUTA;
  input \No_ECC.lmb_as_reg_1 ;
  input LMB_Ready;
  input active_wakeup0;
  input lmb_reg_write_reg;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg_2 ;
  input lmb_reg_read_Q_reg;
  input INTC_IRQ;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  input lmb_as;
  input Sl_Rdy;
  input reset_temp;
  input POR_FF_I;
  input [15:0]Extend_Data_Read;
  input Data_Read;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  input \cipr_rd_dff_all[24].fdr_i ;
  input \cipr_rd_dff_all[25].fdr_i ;
  input \cipr_rd_dff_all[26].fdr_i ;
  input \cipr_rd_dff_all[27].fdr_i ;
  input \cipr_rd_dff_all[28].fdr_i ;
  input \cipr_rd_dff_all[29].fdr_i ;
  input \cipr_rd_dff_all[30].fdr_i ;
  input \cipr_rd_dff_all[31].fdr_i ;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire Clk;
  wire [0:31]DATA_INB;
  wire [0:31]DATA_OUTA;
  wire Data_Read;
  wire [15:0]Extend_Data_Read;
  wire INTC_IRQ;
  wire LMB_AddrStrobe;
  wire LMB_Ready;
  wire \No_ECC.Sl_Rdy_reg ;
  wire \No_ECC.lmb_as_reg ;
  wire \No_ECC.lmb_as_reg_0 ;
  wire \No_ECC.lmb_as_reg_1 ;
  wire \No_ECC.lmb_as_reg_2 ;
  wire POR_FF_I;
  wire [1:0]Q;
  wire Sl_Rdy;
  wire Sleep_Decode;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  wire [0:3]WEB;
  wire active_wakeup0;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire lmb_as;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire lmb_reg_write_reg;
  wire reset_temp;
  wire [1:0]sel_LSB;

  controller_MicroBlaze_Core MicroBlaze_Core_I
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .Clk(Clk),
        .DATA_INB(DATA_INB),
        .DATA_OUTA(DATA_OUTA),
        .Data_Read(Data_Read),
        .Extend_Data_Read(Extend_Data_Read),
        .INTC_IRQ(INTC_IRQ),
        .LMB_Ready(LMB_Ready),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .\No_ECC.lmb_as_reg_0 (\No_ECC.lmb_as_reg_0 ),
        .\No_ECC.lmb_as_reg_1 (\No_ECC.lmb_as_reg_1 ),
        .\No_ECC.lmb_as_reg_2 (\No_ECC.lmb_as_reg_2 ),
        .POR_FF_I(POR_FF_I),
        .Q(Q),
        .Sl_Rdy(Sl_Rdy),
        .Sleep_Decode(Sleep_Decode),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (LMB_AddrStrobe),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ),
        .WEB(WEB),
        .active_wakeup0(active_wakeup0),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .lmb_as(lmb_as),
        .lmb_reg_read0(lmb_reg_read0),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write0(lmb_reg_write0),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .reset_temp(reset_temp),
        .sel_LSB(sel_LSB));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Area" *) 
module controller_MicroBlaze_Area
   (Jump,
    Select_Logic_reg,
    sel_LSB,
    DATA_INB,
    Exception_Kind,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    lmb_reg_write0,
    lmb_reg_read0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \No_ECC.lmb_as_reg ,
    \No_ECC.lmb_as_reg_0 ,
    WEB,
    \No_ECC.Sl_Rdy_reg ,
    ADDRBWRADDR,
    ADDRARDADDR,
    Sleep_Decode,
    Q,
    R,
    Clk,
    DATA_OUTA,
    \No_ECC.lmb_as_reg_1 ,
    LMB_Ready,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    out,
    active_wakeup0,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    lmb_reg_write_reg,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg_2 ,
    lmb_reg_read_Q_reg,
    INTC_IRQ,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ,
    lmb_as,
    Sl_Rdy,
    reset_temp,
    \Synchronize.use_sync_reset.sync_reg[2]_1 ,
    POR_FF_I,
    Extend_Data_Read,
    Data_Read,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ,
    \cipr_rd_dff_all[24].fdr_i ,
    \cipr_rd_dff_all[25].fdr_i ,
    \cipr_rd_dff_all[26].fdr_i ,
    \cipr_rd_dff_all[27].fdr_i ,
    \cipr_rd_dff_all[28].fdr_i ,
    \cipr_rd_dff_all[29].fdr_i ,
    \cipr_rd_dff_all[30].fdr_i ,
    \cipr_rd_dff_all[31].fdr_i ,
    \Synchronize.use_sync_reset.sync_reg[2]_2 );
  output Jump;
  output Select_Logic_reg;
  output [1:0]sel_LSB;
  output [0:31]DATA_INB;
  output [0:0]Exception_Kind;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output lmb_reg_write0;
  output lmb_reg_read0;
  output \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  output \No_ECC.lmb_as_reg ;
  output \No_ECC.lmb_as_reg_0 ;
  output [0:3]WEB;
  output \No_ECC.Sl_Rdy_reg ;
  output [12:0]ADDRBWRADDR;
  output [12:0]ADDRARDADDR;
  output Sleep_Decode;
  output [1:0]Q;
  input R;
  input Clk;
  input [0:31]DATA_OUTA;
  input \No_ECC.lmb_as_reg_1 ;
  input LMB_Ready;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input [0:0]out;
  input active_wakeup0;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input lmb_reg_write_reg;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg_2 ;
  input lmb_reg_read_Q_reg;
  input INTC_IRQ;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  input lmb_as;
  input Sl_Rdy;
  input reset_temp;
  input \Synchronize.use_sync_reset.sync_reg[2]_1 ;
  input POR_FF_I;
  input [15:0]Extend_Data_Read;
  input Data_Read;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  input \cipr_rd_dff_all[24].fdr_i ;
  input \cipr_rd_dff_all[25].fdr_i ;
  input \cipr_rd_dff_all[26].fdr_i ;
  input \cipr_rd_dff_all[27].fdr_i ;
  input \cipr_rd_dff_all[28].fdr_i ;
  input \cipr_rd_dff_all[29].fdr_i ;
  input \cipr_rd_dff_all[30].fdr_i ;
  input \cipr_rd_dff_all[31].fdr_i ;
  input \Synchronize.use_sync_reset.sync_reg[2]_2 ;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire ALU_Carry;
  wire [0:1]ALU_Op;
  wire [0:1]BRAM_Addr_B;
  wire [1:3]Buffer_Addr;
  wire Byte;
  wire Carry_In;
  wire Clk;
  wire Compare_Instr;
  wire [0:31]DATA_INB;
  wire [0:31]DATA_OUTA;
  wire Data_Flow_I_n_100;
  wire Data_Flow_I_n_101;
  wire Data_Flow_I_n_102;
  wire Data_Flow_I_n_103;
  wire Data_Flow_I_n_104;
  wire Data_Flow_I_n_105;
  wire Data_Flow_I_n_106;
  wire Data_Flow_I_n_107;
  wire Data_Flow_I_n_108;
  wire Data_Flow_I_n_109;
  wire Data_Flow_I_n_110;
  wire Data_Flow_I_n_111;
  wire Data_Flow_I_n_112;
  wire Data_Flow_I_n_113;
  wire Data_Flow_I_n_114;
  wire Data_Flow_I_n_115;
  wire Data_Flow_I_n_116;
  wire Data_Flow_I_n_117;
  wire Data_Flow_I_n_118;
  wire Data_Flow_I_n_2;
  wire Data_Flow_I_n_35;
  wire Data_Flow_I_n_36;
  wire Data_Flow_I_n_38;
  wire Data_Flow_I_n_39;
  wire Data_Flow_I_n_40;
  wire Data_Flow_I_n_41;
  wire Data_Flow_I_n_95;
  wire Data_Flow_I_n_96;
  wire Data_Flow_I_n_97;
  wire Data_Flow_I_n_98;
  wire Data_Flow_I_n_99;
  wire Data_Read;
  wire Decode_I_n_0;
  wire Decode_I_n_123;
  wire Decode_I_n_124;
  wire Decode_I_n_125;
  wire Decode_I_n_127;
  wire Decode_I_n_128;
  wire Decode_I_n_129;
  wire Decode_I_n_131;
  wire Decode_I_n_53;
  wire Decode_I_n_54;
  wire Decode_I_n_55;
  wire Decode_I_n_56;
  wire Decode_I_n_57;
  wire Decode_I_n_58;
  wire Decode_I_n_59;
  wire Decode_I_n_60;
  wire Decode_I_n_61;
  wire Decode_I_n_62;
  wire Decode_I_n_63;
  wire Decode_I_n_64;
  wire Decode_I_n_65;
  wire Decode_I_n_66;
  wire Decode_I_n_67;
  wire Decode_I_n_68;
  wire Decode_I_n_69;
  wire Decode_I_n_70;
  wire Decode_I_n_71;
  wire Decode_I_n_72;
  wire Decode_I_n_73;
  wire Decode_I_n_74;
  wire Decode_I_n_75;
  wire Decode_I_n_76;
  wire Decode_I_n_77;
  wire Decode_I_n_78;
  wire Decode_I_n_79;
  wire Decode_I_n_80;
  wire Decode_I_n_81;
  wire Decode_I_n_82;
  wire Decode_I_n_83;
  wire Decode_I_n_84;
  wire Decode_I_n_90;
  wire Decode_I_n_91;
  wire Decode_I_n_92;
  wire Decode_I_n_93;
  wire Decode_I_n_94;
  wire Decode_I_n_95;
  wire Decode_I_n_96;
  wire Decode_I_n_97;
  wire Decode_I_n_98;
  wire Doublet;
  wire [0:31]EX_Result;
  wire [0:0]Exception_Kind;
  wire [15:0]Extend_Data_Read;
  wire INTC_IRQ;
  wire Imm_Instr;
  wire [0:15]Imm_Value;
  wire Jump;
  wire LMB_Ready;
  wire [0:1]Logic_Oper;
  wire [28:30]MSR;
  wire \MSR_Reg_I/MSR_Rst ;
  wire \MSR_Reg_I/New_Value ;
  wire [0:3]M_BE;
  wire \No_ECC.Sl_Rdy_reg ;
  wire \No_ECC.lmb_as_reg ;
  wire \No_ECC.lmb_as_reg_0 ;
  wire \No_ECC.lmb_as_reg_1 ;
  wire \No_ECC.lmb_as_reg_2 ;
  wire [0:1]Op1_Low;
  wire OpSel1_SPR;
  wire [0:15]\Operand_Select_I/imm_Reg ;
  wire PC_Incr;
  wire \PC_Module_I/normal_piperun ;
  wire \PC_Module_I/pc_write_I ;
  wire POR_FF_I;
  wire [1:0]Q;
  wire R;
  wire [0:4]Reg1_Addr;
  wire [0:31]Reg2_Data;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N;
  wire Reg_Write;
  wire Reg_zero;
  wire Res_Forward1;
  wire [0:23]\Result_Mux_I/data_Read_Mask ;
  wire [0:1]Result_Sel;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext16;
  wire Sext8;
  wire \Shift_Logic_Module_I/msb ;
  wire Sign_Extend;
  wire Sl_Rdy;
  wire Sleep_Decode;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_1 ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_2 ;
  wire Unsigned_Op;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  wire [0:3]WEB;
  wire [0:4]Write_Addr;
  wire active_wakeup0;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire lmb_as;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire lmb_reg_write_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire [0:0]out;
  wire reset_temp;
  wire [1:0]sel_LSB;

  controller_Byte_Doublet_Handle Byte_Doublet_Handle_I
       (.Byte(Byte),
        .DATA_INB({DATA_INB[0],DATA_INB[1],DATA_INB[2],DATA_INB[3],DATA_INB[4],DATA_INB[5],DATA_INB[6],DATA_INB[7],DATA_INB[8],DATA_INB[9],DATA_INB[10],DATA_INB[11],DATA_INB[12],DATA_INB[13],DATA_INB[14],DATA_INB[15],DATA_INB[16],DATA_INB[17],DATA_INB[18],DATA_INB[19],DATA_INB[20],DATA_INB[21],DATA_INB[22],DATA_INB[23]}),
        .Data_Write({Data_Flow_I_n_95,Data_Flow_I_n_96,Data_Flow_I_n_97,Data_Flow_I_n_98,Data_Flow_I_n_99,Data_Flow_I_n_100,Data_Flow_I_n_101,Data_Flow_I_n_102,Data_Flow_I_n_103,Data_Flow_I_n_104,Data_Flow_I_n_105,Data_Flow_I_n_106,Data_Flow_I_n_107,Data_Flow_I_n_108,Data_Flow_I_n_109,Data_Flow_I_n_110,Data_Flow_I_n_111,Data_Flow_I_n_112,Data_Flow_I_n_113,Data_Flow_I_n_114,Data_Flow_I_n_115,Data_Flow_I_n_116,Data_Flow_I_n_117,Data_Flow_I_n_118,DATA_INB[24:31]}),
        .Doublet(Doublet),
        .EX_Op2(Data_Flow_I_n_2),
        .M_BE(M_BE),
        .Op1_Low(Op1_Low),
        .\Using_FPGA.Native (Data_Flow_I_n_35),
        .sel_LSB(sel_LSB));
  controller_Data_Flow Data_Flow_I
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .ALU_Op(ALU_Op),
        .Buffer_Addr({Buffer_Addr[1],Buffer_Addr[2],Buffer_Addr[3]}),
        .Carry_In(Carry_In),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .DI(PC_Incr),
        .Data_Read(Data_Read),
        .Data_Write({Data_Flow_I_n_95,Data_Flow_I_n_96,Data_Flow_I_n_97,Data_Flow_I_n_98,Data_Flow_I_n_99,Data_Flow_I_n_100,Data_Flow_I_n_101,Data_Flow_I_n_102,Data_Flow_I_n_103,Data_Flow_I_n_104,Data_Flow_I_n_105,Data_Flow_I_n_106,Data_Flow_I_n_107,Data_Flow_I_n_108,Data_Flow_I_n_109,Data_Flow_I_n_110,Data_Flow_I_n_111,Data_Flow_I_n_112,Data_Flow_I_n_113,Data_Flow_I_n_114,Data_Flow_I_n_115,Data_Flow_I_n_116,Data_Flow_I_n_117,Data_Flow_I_n_118,DATA_INB[24:31]}),
        .E(Imm_Instr),
        .EX_Op1(Data_Flow_I_n_36),
        .EX_Op2(Data_Flow_I_n_2),
        .EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .Imm_Value(Imm_Value),
        .Jump(Jump),
        .LO(ALU_Carry),
        .MSR({MSR[28],MSR[29],MSR[30]}),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .M_BE(M_BE),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .Op1_Low(Op1_Low),
        .Op1_Shift(\MSR_Reg_I/New_Value ),
        .OpSel1_SPR(OpSel1_SPR),
        .PC_Write(\PC_Module_I/pc_write_I ),
        .POR_FF_I(POR_FF_I),
        .Q({Logic_Oper[0],Logic_Oper[1]}),
        .Reg1_Addr(Reg1_Addr),
        .Reg2_Data(Reg2_Data),
        .Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_N(Reg_Test_Equal_N),
        .Reg_Write(Reg_Write),
        .Reg_zero(Reg_zero),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[0] ({Result_Sel[0],Result_Sel[1]}),
        .Select_Logic(Select_Logic),
        .Sext(Decode_I_n_91),
        .Sext16(Sext16),
        .Sext8(Sext8),
        .Sext8_reg(Decode_I_n_92),
        .Sext8_reg_0(Decode_I_n_93),
        .Sext8_reg_1(Decode_I_n_94),
        .Sext8_reg_2(Decode_I_n_95),
        .Sext8_reg_3(Decode_I_n_96),
        .Sext8_reg_4(Decode_I_n_97),
        .Sext8_reg_5(Decode_I_n_98),
        .Shift_Oper(Sign_Extend),
        .Shifted(\Shift_Logic_Module_I/msb ),
        .\Size_17to32.imm_Reg_reg[0] (Decode_I_n_74),
        .\Size_17to32.imm_Reg_reg[10] (Decode_I_n_64),
        .\Size_17to32.imm_Reg_reg[11] (Decode_I_n_63),
        .\Size_17to32.imm_Reg_reg[12] (Decode_I_n_62),
        .\Size_17to32.imm_Reg_reg[13] (Decode_I_n_61),
        .\Size_17to32.imm_Reg_reg[14] (Decode_I_n_60),
        .\Size_17to32.imm_Reg_reg[15] (Decode_I_n_59),
        .\Size_17to32.imm_Reg_reg[1] (Decode_I_n_73),
        .\Size_17to32.imm_Reg_reg[2] (Decode_I_n_72),
        .\Size_17to32.imm_Reg_reg[3] (Decode_I_n_71),
        .\Size_17to32.imm_Reg_reg[4] (Decode_I_n_70),
        .\Size_17to32.imm_Reg_reg[5] (Decode_I_n_69),
        .\Size_17to32.imm_Reg_reg[6] (Decode_I_n_68),
        .\Size_17to32.imm_Reg_reg[7] (Decode_I_n_67),
        .\Size_17to32.imm_Reg_reg[8] (Decode_I_n_66),
        .\Size_17to32.imm_Reg_reg[9] (Decode_I_n_65),
        .\Synchronize.use_sync_reset.sync_reg[2] (Decode_I_n_90),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (Data_Flow_I_n_40),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ({BRAM_Addr_B[0],BRAM_Addr_B[1]}),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (Decode_I_n_128),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Data_Flow_I_n_35),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (Data_Flow_I_n_38),
        .\Using_FPGA.Native (Data_Flow_I_n_39),
        .\Using_FPGA.Native_0 ({\Operand_Select_I/imm_Reg [0],\Operand_Select_I/imm_Reg [1],\Operand_Select_I/imm_Reg [2],\Operand_Select_I/imm_Reg [3],\Operand_Select_I/imm_Reg [4],\Operand_Select_I/imm_Reg [5],\Operand_Select_I/imm_Reg [6],\Operand_Select_I/imm_Reg [7],\Operand_Select_I/imm_Reg [8],\Operand_Select_I/imm_Reg [9],\Operand_Select_I/imm_Reg [10],\Operand_Select_I/imm_Reg [11],\Operand_Select_I/imm_Reg [12],\Operand_Select_I/imm_Reg [13],\Operand_Select_I/imm_Reg [14],\Operand_Select_I/imm_Reg [15]}),
        .\Using_FPGA.Native_1 (Decode_I_n_127),
        .\Using_FPGA.Native_2 (Decode_I_n_129),
        .\Using_FPGA.Native_3 (Decode_I_n_124),
        .\Using_FPGA.enable_Interrupts_I_reg (Decode_I_n_125),
        .\Using_FPGA.set_BIP_I_reg (Decode_I_n_123),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (Decode_I_n_53),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (Decode_I_n_54),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (Decode_I_n_75),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (Decode_I_n_81),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (Decode_I_n_82),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (Decode_I_n_83),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (Decode_I_n_84),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (Decode_I_n_58),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (Decode_I_n_55),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (Decode_I_n_56),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (Decode_I_n_57),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (Decode_I_n_76),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (Decode_I_n_77),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (Decode_I_n_78),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (Decode_I_n_79),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (Decode_I_n_80),
        .WEB(WEB),
        .Write_Addr(Write_Addr),
        .break_Pipe_i_reg(Data_Flow_I_n_41),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .data_Read_Mask({\Result_Mux_I/data_Read_Mask [0],\Result_Mux_I/data_Read_Mask [1],\Result_Mux_I/data_Read_Mask [2],\Result_Mux_I/data_Read_Mask [3],\Result_Mux_I/data_Read_Mask [4],\Result_Mux_I/data_Read_Mask [5],\Result_Mux_I/data_Read_Mask [6],\Result_Mux_I/data_Read_Mask [7],\Result_Mux_I/data_Read_Mask [8],\Result_Mux_I/data_Read_Mask [9],\Result_Mux_I/data_Read_Mask [10],\Result_Mux_I/data_Read_Mask [11],\Result_Mux_I/data_Read_Mask [12],\Result_Mux_I/data_Read_Mask [13],\Result_Mux_I/data_Read_Mask [14],\Result_Mux_I/data_Read_Mask [15],\Result_Mux_I/data_Read_Mask [16],\Result_Mux_I/data_Read_Mask [17],\Result_Mux_I/data_Read_Mask [18],\Result_Mux_I/data_Read_Mask [19],\Result_Mux_I/data_Read_Mask [20],\Result_Mux_I/data_Read_Mask [21],\Result_Mux_I/data_Read_Mask [22],\Result_Mux_I/data_Read_Mask [23]}),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .nonvalid_IFetch_n_reg(Decode_I_n_0),
        .normal_piperun(\PC_Module_I/normal_piperun ),
        .out(out),
        .writing_reg(Decode_I_n_131));
  controller_Decode Decode_I
       (.ALU_Carry(ALU_Carry),
        .ALU_Op(ALU_Op),
        .Buffer_Addr({Buffer_Addr[1],Buffer_Addr[2],Buffer_Addr[3]}),
        .Byte(Byte),
        .Carry_In(Carry_In),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .DATA_OUTA(DATA_OUTA),
        .Doublet(Doublet),
        .E(Imm_Instr),
        .EX_Result(EX_Result),
        .INTC_IRQ(INTC_IRQ),
        .Imm_Value(Imm_Value),
        .LMB_Ready(LMB_Ready),
        .MSR({MSR[28],MSR[29],MSR[30]}),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .New_Value(\MSR_Reg_I/New_Value ),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .\No_ECC.lmb_as_reg_0 (\No_ECC.lmb_as_reg_0 ),
        .\No_ECC.lmb_as_reg_1 (\No_ECC.lmb_as_reg_1 ),
        .\No_ECC.lmb_as_reg_2 (\No_ECC.lmb_as_reg_2 ),
        .Op1_Low(Op1_Low),
        .OpSel1_SPR(OpSel1_SPR),
        .PC_Incr(PC_Incr),
        .POR_FF_I(POR_FF_I),
        .Q(Q),
        .R(R),
        .Reg1_Addr(Reg1_Addr),
        .Reg2_Data(Reg2_Data),
        .Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_N(Reg_Test_Equal_N),
        .Reg_Write(Reg_Write),
        .Reg_zero(Reg_zero),
        .Res_Forward1(Res_Forward1),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg_0(Select_Logic_reg),
        .Sext16(Sext16),
        .Sext8(Sext8),
        .Sign_Extend(Sign_Extend),
        .\Size_17to32.imm_Reg_reg[0] ({\Operand_Select_I/imm_Reg [0],\Operand_Select_I/imm_Reg [1],\Operand_Select_I/imm_Reg [2],\Operand_Select_I/imm_Reg [3],\Operand_Select_I/imm_Reg [4],\Operand_Select_I/imm_Reg [5],\Operand_Select_I/imm_Reg [6],\Operand_Select_I/imm_Reg [7],\Operand_Select_I/imm_Reg [8],\Operand_Select_I/imm_Reg [9],\Operand_Select_I/imm_Reg [10],\Operand_Select_I/imm_Reg [11],\Operand_Select_I/imm_Reg [12],\Operand_Select_I/imm_Reg [13],\Operand_Select_I/imm_Reg [14],\Operand_Select_I/imm_Reg [15]}),
        .Sl_Rdy(Sl_Rdy),
        .Sleep_Decode(Sleep_Decode),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2]_1 ),
        .\Synchronize.use_sync_reset.sync_reg[2]_1 (\Synchronize.use_sync_reset.sync_reg[2]_2 ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (Decode_I_n_131),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (Exception_Kind),
        .\Using_FPGA.Native_0 (Decode_I_n_53),
        .\Using_FPGA.Native_1 (Decode_I_n_54),
        .\Using_FPGA.Native_10 (Decode_I_n_63),
        .\Using_FPGA.Native_11 (Decode_I_n_64),
        .\Using_FPGA.Native_12 (Decode_I_n_65),
        .\Using_FPGA.Native_13 (Decode_I_n_66),
        .\Using_FPGA.Native_14 (Decode_I_n_67),
        .\Using_FPGA.Native_15 (Decode_I_n_68),
        .\Using_FPGA.Native_16 (Decode_I_n_69),
        .\Using_FPGA.Native_17 (Decode_I_n_70),
        .\Using_FPGA.Native_18 (Decode_I_n_71),
        .\Using_FPGA.Native_19 (Decode_I_n_72),
        .\Using_FPGA.Native_2 (Decode_I_n_55),
        .\Using_FPGA.Native_20 (Decode_I_n_73),
        .\Using_FPGA.Native_21 (Decode_I_n_74),
        .\Using_FPGA.Native_22 (Decode_I_n_75),
        .\Using_FPGA.Native_23 (Decode_I_n_76),
        .\Using_FPGA.Native_24 (Decode_I_n_77),
        .\Using_FPGA.Native_25 (Decode_I_n_78),
        .\Using_FPGA.Native_26 (Decode_I_n_79),
        .\Using_FPGA.Native_27 (Decode_I_n_80),
        .\Using_FPGA.Native_28 (Decode_I_n_81),
        .\Using_FPGA.Native_29 (Decode_I_n_82),
        .\Using_FPGA.Native_3 (Decode_I_n_56),
        .\Using_FPGA.Native_30 (Decode_I_n_83),
        .\Using_FPGA.Native_31 (Decode_I_n_84),
        .\Using_FPGA.Native_32 (Decode_I_n_90),
        .\Using_FPGA.Native_33 (Decode_I_n_91),
        .\Using_FPGA.Native_34 (Decode_I_n_92),
        .\Using_FPGA.Native_35 (Decode_I_n_93),
        .\Using_FPGA.Native_36 (Decode_I_n_94),
        .\Using_FPGA.Native_37 (Decode_I_n_95),
        .\Using_FPGA.Native_38 (Decode_I_n_96),
        .\Using_FPGA.Native_39 (Decode_I_n_97),
        .\Using_FPGA.Native_4 (Decode_I_n_57),
        .\Using_FPGA.Native_40 (Decode_I_n_98),
        .\Using_FPGA.Native_41 (Decode_I_n_123),
        .\Using_FPGA.Native_42 (Decode_I_n_124),
        .\Using_FPGA.Native_43 (Decode_I_n_125),
        .\Using_FPGA.Native_44 (Decode_I_n_127),
        .\Using_FPGA.Native_45 (Decode_I_n_128),
        .\Using_FPGA.Native_46 (Decode_I_n_129),
        .\Using_FPGA.Native_47 ({Logic_Oper[0],Logic_Oper[1]}),
        .\Using_FPGA.Native_48 ({Result_Sel[0],Result_Sel[1]}),
        .\Using_FPGA.Native_49 (Data_Flow_I_n_41),
        .\Using_FPGA.Native_5 (Decode_I_n_58),
        .\Using_FPGA.Native_50 ({BRAM_Addr_B[0],BRAM_Addr_B[1]}),
        .\Using_FPGA.Native_51 (Data_Flow_I_n_40),
        .\Using_FPGA.Native_52 (Data_Flow_I_n_38),
        .\Using_FPGA.Native_53 (Data_Flow_I_n_39),
        .\Using_FPGA.Native_54 (Data_Flow_I_n_36),
        .\Using_FPGA.Native_6 (Decode_I_n_59),
        .\Using_FPGA.Native_7 (Decode_I_n_60),
        .\Using_FPGA.Native_8 (Decode_I_n_61),
        .\Using_FPGA.Native_9 (Decode_I_n_62),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ),
        .Write_Addr(Write_Addr),
        .active_wakeup0(active_wakeup0),
        .break_Pipe_i_reg_0(Jump),
        .data_Read_Mask({\Result_Mux_I/data_Read_Mask [0],\Result_Mux_I/data_Read_Mask [1],\Result_Mux_I/data_Read_Mask [2],\Result_Mux_I/data_Read_Mask [3],\Result_Mux_I/data_Read_Mask [4],\Result_Mux_I/data_Read_Mask [5],\Result_Mux_I/data_Read_Mask [6],\Result_Mux_I/data_Read_Mask [7],\Result_Mux_I/data_Read_Mask [8],\Result_Mux_I/data_Read_Mask [9],\Result_Mux_I/data_Read_Mask [10],\Result_Mux_I/data_Read_Mask [11],\Result_Mux_I/data_Read_Mask [12],\Result_Mux_I/data_Read_Mask [13],\Result_Mux_I/data_Read_Mask [14],\Result_Mux_I/data_Read_Mask [15],\Result_Mux_I/data_Read_Mask [16],\Result_Mux_I/data_Read_Mask [17],\Result_Mux_I/data_Read_Mask [18],\Result_Mux_I/data_Read_Mask [19],\Result_Mux_I/data_Read_Mask [20],\Result_Mux_I/data_Read_Mask [21],\Result_Mux_I/data_Read_Mask [22],\Result_Mux_I/data_Read_Mask [23]}),
        .lmb_as(lmb_as),
        .lmb_reg_read0(lmb_reg_read0),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write0(lmb_reg_write0),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .mbar_is_sleep_reg_0(Decode_I_n_0),
        .msb(\Shift_Logic_Module_I/msb ),
        .normal_piperun(\PC_Module_I/normal_piperun ),
        .out(out),
        .pc_write_I(\PC_Module_I/pc_write_I ),
        .reset_temp(reset_temp));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Core" *) 
module controller_MicroBlaze_Core
   (sel_LSB,
    DATA_INB,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    lmb_reg_write0,
    lmb_reg_read0,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \No_ECC.lmb_as_reg ,
    \No_ECC.lmb_as_reg_0 ,
    WEB,
    \No_ECC.Sl_Rdy_reg ,
    ADDRBWRADDR,
    ADDRARDADDR,
    Sleep_Decode,
    Q,
    Clk,
    DATA_OUTA,
    \No_ECC.lmb_as_reg_1 ,
    LMB_Ready,
    active_wakeup0,
    lmb_reg_write_reg,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg_2 ,
    lmb_reg_read_Q_reg,
    INTC_IRQ,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ,
    lmb_as,
    Sl_Rdy,
    reset_temp,
    POR_FF_I,
    Extend_Data_Read,
    Data_Read,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ,
    \cipr_rd_dff_all[24].fdr_i ,
    \cipr_rd_dff_all[25].fdr_i ,
    \cipr_rd_dff_all[26].fdr_i ,
    \cipr_rd_dff_all[27].fdr_i ,
    \cipr_rd_dff_all[28].fdr_i ,
    \cipr_rd_dff_all[29].fdr_i ,
    \cipr_rd_dff_all[30].fdr_i ,
    \cipr_rd_dff_all[31].fdr_i );
  output [1:0]sel_LSB;
  output [0:31]DATA_INB;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output lmb_reg_write0;
  output lmb_reg_read0;
  output \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  output \No_ECC.lmb_as_reg ;
  output \No_ECC.lmb_as_reg_0 ;
  output [0:3]WEB;
  output \No_ECC.Sl_Rdy_reg ;
  output [12:0]ADDRBWRADDR;
  output [12:0]ADDRARDADDR;
  output Sleep_Decode;
  output [1:0]Q;
  input Clk;
  input [0:31]DATA_OUTA;
  input \No_ECC.lmb_as_reg_1 ;
  input LMB_Ready;
  input active_wakeup0;
  input lmb_reg_write_reg;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg_2 ;
  input lmb_reg_read_Q_reg;
  input INTC_IRQ;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  input lmb_as;
  input Sl_Rdy;
  input reset_temp;
  input POR_FF_I;
  input [15:0]Extend_Data_Read;
  input Data_Read;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  input \cipr_rd_dff_all[24].fdr_i ;
  input \cipr_rd_dff_all[25].fdr_i ;
  input \cipr_rd_dff_all[26].fdr_i ;
  input \cipr_rd_dff_all[27].fdr_i ;
  input \cipr_rd_dff_all[28].fdr_i ;
  input \cipr_rd_dff_all[29].fdr_i ;
  input \cipr_rd_dff_all[30].fdr_i ;
  input \cipr_rd_dff_all[31].fdr_i ;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire \Area.Core_n_1 ;
  wire Clk;
  wire [0:31]DATA_INB;
  wire [0:31]DATA_OUTA;
  wire Data_Read;
  wire \Decode_I/PreFetch_Buffer_I/R ;
  wire \Decode_I/Reset18_out ;
  wire [30:30]Exception_Kind;
  wire [15:0]Extend_Data_Read;
  wire INTC_IRQ;
  wire Jump;
  wire LMB_Ready;
  wire \No_ECC.Sl_Rdy_reg ;
  wire \No_ECC.lmb_as_reg ;
  wire \No_ECC.lmb_as_reg_0 ;
  wire \No_ECC.lmb_as_reg_1 ;
  wire \No_ECC.lmb_as_reg_2 ;
  wire POR_FF_I;
  wire [1:0]Q;
  wire Reset_DFF_n_2;
  wire Reset_DFF_n_3;
  wire Reset_DFF_n_4;
  wire Reset_DFF_n_5;
  wire Sl_Rdy;
  wire Sleep_Decode;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  wire [0:3]WEB;
  wire active_wakeup0;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire lmb_as;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire lmb_reg_write_reg;
  wire reset_temp;
  wire [1:0]sel_LSB;

  controller_MicroBlaze_Area \Area.Core 
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .Clk(Clk),
        .DATA_INB(DATA_INB),
        .DATA_OUTA(DATA_OUTA),
        .Data_Read(Data_Read),
        .Exception_Kind(Exception_Kind),
        .Extend_Data_Read(Extend_Data_Read),
        .INTC_IRQ(INTC_IRQ),
        .Jump(Jump),
        .LMB_Ready(LMB_Ready),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .\No_ECC.lmb_as_reg_0 (\No_ECC.lmb_as_reg_0 ),
        .\No_ECC.lmb_as_reg_1 (\No_ECC.lmb_as_reg_1 ),
        .\No_ECC.lmb_as_reg_2 (\No_ECC.lmb_as_reg_2 ),
        .POR_FF_I(POR_FF_I),
        .Q(Q),
        .R(\Decode_I/PreFetch_Buffer_I/R ),
        .Select_Logic_reg(\Area.Core_n_1 ),
        .Sl_Rdy(Sl_Rdy),
        .Sleep_Decode(Sleep_Decode),
        .\Synchronize.use_sync_reset.sync_reg[2] (Reset_DFF_n_4),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (Reset_DFF_n_5),
        .\Synchronize.use_sync_reset.sync_reg[2]_1 (Reset_DFF_n_3),
        .\Synchronize.use_sync_reset.sync_reg[2]_2 (Reset_DFF_n_2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Using_B36_S4.The_BRAMs[0].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ),
        .WEB(WEB),
        .active_wakeup0(active_wakeup0),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .lmb_as(lmb_as),
        .lmb_reg_read0(lmb_reg_read0),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write0(lmb_reg_write0),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .out(\Decode_I/Reset18_out ),
        .reset_temp(reset_temp),
        .sel_LSB(sel_LSB));
  controller_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .Exception_Kind(Exception_Kind),
        .Jump(Jump),
        .R(\Decode_I/PreFetch_Buffer_I/R ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Reset_DFF_n_4),
        .\Using_FPGA.Native (Reset_DFF_n_5),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Area.Core_n_1 ),
        .\Using_LWX_SWX_instr.reservation_reg (Reset_DFF_n_2),
        .out(\Decode_I/Reset18_out ),
        .reset_temp(reset_temp),
        .write_Reg_reg(Reset_DFF_n_3));
endmodule

(* ORIG_REF_NAME = "Operand_Select" *) 
module controller_Operand_Select
   (Op1_Logic,
    EX_Op2,
    \Using_FPGA.Native ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Op1_Shift,
    Op2,
    Shifted,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_3 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_4 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_5 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_6 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_8 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_9 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_10 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_11 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_12 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_13 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_14 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_15 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_16 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_17 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_18 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_19 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_20 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_21 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_22 ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    lmb_reg_write_reg,
    lmb_reg_write_reg_0,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    Sext,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ,
    WEB,
    \No_ECC.Sl_Rdy_reg ,
    \Using_FPGA.Native_45 ,
    \Zero_Detecting[1].nibble_Zero_reg ,
    \Zero_Detecting[2].nibble_Zero_reg ,
    \Zero_Detecting[3].nibble_Zero_reg ,
    \Zero_Detecting[4].nibble_Zero_reg ,
    \Zero_Detecting[5].nibble_Zero_reg ,
    \Zero_Detecting[0].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    EX_Result,
    Res_Forward1,
    OpSel1_SPR,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Result_Sel_reg[1] ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Result_Sel_reg[1]_0 ,
    I3,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Result_Sel_reg[1]_1 ,
    I3_0,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Result_Sel_reg[1]_2 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Result_Sel_reg[1]_3 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Result_Sel_reg[1]_4 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Result_Sel_reg[1]_5 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Result_Sel_reg[1]_6 ,
    PC_OF,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Result_Sel_reg[1]_7 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Result_Sel_reg[1]_8 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Result_Sel_reg[1]_9 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Result_Sel_reg[1]_10 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Result_Sel_reg[1]_11 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Result_Sel_reg[1]_12 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Result_Sel_reg[1]_13 ,
    \Size_17to32.imm_Reg_reg[15]_0 ,
    \Result_Sel_reg[1]_14 ,
    \Size_17to32.imm_Reg_reg[14]_0 ,
    \Result_Sel_reg[1]_15 ,
    \Size_17to32.imm_Reg_reg[13]_0 ,
    \Result_Sel_reg[1]_16 ,
    \Size_17to32.imm_Reg_reg[12]_0 ,
    \Result_Sel_reg[1]_17 ,
    \Size_17to32.imm_Reg_reg[11]_0 ,
    \Result_Sel_reg[1]_18 ,
    \Size_17to32.imm_Reg_reg[10]_0 ,
    \Result_Sel_reg[1]_19 ,
    \Size_17to32.imm_Reg_reg[9]_0 ,
    \Result_Sel_reg[1]_20 ,
    \Size_17to32.imm_Reg_reg[8]_0 ,
    \Result_Sel_reg[1]_21 ,
    \Size_17to32.imm_Reg_reg[7]_0 ,
    \Result_Sel_reg[1]_22 ,
    \Size_17to32.imm_Reg_reg[6]_0 ,
    \Result_Sel_reg[1]_23 ,
    \Size_17to32.imm_Reg_reg[5]_0 ,
    \Result_Sel_reg[1]_24 ,
    \Size_17to32.imm_Reg_reg[4]_0 ,
    \Result_Sel_reg[1]_25 ,
    \Size_17to32.imm_Reg_reg[3]_0 ,
    \Result_Sel_reg[1]_26 ,
    \Size_17to32.imm_Reg_reg[2]_0 ,
    \Result_Sel_reg[1]_27 ,
    \Size_17to32.imm_Reg_reg[1]_0 ,
    \Result_Sel_reg[1]_28 ,
    \Size_17to32.imm_Reg_reg[0]_0 ,
    \Result_Sel_reg[1]_29 ,
    \Using_FPGA.Native_57 ,
    Compare_Instr,
    Sext16,
    Sext8,
    writing_reg,
    M_BE,
    ALU_Result,
    POR_FF_I,
    E,
    Imm_Value);
  output Op1_Logic;
  output EX_Op2;
  output \Using_FPGA.Native ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output Op1_Shift;
  output Op2;
  output Shifted;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_2 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_3 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_4 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_5 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_6 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_8 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_9 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_10 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_11 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_12 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_13 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_14 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_15 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_16 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_17 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_18 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_19 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_20 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_21 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_22 ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output lmb_reg_write_reg;
  output lmb_reg_write_reg_0;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  output Sext;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output \Using_FPGA.Native_36 ;
  output \Using_FPGA.Native_37 ;
  output \Using_FPGA.Native_38 ;
  output \Using_FPGA.Native_39 ;
  output \Using_FPGA.Native_40 ;
  output \Using_FPGA.Native_41 ;
  output \Using_FPGA.Native_42 ;
  output \Using_FPGA.Native_43 ;
  output \Using_FPGA.Native_44 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  output [0:3]WEB;
  output \No_ECC.Sl_Rdy_reg ;
  output [15:0]\Using_FPGA.Native_45 ;
  output \Zero_Detecting[1].nibble_Zero_reg ;
  output \Zero_Detecting[2].nibble_Zero_reg ;
  output \Zero_Detecting[3].nibble_Zero_reg ;
  output \Zero_Detecting[4].nibble_Zero_reg ;
  output \Zero_Detecting[5].nibble_Zero_reg ;
  output \Zero_Detecting[0].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:31]Reg1_Data;
  input EX_Result;
  input Res_Forward1;
  input OpSel1_SPR;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input \Result_Sel_reg[1] ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  input \Result_Sel_reg[1]_0 ;
  input I3;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  input \Result_Sel_reg[1]_1 ;
  input I3_0;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  input \Result_Sel_reg[1]_2 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  input \Result_Sel_reg[1]_3 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  input \Result_Sel_reg[1]_4 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  input \Result_Sel_reg[1]_5 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  input \Result_Sel_reg[1]_6 ;
  input PC_OF;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  input \Result_Sel_reg[1]_7 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  input \Result_Sel_reg[1]_8 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  input \Result_Sel_reg[1]_9 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  input \Result_Sel_reg[1]_10 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  input \Result_Sel_reg[1]_11 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  input \Result_Sel_reg[1]_12 ;
  input \Using_FPGA.Native_56 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  input \Result_Sel_reg[1]_13 ;
  input \Size_17to32.imm_Reg_reg[15]_0 ;
  input \Result_Sel_reg[1]_14 ;
  input \Size_17to32.imm_Reg_reg[14]_0 ;
  input \Result_Sel_reg[1]_15 ;
  input \Size_17to32.imm_Reg_reg[13]_0 ;
  input \Result_Sel_reg[1]_16 ;
  input \Size_17to32.imm_Reg_reg[12]_0 ;
  input \Result_Sel_reg[1]_17 ;
  input \Size_17to32.imm_Reg_reg[11]_0 ;
  input \Result_Sel_reg[1]_18 ;
  input \Size_17to32.imm_Reg_reg[10]_0 ;
  input \Result_Sel_reg[1]_19 ;
  input \Size_17to32.imm_Reg_reg[9]_0 ;
  input \Result_Sel_reg[1]_20 ;
  input \Size_17to32.imm_Reg_reg[8]_0 ;
  input \Result_Sel_reg[1]_21 ;
  input \Size_17to32.imm_Reg_reg[7]_0 ;
  input \Result_Sel_reg[1]_22 ;
  input \Size_17to32.imm_Reg_reg[6]_0 ;
  input \Result_Sel_reg[1]_23 ;
  input \Size_17to32.imm_Reg_reg[5]_0 ;
  input \Result_Sel_reg[1]_24 ;
  input \Size_17to32.imm_Reg_reg[4]_0 ;
  input \Result_Sel_reg[1]_25 ;
  input \Size_17to32.imm_Reg_reg[3]_0 ;
  input \Result_Sel_reg[1]_26 ;
  input \Size_17to32.imm_Reg_reg[2]_0 ;
  input \Result_Sel_reg[1]_27 ;
  input \Size_17to32.imm_Reg_reg[1]_0 ;
  input \Result_Sel_reg[1]_28 ;
  input \Size_17to32.imm_Reg_reg[0]_0 ;
  input \Result_Sel_reg[1]_29 ;
  input \Using_FPGA.Native_57 ;
  input Compare_Instr;
  input Sext16;
  input Sext8;
  input writing_reg;
  input [0:3]M_BE;
  input ALU_Result;
  input POR_FF_I;
  input [0:0]E;
  input [0:15]Imm_Value;

  wire ALU_Result;
  wire Clk;
  wire Compare_Instr;
  wire [0:0]E;
  wire EX_Op2;
  wire EX_Result;
  wire I3;
  wire I3_0;
  wire [0:15]Imm_Value;
  wire [0:3]M_BE;
  wire \No_ECC.Sl_Rdy_reg ;
  wire Op1_Logic;
  wire Op1_Shift;
  wire Op2;
  wire OpSel1_SPR;
  wire \OpSelect_Bits[11].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[12].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[13].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[14].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[15].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[17].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[18].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[19].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[1].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[20].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[21].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[23].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[24].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[26].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[2].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[3].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[5].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[6].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[7].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[8].Operand_Select_Bit_I_n_1 ;
  wire \OpSelect_Bits[9].Operand_Select_Bit_I_n_1 ;
  wire PC_OF;
  wire POR_FF_I;
  wire [0:31]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Result_Sel_reg[1]_0 ;
  wire \Result_Sel_reg[1]_1 ;
  wire \Result_Sel_reg[1]_10 ;
  wire \Result_Sel_reg[1]_11 ;
  wire \Result_Sel_reg[1]_12 ;
  wire \Result_Sel_reg[1]_13 ;
  wire \Result_Sel_reg[1]_14 ;
  wire \Result_Sel_reg[1]_15 ;
  wire \Result_Sel_reg[1]_16 ;
  wire \Result_Sel_reg[1]_17 ;
  wire \Result_Sel_reg[1]_18 ;
  wire \Result_Sel_reg[1]_19 ;
  wire \Result_Sel_reg[1]_2 ;
  wire \Result_Sel_reg[1]_20 ;
  wire \Result_Sel_reg[1]_21 ;
  wire \Result_Sel_reg[1]_22 ;
  wire \Result_Sel_reg[1]_23 ;
  wire \Result_Sel_reg[1]_24 ;
  wire \Result_Sel_reg[1]_25 ;
  wire \Result_Sel_reg[1]_26 ;
  wire \Result_Sel_reg[1]_27 ;
  wire \Result_Sel_reg[1]_28 ;
  wire \Result_Sel_reg[1]_29 ;
  wire \Result_Sel_reg[1]_3 ;
  wire \Result_Sel_reg[1]_4 ;
  wire \Result_Sel_reg[1]_5 ;
  wire \Result_Sel_reg[1]_6 ;
  wire \Result_Sel_reg[1]_7 ;
  wire \Result_Sel_reg[1]_8 ;
  wire \Result_Sel_reg[1]_9 ;
  wire Sext;
  wire Sext16;
  wire Sext8;
  wire Shifted;
  wire \Size_17to32.imm_Reg_reg[0]_0 ;
  wire \Size_17to32.imm_Reg_reg[10]_0 ;
  wire \Size_17to32.imm_Reg_reg[11]_0 ;
  wire \Size_17to32.imm_Reg_reg[12]_0 ;
  wire \Size_17to32.imm_Reg_reg[13]_0 ;
  wire \Size_17to32.imm_Reg_reg[14]_0 ;
  wire \Size_17to32.imm_Reg_reg[15]_0 ;
  wire \Size_17to32.imm_Reg_reg[1]_0 ;
  wire \Size_17to32.imm_Reg_reg[2]_0 ;
  wire \Size_17to32.imm_Reg_reg[3]_0 ;
  wire \Size_17to32.imm_Reg_reg[4]_0 ;
  wire \Size_17to32.imm_Reg_reg[5]_0 ;
  wire \Size_17to32.imm_Reg_reg[6]_0 ;
  wire \Size_17to32.imm_Reg_reg[7]_0 ;
  wire \Size_17to32.imm_Reg_reg[8]_0 ;
  wire \Size_17to32.imm_Reg_reg[9]_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_10 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_11 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_12 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_13 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_14 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_15 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_16 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_17 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_18 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_19 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_20 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_21 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_22 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_3 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_4 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_5 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_6 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_8 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_9 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire [15:0]\Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire [0:3]WEB;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire break_Pipe_i_reg;
  wire lmb_reg_write_reg;
  wire lmb_reg_write_reg_0;
  wire normal_piperun;
  wire [0:0]out;
  wire writing_reg;

  controller_Operand_Select_Bit__parameterized57 \OpSelect_Bits[0].Operand_Select_Bit_I 
       (.ALU_Result(ALU_Result),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .OpSel1_SPR(OpSel1_SPR),
        .POR_FF_I(POR_FF_I),
        .Reg1_Data(Reg1_Data[0]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_29 ),
        .\Size_17to32.imm_Reg_reg[0] (\Size_17to32.imm_Reg_reg[0]_0 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_57 ),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized37 \OpSelect_Bits[10].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[10]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_19 ),
        .\Size_17to32.imm_Reg_reg[10] (\Size_17to32.imm_Reg_reg[10]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[9].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[6].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[11].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_4 (\OpSelect_Bits[8].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_5 (\OpSelect_Bits[7].Operand_Select_Bit_I_n_1 ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized35 \OpSelect_Bits[11].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[11]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_18 ),
        .\Size_17to32.imm_Reg_reg[11] (\Size_17to32.imm_Reg_reg[11]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .break_Pipe_i_reg(\OpSelect_Bits[11].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized33 \OpSelect_Bits[12].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[12]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_17 ),
        .\Size_17to32.imm_Reg_reg[12] (\Size_17to32.imm_Reg_reg[12]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .break_Pipe_i_reg(\OpSelect_Bits[12].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized31 \OpSelect_Bits[13].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[13]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_16 ),
        .\Size_17to32.imm_Reg_reg[13] (\Size_17to32.imm_Reg_reg[13]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .break_Pipe_i_reg(\OpSelect_Bits[13].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized29 \OpSelect_Bits[14].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[14]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_15 ),
        .\Size_17to32.imm_Reg_reg[14] (\Size_17to32.imm_Reg_reg[14]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .break_Pipe_i_reg(\OpSelect_Bits[14].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized27 \OpSelect_Bits[15].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[15]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_14 ),
        .\Size_17to32.imm_Reg_reg[15] (\Size_17to32.imm_Reg_reg[15]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .break_Pipe_i_reg(\OpSelect_Bits[15].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized25 \OpSelect_Bits[16].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[16]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_13 ),
        .Sext(Sext),
        .Sext16(Sext16),
        .Sext8(Sext8),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_16 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 ),
        .\Using_FPGA.Native_17 (\OpSelect_Bits[15].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_18 (\OpSelect_Bits[12].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_19 (\OpSelect_Bits[17].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_20 (\OpSelect_Bits[14].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_21 (\OpSelect_Bits[13].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized23 \OpSelect_Bits[17].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[17]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_12 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_21 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_22 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_56 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .break_Pipe_i_reg(\OpSelect_Bits[17].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized21 \OpSelect_Bits[18].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[18]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_11 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_19 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_20 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_55 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .break_Pipe_i_reg(\OpSelect_Bits[18].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized19 \OpSelect_Bits[19].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[19]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_10 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_17 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_18 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_54 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .break_Pipe_i_reg(\OpSelect_Bits[19].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized55 \OpSelect_Bits[1].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[1]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_28 ),
        .\Size_17to32.imm_Reg_reg[1] (\Size_17to32.imm_Reg_reg[1]_0 ),
        .break_Pipe_i_reg(\OpSelect_Bits[1].Operand_Select_Bit_I_n_1 ),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .lmb_reg_write_reg_0(lmb_reg_write_reg_0),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized17 \OpSelect_Bits[20].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[20]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_9 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_15 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_16 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_53 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .break_Pipe_i_reg(\OpSelect_Bits[20].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized15 \OpSelect_Bits[21].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[21]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_8 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_13 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_14 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_52 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .break_Pipe_i_reg(\OpSelect_Bits[21].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized13 \OpSelect_Bits[22].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[22]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_7 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_11 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_12 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_51 ),
        .\Using_FPGA.Native_0 (\OpSelect_Bits[21].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[18].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[23].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[20].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_4 (\OpSelect_Bits[19].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized11 \OpSelect_Bits[23].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data[23]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_6 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_9 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .break_Pipe_i_reg(\OpSelect_Bits[23].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit \OpSelect_Bits[24].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[24]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_5 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_7 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_8 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_50 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .break_Pipe_i_reg(\OpSelect_Bits[24].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit_450 \OpSelect_Bits[25].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[25]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_4 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_5 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_6 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_49 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .break_Pipe_i_reg(\OpSelect_Bits[25].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized7 \OpSelect_Bits[26].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[26]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_3 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_3 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_4 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_48 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .break_Pipe_i_reg(\OpSelect_Bits[26].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized5 \OpSelect_Bits[27].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[27]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_2 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_2 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_47 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .break_Pipe_i_reg(\OpSelect_Bits[27].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized3 \OpSelect_Bits[28].Operand_Select_Bit_I 
       (.Clk(Clk),
        .I3_0(I3_0),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[28]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_1 ),
        .Shifted(Shifted),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.Native (\OpSelect_Bits[27].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_0 (\OpSelect_Bits[24].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[26].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit_451 \OpSelect_Bits[29].Operand_Select_Bit_I 
       (.Clk(Clk),
        .I3(I3),
        .Op1_Shift(Op1_Shift),
        .Op2(Op2),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[29]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .break_Pipe_i_reg(\OpSelect_Bits[29].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized53 \OpSelect_Bits[2].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[2]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_27 ),
        .\Size_17to32.imm_Reg_reg[2] (\Size_17to32.imm_Reg_reg[2]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .break_Pipe_i_reg(\OpSelect_Bits[2].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit_452 \OpSelect_Bits[30].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[30]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit_453 \OpSelect_Bits[31].Operand_Select_Bit_I 
       (.ALU_Result(ALU_Result),
        .Clk(Clk),
        .EX_Op2(EX_Op2),
        .EX_Result(EX_Result),
        .M_BE(M_BE),
        .Op1_Logic(Op1_Logic),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[31]),
        .Res_Forward1(Res_Forward1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .WEB(WEB),
        .break_Pipe_i_reg(\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out),
        .writing_reg(writing_reg));
  controller_Operand_Select_Bit__parameterized51 \OpSelect_Bits[3].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[3]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_26 ),
        .\Size_17to32.imm_Reg_reg[3] (\Size_17to32.imm_Reg_reg[3]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .break_Pipe_i_reg(\OpSelect_Bits[3].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized49 \OpSelect_Bits[4].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[4]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_25 ),
        .\Size_17to32.imm_Reg_reg[4] (\Size_17to32.imm_Reg_reg[4]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[3].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_2 (break_Pipe_i_reg),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[5].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_4 (\OpSelect_Bits[2].Operand_Select_Bit_I_n_1 ),
        .\Using_FPGA.Native_5 (\OpSelect_Bits[1].Operand_Select_Bit_I_n_1 ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized47 \OpSelect_Bits[5].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[5]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_24 ),
        .\Size_17to32.imm_Reg_reg[5] (\Size_17to32.imm_Reg_reg[5]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .break_Pipe_i_reg(\OpSelect_Bits[5].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized45 \OpSelect_Bits[6].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[6]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_23 ),
        .\Size_17to32.imm_Reg_reg[6] (\Size_17to32.imm_Reg_reg[6]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .break_Pipe_i_reg(\OpSelect_Bits[6].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized43 \OpSelect_Bits[7].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[7]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_22 ),
        .\Size_17to32.imm_Reg_reg[7] (\Size_17to32.imm_Reg_reg[7]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .break_Pipe_i_reg(\OpSelect_Bits[7].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized41 \OpSelect_Bits[8].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[8]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_21 ),
        .\Size_17to32.imm_Reg_reg[8] (\Size_17to32.imm_Reg_reg[8]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .break_Pipe_i_reg(\OpSelect_Bits[8].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_Operand_Select_Bit__parameterized39 \OpSelect_Bits[9].Operand_Select_Bit_I 
       (.Clk(Clk),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data[9]),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1]_20 ),
        .\Size_17to32.imm_Reg_reg[9] (\Size_17to32.imm_Reg_reg[9]_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .break_Pipe_i_reg(\OpSelect_Bits[9].Operand_Select_Bit_I_n_1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  FDRE \Size_17to32.imm_Reg_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[0]),
        .Q(\Using_FPGA.Native_45 [15]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[10]),
        .Q(\Using_FPGA.Native_45 [5]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[11]),
        .Q(\Using_FPGA.Native_45 [4]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[12]),
        .Q(\Using_FPGA.Native_45 [3]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[13]),
        .Q(\Using_FPGA.Native_45 [2]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[14]),
        .Q(\Using_FPGA.Native_45 [1]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[15]),
        .Q(\Using_FPGA.Native_45 [0]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[1]),
        .Q(\Using_FPGA.Native_45 [14]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[2]),
        .Q(\Using_FPGA.Native_45 [13]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[3]),
        .Q(\Using_FPGA.Native_45 [12]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[4]),
        .Q(\Using_FPGA.Native_45 [11]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[5]),
        .Q(\Using_FPGA.Native_45 [10]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[6]),
        .Q(\Using_FPGA.Native_45 [9]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[7]),
        .Q(\Using_FPGA.Native_45 [8]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[8]),
        .Q(\Using_FPGA.Native_45 [7]),
        .R(out));
  FDRE \Size_17to32.imm_Reg_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(Imm_Value[9]),
        .Q(\Using_FPGA.Native_45 [6]),
        .R(out));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_512 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_513 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_514 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_515 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit_450
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_508 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_509 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_510 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_511 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit_451
   (Op1_Shift,
    break_Pipe_i_reg,
    Op2,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    I3,
    OpSel1_SPR);
  output Op1_Shift;
  output break_Pipe_i_reg;
  output Op2;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input I3;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire I3;
  wire Op1_Shift;
  wire Op2;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_492 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .I3(I3),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_493 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .Op1_Shift(Op1_Shift),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_494 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_495 Op2_DFF
       (.Clk(Clk),
        .Op2(Op2),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit_452
   (\Using_FPGA.Native ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Zero_Detecting[0].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native_0 ,
    OpSel1_SPR,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Zero_Detecting[0].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native_0 ;
  input OpSel1_SPR;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_484 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_FDRE_485 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_486 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_487 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit_453
   (Op1_Logic,
    break_Pipe_i_reg,
    EX_Op2,
    WEB,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    EX_Result,
    Res_Forward1,
    OpSel1_SPR,
    writing_reg,
    M_BE,
    ALU_Result);
  output Op1_Logic;
  output break_Pipe_i_reg;
  output EX_Op2;
  output [0:3]WEB;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input EX_Result;
  input Res_Forward1;
  input OpSel1_SPR;
  input writing_reg;
  input [0:3]M_BE;
  input ALU_Result;

  wire ALU_Result;
  wire Clk;
  wire D;
  wire D0_out;
  wire EX_Op2;
  wire EX_Result;
  wire [0:3]M_BE;
  wire Op1_Logic;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:3]WEB;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;
  wire writing_reg;

  controller_MB_LUT6_2_480 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .EX_Result(EX_Result),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1));
  controller_microblaze_v9_5_MB_FDRE_481 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .Op1_Logic(Op1_Logic),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_482 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_483 Op2_DFF
       (.ALU_Result(ALU_Result),
        .Clk(Clk),
        .EX_Op2(EX_Op2),
        .M_BE(M_BE),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .WEB(WEB),
        .normal_piperun(normal_piperun),
        .writing_reg(writing_reg));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized11
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    PC_OF,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input PC_OF;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire PC_OF;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_516 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_517 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_518 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_519 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized13
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Zero_Detecting[2].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output \Zero_Detecting[2].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_520 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_521 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_522 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_523 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized15
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_524 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_525 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_526 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_527 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized17
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_528 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_529 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_530 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_531 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized19
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_536 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_537 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_538 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_539 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized21
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_540 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_541 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_542 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_543 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized23
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_544 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_545 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_546 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_547 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized25
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Sext,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Zero_Detecting[3].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR,
    Sext16,
    \Using_FPGA.Native_16 ,
    Sext8,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Sext;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Zero_Detecting[3].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;
  input Sext16;
  input \Using_FPGA.Native_16 ;
  input Sext8;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire Sext;
  wire Sext16;
  wire Sext8;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_548 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_549 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .Sext(Sext),
        .Sext16(Sext16),
        .Sext8(Sext8),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_9 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_550 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_21 ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_551 Op2_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized27
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[15] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[15] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_552 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_553 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_554 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_555 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[15] (\Size_17to32.imm_Reg_reg[15] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized29
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[14] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[14] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[14] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_556 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_557 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_558 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_559 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[14] (\Size_17to32.imm_Reg_reg[14] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized3
   (Shifted,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Zero_Detecting[1].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    I3_0,
    OpSel1_SPR,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output Shifted;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Zero_Detecting[1].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input I3_0;
  input OpSel1_SPR;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire I3_0;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire Shifted;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_496 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .I3_0(I3_0),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_497 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .Shifted(Shifted),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_498 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_499 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized31
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[13] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[13] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[13] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_560 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_561 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_562 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_563 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[13] (\Size_17to32.imm_Reg_reg[13] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized33
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[12] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[12] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[12] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_564 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_565 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_566 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_567 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[12] (\Size_17to32.imm_Reg_reg[12] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized35
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[11] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[11] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[11] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_568 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_569 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_570 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_571 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[11] (\Size_17to32.imm_Reg_reg[11] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized37
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Zero_Detecting[4].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[10] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Zero_Detecting[4].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[10] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[10] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_572 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_573 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_574 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_5 ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_575 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[10] (\Size_17to32.imm_Reg_reg[10] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized39
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[9] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[9] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[9] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_454 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_455 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[9] (\Size_17to32.imm_Reg_reg[9] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized41
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[8] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[8] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[8] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_456 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_457 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_458 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_459 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[8] (\Size_17to32.imm_Reg_reg[8] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized43
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[7] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[7] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[7] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_460 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_461 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_462 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_463 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[7] (\Size_17to32.imm_Reg_reg[7] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized45
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[6] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[6] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[6] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_464 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_465 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_466 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_467 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[6] (\Size_17to32.imm_Reg_reg[6] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized47
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[5] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[5] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[5] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_468 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_469 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_470 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_471 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[5] (\Size_17to32.imm_Reg_reg[5] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized49
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Zero_Detecting[5].nibble_Zero_reg ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[4] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Zero_Detecting[5].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[4] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[4] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_472 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_473 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_474 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_5 ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_475 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[4] (\Size_17to32.imm_Reg_reg[4] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized5
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_500 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_501 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_502 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_503 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized51
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[3] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[3] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[3] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_476 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_477 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_478 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_479 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[3] (\Size_17to32.imm_Reg_reg[3] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized53
   (\Using_FPGA.Native ,
    break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[2] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output \Using_FPGA.Native ;
  output break_Pipe_i_reg;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[2] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[2] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_488 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_489 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_490 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_491 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[2] (\Size_17to32.imm_Reg_reg[2] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized55
   (lmb_reg_write_reg,
    break_Pipe_i_reg,
    lmb_reg_write_reg_0,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[1] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    OpSel1_SPR);
  output lmb_reg_write_reg;
  output break_Pipe_i_reg;
  output lmb_reg_write_reg_0;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[1] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[1] ;
  wire break_Pipe_i_reg;
  wire lmb_reg_write_reg;
  wire lmb_reg_write_reg_0;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_532 \Only_PC.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ));
  controller_microblaze_v9_5_MB_FDRE_533 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_534 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_535 Op2_DFF
       (.Clk(Clk),
        .\Size_17to32.imm_Reg_reg[1] (\Size_17to32.imm_Reg_reg[1] ),
        .lmb_reg_write_reg(lmb_reg_write_reg_0),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized57
   (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ,
    \No_ECC.Sl_Rdy_reg ,
    out,
    normal_piperun,
    Clk,
    \Size_17to32.imm_Reg_reg[0] ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR,
    Compare_Instr,
    ALU_Result,
    POR_FF_I);
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  output \No_ECC.Sl_Rdy_reg ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Size_17to32.imm_Reg_reg[0] ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;
  input Compare_Instr;
  input ALU_Result;
  input POR_FF_I;

  wire ALU_Result;
  wire Clk;
  wire Compare_Instr;
  wire D;
  wire D0_out;
  wire \No_ECC.Sl_Rdy_reg ;
  wire OpSel1_SPR;
  wire POR_FF_I;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Size_17to32.imm_Reg_reg[0] ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Using_FPGA.Native ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_576 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_577 Op1_DFF
       (.Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .D(D),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 ),
        .\Using_FPGA.Native_0 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_578 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_579 Op2_DFF
       (.ALU_Result(ALU_Result),
        .Clk(Clk),
        .\No_ECC.Sl_Rdy_reg (\No_ECC.Sl_Rdy_reg ),
        .POR_FF_I(POR_FF_I),
        .\Size_17to32.imm_Reg_reg[0] (\Size_17to32.imm_Reg_reg[0] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module controller_Operand_Select_Bit__parameterized7
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    break_Pipe_i_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    out,
    normal_piperun,
    Clk,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Reg1_Data,
    \Result_Sel_reg[1] ,
    Res_Forward1,
    \Using_FPGA.Native ,
    OpSel1_SPR);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output break_Pipe_i_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  input [0:0]out;
  input normal_piperun;
  input Clk;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Reg1_Data;
  input \Result_Sel_reg[1] ;
  input Res_Forward1;
  input \Using_FPGA.Native ;
  input OpSel1_SPR;

  wire Clk;
  wire D;
  wire D0_out;
  wire OpSel1_SPR;
  wire [0:0]Reg1_Data;
  wire Res_Forward1;
  wire \Result_Sel_reg[1] ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  controller_MB_LUT6_2_504 \Both_PC_and_MSR.Op1_LUT6 
       (.D(D),
        .D0_out(D0_out),
        .OpSel1_SPR(OpSel1_SPR),
        .Reg1_Data(Reg1_Data),
        .Res_Forward1(Res_Forward1),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_FDRE_505 Op1_DFF
       (.Clk(Clk),
        .D(D),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_microblaze_v9_5_MB_FDRE_506 Op1_Reg_DFF
       (.Clk(Clk),
        .D0_out(D0_out),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .normal_piperun(normal_piperun),
        .out(out));
  controller_MB_FDE_507 Op2_DFF
       (.Clk(Clk),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .normal_piperun(normal_piperun));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit
   (ADDRARDADDR,
    PC_OF,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write);
  output [0:0]ADDRARDADDR;
  output PC_OF;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire PC_OF;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  controller_MB_MUXCY_XORCY_445 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .I0(I0),
        .S(S));
  controller_MB_LUT4__parameterized37_446 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_447 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .PC_OF(PC_OF),
        .\Using_FPGA.Native (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_448 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_449 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_375
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  output lopt_17;
  input lopt_18;
  input lopt_19;
  output lopt_20;
  input lopt_21;
  input lopt_22;
  output lopt_23;
  input lopt_24;
  input lopt_25;
  output lopt_26;
  input lopt_27;
  input lopt_28;
  output lopt_29;
  output lopt_30;
  output lopt_31;
  output lopt_32;
  output lopt_33;
  input lopt_34;
  input lopt_35;
  output lopt_36;
  input lopt_37;
  input lopt_38;
  output lopt_39;
  input lopt_40;
  input lopt_41;
  output lopt_42;
  output lopt_43;
  output lopt_44;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  controller_MB_MUXCY_XORCY_440 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_12(lopt_12),
        .lopt_13(lopt_13),
        .lopt_14(lopt_14),
        .lopt_15(lopt_15),
        .lopt_16(lopt_16),
        .lopt_17(lopt_17),
        .lopt_18(lopt_18),
        .lopt_19(lopt_19),
        .lopt_2(lopt_2),
        .lopt_20(lopt_20),
        .lopt_21(lopt_21),
        .lopt_22(lopt_22),
        .lopt_23(lopt_23),
        .lopt_24(lopt_24),
        .lopt_25(lopt_25),
        .lopt_26(lopt_26),
        .lopt_27(lopt_27),
        .lopt_28(lopt_28),
        .lopt_29(lopt_29),
        .lopt_3(lopt_3),
        .lopt_30(lopt_30),
        .lopt_31(lopt_31),
        .lopt_32(lopt_32),
        .lopt_33(lopt_33),
        .lopt_34(lopt_34),
        .lopt_35(lopt_35),
        .lopt_36(lopt_36),
        .lopt_37(lopt_37),
        .lopt_38(lopt_38),
        .lopt_39(lopt_39),
        .lopt_4(lopt_4),
        .lopt_40(lopt_40),
        .lopt_41(lopt_41),
        .lopt_42(lopt_42),
        .lopt_43(lopt_43),
        .lopt_44(lopt_44),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  controller_MB_LUT4__parameterized37_441 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_442 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_443 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_444 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_376
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_435 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_436 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_437 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_438 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_439 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_377
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_430 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_431 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_432 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_433 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_434 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_378
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_425 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_426 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_427 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_428 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_429 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_379
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_420 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_421 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_422 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_423 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_424 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_380
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_415 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_416 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_417 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_418 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_419 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_381
   (\Using_FPGA.Native ,
    LO,
    ADDRARDADDR,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \Using_FPGA.Native ;
  output LO;
  output [0:0]ADDRARDADDR;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_410 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_411 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_412 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_413 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_414 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_382
   (\Using_FPGA.Native ,
    LO,
    ADDRARDADDR,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \Using_FPGA.Native ;
  output LO;
  output [0:0]ADDRARDADDR;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_405 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_406 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_407 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_408 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_409 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_383
   (\Using_FPGA.Native ,
    LO,
    ADDRARDADDR,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \Using_FPGA.Native ;
  output LO;
  output [0:0]ADDRARDADDR;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_400 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_401 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_402 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_403 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_404 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_384
   (\Using_FPGA.Native ,
    LO,
    ADDRARDADDR,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \Using_FPGA.Native ;
  output LO;
  output [0:0]ADDRARDADDR;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_395 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_396 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_397 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_398 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_399 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_385
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    Carry_Out,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input Carry_Out;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_390 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37_391 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_392 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35_393 SUM_I
       (.S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_394 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module controller_PC_Bit_386
   (LO,
    ADDRARDADDR,
    \Using_FPGA.Native ,
    DI,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output LO;
  output [0:0]ADDRARDADDR;
  output \Using_FPGA.Native ;
  input DI;
  input [0:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ADDRARDADDR;
  wire [0:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire DI;
  wire I0;
  wire Jump;
  wire LO;
  wire PC_Write;
  wire S;
  wire \Set_DFF.PC_IF_DFF_n_0 ;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire nonvalid_IFetch_n_reg;
  wire [0:0]out;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = S;
  controller_MB_MUXCY_XORCY_387 MUXCY_XOR_I
       (.DI(DI),
        .LO(LO),
        .O(I0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  controller_MB_LUT4__parameterized37 NewPC_Mux
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .I0(I0),
        .Jump(Jump));
  controller_MB_SRL16E_388 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg));
  controller_MB_LUT4__parameterized35 SUM_I
       (.DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ));
  controller_MB_FDSE_389 \Set_DFF.PC_IF_DFF 
       (.ADDRARDADDR(ADDRARDADDR),
        .Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Set_DFF.PC_IF_DFF_n_0 ),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PC_Module" *) 
module controller_PC_Module
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    ADDRARDADDR,
    PC_OF,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    normal_piperun,
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ,
    ADDRBWRADDR,
    Jump,
    nonvalid_IFetch_n_reg,
    Buffer_Addr,
    Clk,
    out,
    PC_Write,
    DI);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [12:0]ADDRARDADDR;
  output PC_OF;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  input normal_piperun;
  input \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  input [12:0]ADDRBWRADDR;
  input Jump;
  input nonvalid_IFetch_n_reg;
  input [2:0]Buffer_Addr;
  input Clk;
  input [0:0]out;
  input PC_Write;
  input DI;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire [2:0]Buffer_Addr;
  wire Carry_In;
  wire Clk;
  wire DI;
  wire Jump;
  wire \Not_All_Bits.PC_GEN[18].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[19].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[20].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[21].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[22].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[23].PC_Bit_I_n_0 ;
  wire \Not_All_Bits.PC_GEN[24].PC_Bit_I_n_1 ;
  wire \Not_All_Bits.PC_GEN[25].PC_Bit_I_n_1 ;
  wire \Not_All_Bits.PC_GEN[26].PC_Bit_I_n_1 ;
  wire \Not_All_Bits.PC_GEN[27].PC_Bit_I_n_1 ;
  wire \Not_All_Bits.PC_GEN[28].PC_Bit_I_n_0 ;
  wire PC_OF;
  wire PC_Write;
  wire \Using_B36_S4.The_BRAMs[4].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire nonvalid_IFetch_n_reg;
  (* MAX_FANOUT = "0'b" *) (* RTL_MAX_FANOUT = "found" *) wire normal_piperun;
  wire [0:0]out;

  controller_PC_Bit \Not_All_Bits.PC_GEN[17].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[12]),
        .ADDRBWRADDR(ADDRBWRADDR[12]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[18].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .PC_OF(PC_OF),
        .PC_Write(PC_Write),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_375 \Not_All_Bits.PC_GEN[18].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[11]),
        .ADDRBWRADDR(ADDRBWRADDR[11]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[19].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[18].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_9),
        .lopt_11(lopt_10),
        .lopt_12(lopt_11),
        .lopt_13(lopt_12),
        .lopt_14(lopt_13),
        .lopt_15(lopt_14),
        .lopt_16(lopt_15),
        .lopt_17(lopt_16),
        .lopt_18(lopt_17),
        .lopt_19(lopt_18),
        .lopt_2(DI),
        .lopt_20(lopt_19),
        .lopt_21(lopt_20),
        .lopt_22(lopt_21),
        .lopt_23(lopt_22),
        .lopt_24(lopt_23),
        .lopt_25(lopt_24),
        .lopt_26(lopt_25),
        .lopt_27(lopt_26),
        .lopt_28(lopt_27),
        .lopt_29(lopt_28),
        .lopt_3(lopt_2),
        .lopt_30(lopt_29),
        .lopt_31(lopt_30),
        .lopt_32(lopt_31),
        .lopt_33(lopt_32),
        .lopt_34(lopt_33),
        .lopt_35(lopt_34),
        .lopt_36(lopt_35),
        .lopt_37(lopt_36),
        .lopt_38(lopt_37),
        .lopt_39(lopt_38),
        .lopt_4(lopt_3),
        .lopt_40(lopt_39),
        .lopt_41(lopt_40),
        .lopt_42(lopt_41),
        .lopt_43(lopt_42),
        .lopt_44(lopt_43),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .lopt_9(lopt_8),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_376 \Not_All_Bits.PC_GEN[19].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[10]),
        .ADDRBWRADDR(ADDRBWRADDR[10]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[20].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[19].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .lopt_2(lopt_40),
        .lopt_3(lopt_43),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_377 \Not_All_Bits.PC_GEN[20].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[9]),
        .ADDRBWRADDR(ADDRBWRADDR[9]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[21].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[20].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37),
        .lopt_3(lopt_42),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_378 \Not_All_Bits.PC_GEN[21].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[8]),
        .ADDRBWRADDR(ADDRBWRADDR[8]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[22].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[21].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .lopt_2(lopt_34),
        .lopt_3(lopt_41),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_379 \Not_All_Bits.PC_GEN[22].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[7]),
        .ADDRBWRADDR(ADDRBWRADDR[7]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[23].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[22].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .lopt(lopt_25),
        .lopt_1(lopt_26),
        .lopt_2(lopt_27),
        .lopt_3(lopt_31),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_380 \Not_All_Bits.PC_GEN[23].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[6]),
        .ADDRBWRADDR(ADDRBWRADDR[6]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[24].PC_Bit_I_n_1 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[23].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .lopt_2(lopt_24),
        .lopt_3(lopt_30),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_381 \Not_All_Bits.PC_GEN[24].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[5]),
        .ADDRBWRADDR(ADDRBWRADDR[5]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[25].PC_Bit_I_n_1 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[24].PC_Bit_I_n_1 ),
        .PC_Write(PC_Write),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .lopt(lopt_19),
        .lopt_1(lopt_20),
        .lopt_2(lopt_21),
        .lopt_3(lopt_29),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_382 \Not_All_Bits.PC_GEN[25].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[4]),
        .ADDRBWRADDR(ADDRBWRADDR[4]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[26].PC_Bit_I_n_1 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[25].PC_Bit_I_n_1 ),
        .PC_Write(PC_Write),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .lopt_3(lopt_28),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_383 \Not_All_Bits.PC_GEN[26].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[3]),
        .ADDRBWRADDR(ADDRBWRADDR[3]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[27].PC_Bit_I_n_1 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[26].PC_Bit_I_n_1 ),
        .PC_Write(PC_Write),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .lopt_3(lopt_15),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_384 \Not_All_Bits.PC_GEN[27].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[2]),
        .ADDRBWRADDR(ADDRBWRADDR[2]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\Not_All_Bits.PC_GEN[28].PC_Bit_I_n_0 ),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[27].PC_Bit_I_n_1 ),
        .PC_Write(PC_Write),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Using_B36_S4.The_BRAMs[4].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_14),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_385 \Not_All_Bits.PC_GEN[28].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[1]),
        .ADDRBWRADDR(ADDRBWRADDR[1]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_In),
        .Clk(Clk),
        .Jump(Jump),
        .LO(\Not_All_Bits.PC_GEN[28].PC_Bit_I_n_0 ),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_13),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
  controller_PC_Bit_386 \Not_All_Bits.PC_GEN[29].PC_Bit_I 
       (.ADDRARDADDR(ADDRARDADDR[0]),
        .ADDRBWRADDR(ADDRBWRADDR[0]),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .DI(DI),
        .Jump(Jump),
        .LO(Carry_In),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_12),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .out(out));
endmodule

(* ORIG_REF_NAME = "PreFetch_Buffer" *) 
module controller_PreFetch_Buffer
   (I179_in,
    \Result_Sel_reg[0] ,
    mbar_is_sleep_reg,
    mbar_is_sleep_reg_0,
    mbar_is_sleep_reg_1,
    \Result_Sel_reg[1] ,
    I210_in,
    I2,
    \Logic_Oper_reg[0] ,
    p_1_in,
    p_1_in48_in,
    jump2_I_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    mbar_decode_I_reg,
    Reg1_Addr,
    \Size_17to32.imm_Reg_reg[0] ,
    \Size_17to32.imm_Reg_reg[1] ,
    Imm_Value,
    PC_Incr,
    S,
    Unsigned_Op_reg,
    SR,
    E,
    load_Store_i2,
    mul_Executing0,
    inHibit_EX1,
    pc_write_I,
    reset_BIP_I8_out,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    D,
    \Size_17to32.imm_Reg_reg[15] ,
    of_mbar_decode,
    Sign_Extend_reg,
    inHibit_EX_reg,
    d_AS_I17_out,
    ex_Valid_reg,
    R_0,
    jump2_I_reg_0,
    \Using_LWX_SWX_instr.reservation_reg ,
    enable_Interrupts_I,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    Reg_Test_Equal_i,
    Reg_Test_Equal_N_i7_out,
    use_Reg_Neg_DI_i28_out,
    force2_i,
    force_Val1_i29_out,
    use_Reg_Neg_S_i30_out,
    force1_i31_out,
    byte_i14_out,
    break_Pipe_i_reg,
    break_Pipe_i_reg0,
    Select_Logic0,
    \write_Addr_I_reg[1] ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    nonvalid_IFetch_n_reg,
    \Using_FPGA.set_BIP_I_reg ,
    mtsmsr_write_i_reg,
    take_intr_2nd_cycle_reg,
    using_Imm_reg,
    mbar_hold_I_reg,
    missed_IFetch_reg,
    \Using_FPGA.Native_36 ,
    select_ALU_Carry_reg,
    Compare_Instr_reg,
    write_Reg_reg,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    is_swx_I_reg,
    write_Carry_I_reg,
    Sext16_reg,
    Sext8_reg,
    load_Store_i_reg,
    swx_ready_reg,
    is_lwx_I_reg,
    writing_reg,
    doublet_i_reg,
    byte_i_reg,
    R,
    Clk,
    CI,
    DATA_OUTA,
    mbar_hold_I_reg_0,
    ex_Valid,
    missed_IFetch,
    mul_Executing_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    out,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    inHibit_EX,
    \Using_FPGA.Native_40 ,
    mbar_sleep_reg,
    mul_Executing_reg_0,
    lmb_reg_write_reg,
    load_Store_i,
    lmb_reg_write,
    lmb_reg_read_Q,
    \No_ECC.lmb_as_reg ,
    swx_ready,
    lmb_reg_read_Q_reg,
    EX_Result,
    Res_Forward2,
    Reg2_Data,
    \Size_17to32.imm_Reg_reg[0]_0 ,
    Use_Imm_Reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    jump2_I_reg_1,
    CI64_in,
    mul_Executing,
    MSR,
    INTC_IRQ,
    p_76_in,
    \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ,
    LMB_Ready,
    nonvalid_IFetch_n_reg_0,
    \Using_FPGA.set_BIP_I_reg_0 ,
    mtsmsr_write_i_reg_0,
    take_intr_2nd_cycle_reg_0,
    break_Pipe_i_reg__0,
    lmb_as,
    Sl_Rdy,
    \Using_FPGA.Native_41 ,
    select_ALU_Carry_reg_0,
    Compare_Instr,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    I214_out,
    is_swx_I_reg_0,
    write_Carry_I_reg_0,
    Sext16_reg_0,
    Sext8_reg_0,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    is_lwx_I,
    Doublet,
    Byte,
    lopt,
    lopt_1);
  output I179_in;
  output \Result_Sel_reg[0] ;
  output mbar_is_sleep_reg;
  output mbar_is_sleep_reg_0;
  output mbar_is_sleep_reg_1;
  output \Result_Sel_reg[1] ;
  output I210_in;
  output I2;
  output \Logic_Oper_reg[0] ;
  output [0:0]p_1_in;
  output p_1_in48_in;
  output jump2_I_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output mbar_decode_I_reg;
  output [0:0]Reg1_Addr;
  output \Size_17to32.imm_Reg_reg[0] ;
  output \Size_17to32.imm_Reg_reg[1] ;
  output [13:0]Imm_Value;
  output PC_Incr;
  output S;
  output Unsigned_Op_reg;
  output [0:0]SR;
  output [0:0]E;
  output load_Store_i2;
  output mul_Executing0;
  output inHibit_EX1;
  output pc_write_I;
  output reset_BIP_I8_out;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output D;
  output [0:0]\Size_17to32.imm_Reg_reg[15] ;
  output of_mbar_decode;
  output Sign_Extend_reg;
  output inHibit_EX_reg;
  output d_AS_I17_out;
  output ex_Valid_reg;
  output R_0;
  output jump2_I_reg_0;
  output \Using_LWX_SWX_instr.reservation_reg ;
  output enable_Interrupts_I;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output Reg_Test_Equal_i;
  output Reg_Test_Equal_N_i7_out;
  output use_Reg_Neg_DI_i28_out;
  output force2_i;
  output force_Val1_i29_out;
  output use_Reg_Neg_S_i30_out;
  output force1_i31_out;
  output byte_i14_out;
  output break_Pipe_i_reg;
  output break_Pipe_i_reg0;
  output Select_Logic0;
  output [3:0]\write_Addr_I_reg[1] ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output nonvalid_IFetch_n_reg;
  output \Using_FPGA.set_BIP_I_reg ;
  output mtsmsr_write_i_reg;
  output take_intr_2nd_cycle_reg;
  output using_Imm_reg;
  output mbar_hold_I_reg;
  output missed_IFetch_reg;
  output \Using_FPGA.Native_36 ;
  output select_ALU_Carry_reg;
  output Compare_Instr_reg;
  output write_Reg_reg;
  output \Using_FPGA.Native_37 ;
  output \Using_FPGA.Native_38 ;
  output \Using_FPGA.Native_39 ;
  output is_swx_I_reg;
  output write_Carry_I_reg;
  output Sext16_reg;
  output Sext8_reg;
  output load_Store_i_reg;
  output swx_ready_reg;
  output is_lwx_I_reg;
  output writing_reg;
  output doublet_i_reg;
  output byte_i_reg;
  input R;
  input Clk;
  input CI;
  input [0:31]DATA_OUTA;
  input mbar_hold_I_reg_0;
  input ex_Valid;
  input missed_IFetch;
  input mul_Executing_reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]out;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input inHibit_EX;
  input \Using_FPGA.Native_40 ;
  input mbar_sleep_reg;
  input mul_Executing_reg_0;
  input lmb_reg_write_reg;
  input load_Store_i;
  input lmb_reg_write;
  input lmb_reg_read_Q;
  input \No_ECC.lmb_as_reg ;
  input swx_ready;
  input lmb_reg_read_Q_reg;
  input [0:31]EX_Result;
  input Res_Forward2;
  input [0:31]Reg2_Data;
  input [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  input Use_Imm_Reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  input jump2_I_reg_1;
  input CI64_in;
  input mul_Executing;
  input [2:0]MSR;
  input INTC_IRQ;
  input p_76_in;
  input [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  input LMB_Ready;
  input nonvalid_IFetch_n_reg_0;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input mtsmsr_write_i_reg_0;
  input take_intr_2nd_cycle_reg_0;
  input break_Pipe_i_reg__0;
  input lmb_as;
  input Sl_Rdy;
  input \Using_FPGA.Native_41 ;
  input select_ALU_Carry_reg_0;
  input Compare_Instr;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input I214_out;
  input is_swx_I_reg_0;
  input write_Carry_I_reg_0;
  input Sext16_reg_0;
  input Sext8_reg_0;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input is_lwx_I;
  input Doublet;
  input Byte;
  output lopt;
  input lopt_1;

  wire \Buffer_DFFs[2].MUXCY_XOR_I_n_1 ;
  wire \Buffer_DFFs[3].MUXCY_XOR_I_n_0 ;
  wire Byte;
  wire CI;
  wire CI64_in;
  wire Clk;
  wire Compare_Instr;
  wire Compare_Instr_reg;
  wire D;
  wire D0_in;
  wire D1_in;
  wire [0:31]DATA_OUTA;
  wire Doublet;
  wire [0:0]E;
  wire [0:31]EX_Result;
  wire I179_in;
  wire I2;
  wire I210_in;
  wire I214_out;
  wire INTC_IRQ;
  wire [13:0]Imm_Value;
  wire LMB_Ready;
  wire LO;
  wire \Logic_Oper_reg[0] ;
  wire [2:0]MSR;
  wire \No_ECC.lmb_as_reg ;
  wire PC_Incr;
  wire \PreFetch_Buffers[0].SRL16E_I_n_12 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_13 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_14 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_15 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_4 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_6 ;
  wire \PreFetch_Buffers[10].SRL16E_I_n_0 ;
  wire \PreFetch_Buffers[11].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[14].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[1].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[8].SRL16E_I_n_0 ;
  wire \PreFetch_Buffers[9].SRL16E_I_n_0 ;
  wire \PreFetch_Buffers[9].SRL16E_I_n_3 ;
  wire R;
  wire R_0;
  wire [0:0]Reg1_Addr;
  wire [0:31]Reg2_Data;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire Res_Forward2;
  wire \Result_Sel_reg[0] ;
  wire \Result_Sel_reg[1] ;
  wire S;
  wire S1_out;
  wire S3_out;
  wire [0:0]SR;
  wire S_0;
  wire Select_Logic0;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sign_Extend_reg;
  wire \Size_17to32.imm_Reg_reg[0] ;
  wire [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  wire [0:0]\Size_17to32.imm_Reg_reg[15] ;
  wire \Size_17to32.imm_Reg_reg[1] ;
  wire Sl_Rdy;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire Unsigned_Op_reg;
  wire Use_Imm_Reg;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire break_Pipe_i_reg;
  wire break_Pipe_i_reg0;
  wire break_Pipe_i_reg__0;
  wire byte_i14_out;
  wire byte_i_reg;
  wire d_AS_I17_out;
  wire doublet_i_reg;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_Valid_reg;
  wire force1_i31_out;
  wire force2_i;
  wire force_Val1_i29_out;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_reg;
  wire is_lwx_I;
  wire is_lwx_I0;
  wire is_lwx_I_reg;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire jump2_I_reg;
  wire jump2_I_reg_0;
  wire jump2_I_reg_1;
  wire lmb_as;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_write;
  wire lmb_reg_write_reg;
  wire load_Store_i;
  wire load_Store_i2;
  wire load_Store_i_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire mbar_decode_I_reg;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_is_sleep_reg;
  wire mbar_is_sleep_reg_0;
  wire mbar_is_sleep_reg_1;
  wire mbar_sleep_reg;
  wire missed_IFetch;
  wire missed_IFetch_reg;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing;
  wire mul_Executing0;
  wire mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire of_mbar_decode;
  wire of_valid_FDR_I_n_17;
  wire [0:0]out;
  wire [0:0]p_1_in;
  wire p_1_in48_in;
  wire p_76_in;
  wire pc_write_I;
  wire reset_BIP_I8_out;
  wire select_ALU_Carry_reg;
  wire select_ALU_Carry_reg_0;
  wire swx_ready;
  wire swx_ready_reg;
  wire take_intr_2nd_cycle_reg;
  wire take_intr_2nd_cycle_reg_0;
  wire use_Reg_Neg_DI_i28_out;
  wire use_Reg_Neg_S_i30_out;
  wire using_Imm_reg;
  wire [3:0]\write_Addr_I_reg[1] ;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Reg_reg;
  wire writing_reg;

  controller_MB_FDS \Buffer_DFFs[1].FDS_I 
       (.Clk(Clk),
        .D0_in(D0_in),
        .R(R),
        .S_0(S_0),
        .mbar_is_sleep_reg(mbar_is_sleep_reg_1),
        .mul_Executing_reg(mul_Executing_reg));
  controller_MB_MUXCY_XORCY \Buffer_DFFs[1].MUXCY_XOR_I 
       (.D0_in(D0_in),
        .LO(LO),
        .S_0(S_0),
        .lopt(lopt_4));
  controller_MB_FDS_22 \Buffer_DFFs[2].FDS_I 
       (.Clk(Clk),
        .O(\Buffer_DFFs[2].MUXCY_XOR_I_n_1 ),
        .R(R),
        .mbar_is_sleep_reg(mbar_is_sleep_reg_0));
  controller_MB_MUXCY_XORCY_23 \Buffer_DFFs[2].MUXCY_XOR_I 
       (.LO(LO),
        .O(\Buffer_DFFs[2].MUXCY_XOR_I_n_1 ),
        .S(S1_out),
        .\Using_FPGA.Native (\Buffer_DFFs[3].MUXCY_XOR_I_n_0 ),
        .lopt(lopt),
        .lopt_1(LMB_Ready),
        .lopt_2(lopt_1),
        .lopt_3(nonvalid_IFetch_n_reg_0),
        .lopt_4(lopt_2),
        .lopt_5(S3_out),
        .lopt_6(lopt_3),
        .lopt_7(lopt_4),
        .lopt_8(S_0),
        .mul_Executing_reg(mul_Executing_reg));
  controller_MB_FDS_24 \Buffer_DFFs[3].FDS_I 
       (.Clk(Clk),
        .O(D1_in),
        .R(R),
        .mbar_is_sleep_reg(mbar_is_sleep_reg));
  controller_MB_MUXCY_XORCY_25 \Buffer_DFFs[3].MUXCY_XOR_I 
       (.CI(CI),
        .LO(\Buffer_DFFs[3].MUXCY_XOR_I_n_0 ),
        .O(D1_in),
        .S(S3_out),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .mul_Executing_reg(mul_Executing_reg));
  controller_MB_SRL16E \PreFetch_Buffers[0].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Compare_Instr_reg(\PreFetch_Buffers[0].SRL16E_I_n_14 ),
        .D(D),
        .DATA_OUTA(DATA_OUTA[0]),
        .MSR(MSR[1:0]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .\Size_17to32.imm_Reg_reg[15] (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\PreFetch_Buffers[2].SRL16E_I_n_2 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (Sign_Extend_reg),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_2 (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\PreFetch_Buffers[9].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\PreFetch_Buffers[8].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\PreFetch_Buffers[10].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Size_17to32.imm_Reg_reg[1] ),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (Imm_Value[5]),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 (Imm_Value[6]),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Imm_Value[0]),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[0].SRL16E_I_n_6 ),
        .\Using_FPGA.Native_2 (force2_i),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_6 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_7 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_8 (mbar_is_sleep_reg_1),
        .\Using_FPGA.enable_Interrupts_I_reg (\PreFetch_Buffers[0].SRL16E_I_n_12 ),
        .\Using_FPGA.set_BIP_I_reg (\PreFetch_Buffers[0].SRL16E_I_n_15 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .force1_i31_out(force1_i31_out),
        .force_Val1_i29_out(force_Val1_i29_out),
        .is_lwx_I_reg(\PreFetch_Buffers[0].SRL16E_I_n_13 ),
        .use_Reg_Neg_DI_i28_out(use_Reg_Neg_DI_i28_out),
        .use_Reg_Neg_S_i30_out(use_Reg_Neg_S_i30_out),
        .write_Carry_I_reg(\PreFetch_Buffers[0].SRL16E_I_n_5 ),
        .writing_reg(writing_reg));
  controller_MB_SRL16E_26 \PreFetch_Buffers[10].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[10]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .out(out),
        .\write_Addr_I_reg[4] (\PreFetch_Buffers[10].SRL16E_I_n_0 ),
        .\write_Addr_I_reg[4]_0 (\write_Addr_I_reg[1] [0]));
  controller_MB_SRL16E_27 \PreFetch_Buffers[11].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[11]),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (I2),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .\Using_FPGA.set_BIP_I_reg (\PreFetch_Buffers[11].SRL16E_I_n_2 ),
        .\Using_FPGA.set_BIP_I_reg_0 (\Using_FPGA.set_BIP_I_reg_0 ),
        .inHibit_EX_reg(inHibit_EX_reg),
        .jump2_I_reg(jump2_I_reg),
        .mul_Executing_reg(mul_Executing_reg),
        .p_1_in48_in(p_1_in48_in));
  controller_MB_SRL16E_28 \PreFetch_Buffers[12].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[12]),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_29 \PreFetch_Buffers[13].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[13]),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_30 \PreFetch_Buffers[14].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[14]),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .mbar_decode_I_reg(mbar_decode_I_reg),
        .mbar_hold_I_reg(\PreFetch_Buffers[14].SRL16E_I_n_1 ));
  controller_MB_SRL16E_31 \PreFetch_Buffers[15].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[15]),
        .Reg1_Addr(Reg1_Addr),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_32 \PreFetch_Buffers[16].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[16]),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value[13:1]),
        .Reg2_Data(Reg2_Data),
        .Res_Forward2(Res_Forward2),
        .\Size_17to32.imm_Reg_reg[0] (\Size_17to32.imm_Reg_reg[0] ),
        .\Size_17to32.imm_Reg_reg[0]_0 (\Size_17to32.imm_Reg_reg[0]_0 ),
        .Use_Imm_Reg(Use_Imm_Reg),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (of_valid_FDR_I_n_17),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Size_17to32.imm_Reg_reg[1] ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Imm_Value[0]),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_31 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_32 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_33 (mbar_is_sleep_reg_1),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] ));
  controller_MB_SRL16E_33 \PreFetch_Buffers[17].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[17]),
        .\Size_17to32.imm_Reg_reg[1] (\Size_17to32.imm_Reg_reg[1] ),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_34 \PreFetch_Buffers[18].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[18]),
        .Imm_Value(Imm_Value[13]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_35 \PreFetch_Buffers[19].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[19]),
        .Imm_Value(Imm_Value[12]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_36 \PreFetch_Buffers[1].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[1]),
        .\Result_Sel_reg[1] (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (I2),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\PreFetch_Buffers[9].SRL16E_I_n_3 ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Size_17to32.imm_Reg_reg[1] ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Imm_Value[0]),
        .\Using_FPGA.Native (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_2 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .mtsmsr_write_i_reg(\PreFetch_Buffers[1].SRL16E_I_n_3 ),
        .reset_BIP_I8_out(reset_BIP_I8_out));
  controller_MB_SRL16E_37 \PreFetch_Buffers[20].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[20]),
        .Imm_Value(Imm_Value[11]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_38 \PreFetch_Buffers[21].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[21]),
        .Imm_Value(Imm_Value[10]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_39 \PreFetch_Buffers[22].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[22]),
        .Imm_Value(Imm_Value[9]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_40 \PreFetch_Buffers[23].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[23]),
        .Imm_Value(Imm_Value[8]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_41 \PreFetch_Buffers[24].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[24]),
        .Imm_Value(Imm_Value[7]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_42 \PreFetch_Buffers[25].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[25]),
        .Imm_Value(Imm_Value[6]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_43 \PreFetch_Buffers[26].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[26]),
        .Imm_Value(Imm_Value[5]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_44 \PreFetch_Buffers[27].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[27]),
        .Imm_Value(Imm_Value[4]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_45 \PreFetch_Buffers[28].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[28]),
        .Imm_Value(Imm_Value[3]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_46 \PreFetch_Buffers[29].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[29]),
        .Imm_Value(Imm_Value[2]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_47 \PreFetch_Buffers[2].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Compare_Instr_reg(I210_in),
        .DATA_OUTA(DATA_OUTA[2]),
        .Imm_Value(Imm_Value[10]),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\PreFetch_Buffers[0].SRL16E_I_n_15 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ),
        .\Using_B36_S4.The_BRAMs[4].RAMB36_I1 (\Size_17to32.imm_Reg_reg[1] ),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .is_swx_I_reg(\PreFetch_Buffers[2].SRL16E_I_n_3 ),
        .write_Reg_reg(\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .write_Reg_reg_0(\PreFetch_Buffers[2].SRL16E_I_n_2 ));
  controller_MB_SRL16E_48 \PreFetch_Buffers[30].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[30]),
        .Imm_Value(Imm_Value[1]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_49 \PreFetch_Buffers[31].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[31]),
        .\Size_17to32.imm_Reg_reg[15] (Imm_Value[0]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1));
  controller_MB_SRL16E_50 \PreFetch_Buffers[3].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[3]),
        .Select_Logic_reg(I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_2 (mbar_is_sleep_reg_1),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_40 ),
        .inHibit_EX(inHibit_EX),
        .is_swx_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .jump2_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_3 ),
        .mbar_hold_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_2 ));
  controller_MB_SRL16E_51 \PreFetch_Buffers[4].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[4]),
        .Imm_Value(Imm_Value[10]),
        .\Logic_Oper_reg[0] (\Logic_Oper_reg[0] ),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 (\PreFetch_Buffers[0].SRL16E_I_n_12 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 (\PreFetch_Buffers[0].SRL16E_I_n_13 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\PreFetch_Buffers[10].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\PreFetch_Buffers[8].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (\PreFetch_Buffers[9].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (mbar_decode_I_reg),
        .\Using_FPGA.Native (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_2 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_3 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .enable_Interrupts_I(enable_Interrupts_I),
        .is_lwx_I0(is_lwx_I0),
        .of_mbar_decode(of_mbar_decode),
        .using_Imm_reg(\PreFetch_Buffers[4].SRL16E_I_n_1 ));
  controller_MB_SRL16E_52 \PreFetch_Buffers[5].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[5]),
        .Imm_Value(Imm_Value[3:2]),
        .\Logic_Oper_reg[1] (p_1_in),
        .Sext16_reg(\PreFetch_Buffers[5].SRL16E_I_n_3 ),
        .Sign_Extend_reg(Sign_Extend_reg),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (jump2_I_reg),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .inHibit_EX_reg(\PreFetch_Buffers[3].SRL16E_I_n_3 ),
        .jump2_I_reg(jump2_I_reg_0),
        .mul_Executing_reg(mul_Executing_reg),
        .out(out),
        .p_1_in48_in(p_1_in48_in),
        .write_Reg_reg(\PreFetch_Buffers[5].SRL16E_I_n_1 ));
  controller_MB_SRL16E_53 \PreFetch_Buffers[6].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[6]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .p_1_in48_in(p_1_in48_in));
  controller_MB_SRL16E_54 \PreFetch_Buffers[7].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[7]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .out(out),
        .\write_Addr_I_reg[1] (\write_Addr_I_reg[1] [3]));
  controller_MB_SRL16E_55 \PreFetch_Buffers[8].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[8]),
        .\Using_FPGA.Native (mbar_is_sleep_reg),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_1),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .out(out),
        .\write_Addr_I_reg[2] (\PreFetch_Buffers[8].SRL16E_I_n_0 ),
        .\write_Addr_I_reg[2]_0 (\write_Addr_I_reg[1] [2]));
  controller_MB_SRL16E_56 \PreFetch_Buffers[9].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .DATA_OUTA(DATA_OUTA[9]),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (I2),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (p_1_in),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\PreFetch_Buffers[10].SRL16E_I_n_0 ),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (\PreFetch_Buffers[8].SRL16E_I_n_0 ),
        .\Using_FPGA.Native (\PreFetch_Buffers[9].SRL16E_I_n_0 ),
        .\Using_FPGA.Native_0 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_1 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_2 (mbar_is_sleep_reg_1),
        .\Using_FPGA.reset_BIP_I_reg (\PreFetch_Buffers[9].SRL16E_I_n_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .out(out),
        .\write_Addr_I_reg[3] (\write_Addr_I_reg[1] [1]));
  controller_MB_FDR of_valid_FDR_I
       (.Byte(Byte),
        .CI64_in(CI64_in),
        .Clk(Clk),
        .Compare_Instr(Compare_Instr),
        .Compare_Instr_reg(Compare_Instr_reg),
        .D0_in(D0_in),
        .D1_in(D1_in),
        .Doublet(Doublet),
        .E(E),
        .I214_out(I214_out),
        .INTC_IRQ(INTC_IRQ),
        .Imm_Value(Imm_Value[6:5]),
        .LMB_Ready(LMB_Ready),
        .MSR({MSR[2],MSR[0]}),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .PC_Incr(PC_Incr),
        .R(R),
        .R_0(R_0),
        .S(S),
        .S1_out(S1_out),
        .S3_out(S3_out),
        .SR(SR),
        .Select_Logic0(Select_Logic0),
        .Sext16_reg(Sext16_reg),
        .Sext16_reg_0(Sext16_reg_0),
        .Sext8_reg(Sext8_reg),
        .Sext8_reg_0(Sext8_reg_0),
        .\Size_17to32.imm_Reg_reg[15] (I179_in),
        .\Size_17to32.imm_Reg_reg[15]_0 (\Size_17to32.imm_Reg_reg[15] ),
        .Sl_Rdy(Sl_Rdy),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\PreFetch_Buffers[5].SRL16E_I_n_3 ),
        .Unsigned_Op_reg(Unsigned_Op_reg),
        .Use_Imm_Reg(Use_Imm_Reg),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (I2),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_0 (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_1 (\Result_Sel_reg[1] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_10 (\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_11 (\PreFetch_Buffers[0].SRL16E_I_n_5 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_2 (\Result_Sel_reg[0] ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_3 (I210_in),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_4 (\Using_FPGA.Native_33 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_5 (\PreFetch_Buffers[0].SRL16E_I_n_15 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_6 (\PreFetch_Buffers[1].SRL16E_I_n_3 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_7 (\PreFetch_Buffers[0].SRL16E_I_n_6 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_8 (\PreFetch_Buffers[0].SRL16E_I_n_14 ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1_9 (\PreFetch_Buffers[2].SRL16E_I_n_3 ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1 (\Logic_Oper_reg[0] ),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 (p_1_in),
        .\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 (\PreFetch_Buffers[4].SRL16E_I_n_1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\PreFetch_Buffers[14].SRL16E_I_n_1 ),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (Imm_Value[0]),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 (\PreFetch_Buffers[5].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (of_valid_FDR_I_n_17),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_2 (\Buffer_DFFs[2].MUXCY_XOR_I_n_1 ),
        .\Using_FPGA.Native_3 (mbar_is_sleep_reg_1),
        .\Using_FPGA.Native_4 (mbar_is_sleep_reg_0),
        .\Using_FPGA.Native_5 (mbar_is_sleep_reg),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ),
        .\Using_FPGA.set_BIP_I_reg_0 (\PreFetch_Buffers[11].SRL16E_I_n_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_LWX_SWX_instr.reservation_reg ),
        .\Using_LWX_SWX_instr.reservation_reg_0 (\Using_LWX_SWX_instr.reservation_reg_0 ),
        .break_Pipe_i_reg(break_Pipe_i_reg),
        .break_Pipe_i_reg0(break_Pipe_i_reg0),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .byte_i14_out(byte_i14_out),
        .byte_i_reg(byte_i_reg),
        .d_AS_I17_out(d_AS_I17_out),
        .doublet_i_reg(doublet_i_reg),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(ex_Valid_reg),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX1(inHibit_EX1),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I0(is_lwx_I0),
        .is_lwx_I_reg(is_lwx_I_reg),
        .is_swx_I_reg(is_swx_I_reg),
        .is_swx_I_reg_0(is_swx_I_reg_0),
        .jump2_I_reg(jump2_I_reg_1),
        .lmb_as(lmb_as),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q_reg),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write_reg(lmb_reg_write_reg),
        .load_Store_i(load_Store_i),
        .load_Store_i2(load_Store_i2),
        .load_Store_i_reg(load_Store_i_reg),
        .mbar_hold_I_reg(mbar_hold_I_reg),
        .mbar_hold_I_reg_0(mbar_hold_I_reg_0),
        .mbar_sleep_reg(mbar_sleep_reg),
        .missed_IFetch(missed_IFetch),
        .missed_IFetch_reg(missed_IFetch_reg),
        .mtsmsr_write_i_reg(mtsmsr_write_i_reg),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_0),
        .mul_Executing(mul_Executing),
        .mul_Executing0(mul_Executing0),
        .mul_Executing_reg(mul_Executing_reg),
        .mul_Executing_reg_0(mul_Executing_reg_0),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .nonvalid_IFetch_n_reg_0(nonvalid_IFetch_n_reg_0),
        .out(out),
        .p_76_in(p_76_in),
        .pc_write_I(pc_write_I),
        .select_ALU_Carry_reg(select_ALU_Carry_reg),
        .select_ALU_Carry_reg_0(select_ALU_Carry_reg_0),
        .swx_ready(swx_ready),
        .swx_ready_reg(swx_ready_reg),
        .take_intr_2nd_cycle_reg(take_intr_2nd_cycle_reg),
        .take_intr_2nd_cycle_reg_0(take_intr_2nd_cycle_reg_0),
        .using_Imm_reg(using_Imm_reg),
        .write_Carry_I_reg(write_Carry_I_reg),
        .write_Carry_I_reg_0(write_Carry_I_reg_0),
        .write_Reg_reg(write_Reg_reg));
endmodule

(* ORIG_REF_NAME = "RAM_Module_Top" *) 
module controller_RAM_Module_Top
   (DATA_OUTA,
    DATA_OUTB,
    LMB_AddrStrobe,
    Clk,
    ENB,
    ADDRARDADDR,
    ADDRBWRADDR,
    DATA_INB,
    WEB);
  output [0:31]DATA_OUTA;
  output [0:31]DATA_OUTB;
  input LMB_AddrStrobe;
  input Clk;
  input ENB;
  input [12:0]ADDRARDADDR;
  input [12:0]ADDRBWRADDR;
  input [0:31]DATA_INB;
  input [0:3]WEB;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire Clk;
  wire [0:31]DATA_INB;
  wire [0:31]DATA_OUTA;
  wire [0:31]DATA_OUTB;
  wire ENB;
  wire LMB_AddrStrobe;
  wire [0:3]WEB;
  wire \NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:4]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[0],DATA_INB[1],DATA_INB[2],DATA_INB[3]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[0],DATA_OUTA[1],DATA_OUTA[2],DATA_OUTA[3]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[0],DATA_OUTB[1],DATA_OUTB[2],DATA_OUTB[3]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[0]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[4],DATA_INB[5],DATA_INB[6],DATA_INB[7]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[4],DATA_OUTA[5],DATA_OUTA[6],DATA_OUTA[7]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[4],DATA_OUTB[5],DATA_OUTB[6],DATA_OUTB[7]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[0]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[8],DATA_INB[9],DATA_INB[10],DATA_INB[11]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[8],DATA_OUTA[9],DATA_OUTA[10],DATA_OUTA[11]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[8],DATA_OUTB[9],DATA_OUTB[10],DATA_OUTB[11]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[1]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[12],DATA_INB[13],DATA_INB[14],DATA_INB[15]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[12],DATA_OUTA[13],DATA_OUTA[14],DATA_OUTA[15]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[12],DATA_OUTB[13],DATA_OUTB[14],DATA_OUTB[15]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[1]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[4].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[16],DATA_INB[17],DATA_INB[18],DATA_INB[19]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[16],DATA_OUTA[17],DATA_OUTA[18],DATA_OUTA[19]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[16],DATA_OUTB[17],DATA_OUTB[18],DATA_OUTB[19]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[4].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[2]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[5].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[20],DATA_INB[21],DATA_INB[22],DATA_INB[23]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[20],DATA_OUTA[21],DATA_OUTA[22],DATA_OUTA[23]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[20],DATA_OUTB[21],DATA_OUTB[22],DATA_OUTB[23]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[5].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[2]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[24],DATA_INB[25],DATA_INB[26],DATA_INB[27]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[24],DATA_OUTA[25],DATA_OUTA[26],DATA_OUTA[27]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[24],DATA_OUTB[25],DATA_OUTB[26],DATA_OUTB[27]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[6].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[3]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 
       (.ADDRARDADDR({1'b0,ADDRARDADDR,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,ADDRBWRADDR,1'b0,1'b0}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[28],DATA_INB[29],DATA_INB[30],DATA_INB[31]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOADO_UNCONNECTED [31:4],DATA_OUTA[28],DATA_OUTA[29],DATA_OUTA[30],DATA_OUTA[31]}),
        .DOBDO({\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOBDO_UNCONNECTED [31:4],DATA_OUTB[28],DATA_OUTB[29],DATA_OUTB[30],DATA_OUTB[31]}),
        .DOPADOP(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(LMB_AddrStrobe),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_B36_S4.The_BRAMs[7].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[3]}));
endmodule

(* ORIG_REF_NAME = "Register_File" *) 
module controller_Register_File
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:31]Reg1_Data;
  output [0:31]Data_Write;
  output [0:31]Reg2_Data;
  input Clk;
  input [0:31]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:31]Data_Write;
  wire [0:31]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:31]Reg1_Data;
  wire [0:31]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_Register_File_Bit \Using_FPGA.Gen_RegFile[0].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[0]),
        .EX_Result(EX_Result[0]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[0]),
        .Reg2_Data(Reg2_Data[0]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_281 \Using_FPGA.Gen_RegFile[10].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[10]),
        .EX_Result(EX_Result[10]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[10]),
        .Reg2_Data(Reg2_Data[10]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_282 \Using_FPGA.Gen_RegFile[11].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[11]),
        .EX_Result(EX_Result[11]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[11]),
        .Reg2_Data(Reg2_Data[11]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_283 \Using_FPGA.Gen_RegFile[12].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[12]),
        .EX_Result(EX_Result[12]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[12]),
        .Reg2_Data(Reg2_Data[12]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_284 \Using_FPGA.Gen_RegFile[13].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[13]),
        .EX_Result(EX_Result[13]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[13]),
        .Reg2_Data(Reg2_Data[13]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_285 \Using_FPGA.Gen_RegFile[14].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[14]),
        .EX_Result(EX_Result[14]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[14]),
        .Reg2_Data(Reg2_Data[14]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_286 \Using_FPGA.Gen_RegFile[15].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[15]),
        .EX_Result(EX_Result[15]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[15]),
        .Reg2_Data(Reg2_Data[15]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_287 \Using_FPGA.Gen_RegFile[16].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[16]),
        .EX_Result(EX_Result[16]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[16]),
        .Reg2_Data(Reg2_Data[16]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_288 \Using_FPGA.Gen_RegFile[17].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[17]),
        .EX_Result(EX_Result[17]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[17]),
        .Reg2_Data(Reg2_Data[17]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_289 \Using_FPGA.Gen_RegFile[18].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[18]),
        .EX_Result(EX_Result[18]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[18]),
        .Reg2_Data(Reg2_Data[18]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_290 \Using_FPGA.Gen_RegFile[19].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[19]),
        .EX_Result(EX_Result[19]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[19]),
        .Reg2_Data(Reg2_Data[19]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_291 \Using_FPGA.Gen_RegFile[1].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[1]),
        .EX_Result(EX_Result[1]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[1]),
        .Reg2_Data(Reg2_Data[1]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_292 \Using_FPGA.Gen_RegFile[20].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[20]),
        .EX_Result(EX_Result[20]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[20]),
        .Reg2_Data(Reg2_Data[20]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_293 \Using_FPGA.Gen_RegFile[21].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[21]),
        .EX_Result(EX_Result[21]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[21]),
        .Reg2_Data(Reg2_Data[21]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_294 \Using_FPGA.Gen_RegFile[22].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[22]),
        .EX_Result(EX_Result[22]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[22]),
        .Reg2_Data(Reg2_Data[22]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_295 \Using_FPGA.Gen_RegFile[23].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[23]),
        .EX_Result(EX_Result[23]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[23]),
        .Reg2_Data(Reg2_Data[23]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_296 \Using_FPGA.Gen_RegFile[24].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[24]),
        .EX_Result(EX_Result[24]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[24]),
        .Reg2_Data(Reg2_Data[24]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_297 \Using_FPGA.Gen_RegFile[25].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[25]),
        .EX_Result(EX_Result[25]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[25]),
        .Reg2_Data(Reg2_Data[25]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_298 \Using_FPGA.Gen_RegFile[26].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[26]),
        .EX_Result(EX_Result[26]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[26]),
        .Reg2_Data(Reg2_Data[26]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_299 \Using_FPGA.Gen_RegFile[27].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[27]),
        .EX_Result(EX_Result[27]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[27]),
        .Reg2_Data(Reg2_Data[27]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_300 \Using_FPGA.Gen_RegFile[28].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[28]),
        .EX_Result(EX_Result[28]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[28]),
        .Reg2_Data(Reg2_Data[28]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_301 \Using_FPGA.Gen_RegFile[29].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[29]),
        .EX_Result(EX_Result[29]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[29]),
        .Reg2_Data(Reg2_Data[29]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_302 \Using_FPGA.Gen_RegFile[2].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[2]),
        .EX_Result(EX_Result[2]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[2]),
        .Reg2_Data(Reg2_Data[2]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_303 \Using_FPGA.Gen_RegFile[30].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[30]),
        .EX_Result(EX_Result[30]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[30]),
        .Reg2_Data(Reg2_Data[30]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_304 \Using_FPGA.Gen_RegFile[31].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[31]),
        .EX_Result(EX_Result[31]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[31]),
        .Reg2_Data(Reg2_Data[31]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_305 \Using_FPGA.Gen_RegFile[3].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[3]),
        .EX_Result(EX_Result[3]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[3]),
        .Reg2_Data(Reg2_Data[3]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_306 \Using_FPGA.Gen_RegFile[4].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[4]),
        .EX_Result(EX_Result[4]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[4]),
        .Reg2_Data(Reg2_Data[4]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_307 \Using_FPGA.Gen_RegFile[5].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[5]),
        .EX_Result(EX_Result[5]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[5]),
        .Reg2_Data(Reg2_Data[5]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_308 \Using_FPGA.Gen_RegFile[6].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[6]),
        .EX_Result(EX_Result[6]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[6]),
        .Reg2_Data(Reg2_Data[6]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_309 \Using_FPGA.Gen_RegFile[7].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[7]),
        .EX_Result(EX_Result[7]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[7]),
        .Reg2_Data(Reg2_Data[7]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_310 \Using_FPGA.Gen_RegFile[8].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[8]),
        .EX_Result(EX_Result[8]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[8]),
        .Reg2_Data(Reg2_Data[8]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_Register_File_Bit_311 \Using_FPGA.Gen_RegFile[9].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[9]),
        .EX_Result(EX_Result[9]),
        .Imm_Value(Imm_Value),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data[9]),
        .Reg2_Data(Reg2_Data[9]),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_373 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_374 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_281
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_371 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_372 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_282
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_369 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_370 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_283
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_367 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_368 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_284
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_365 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_366 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_285
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_363 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_364 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_286
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_361 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_362 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_287
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_359 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_360 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_288
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_357 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_358 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_289
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_355 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_356 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_290
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_353 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_354 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_291
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_351 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_352 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_292
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_349 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_350 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_293
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_347 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_348 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_294
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_345 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_346 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_295
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_343 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_344 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_296
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_341 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_342 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_297
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_339 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_340 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_298
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_337 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_338 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_299
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_335 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_336 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_300
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_333 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_334 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_301
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_331 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_332 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_302
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_329 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_330 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_303
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_327 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_328 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_304
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_325 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_326 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_305
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_323 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_324 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_306
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_321 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_322 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_307
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_319 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_320 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_308
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_317 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_318 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_309
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_315 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_316 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_310
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D_313 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_314 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module controller_Register_File_Bit_311
   (Reg1_Data,
    Data_Write,
    Reg2_Data,
    Clk,
    EX_Result,
    Reg_Write,
    Write_Addr,
    Reg1_Addr,
    Imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]Reg2_Data;
  input Clk;
  input [0:0]EX_Result;
  input Reg_Write;
  input [0:4]Write_Addr;
  input [0:4]Reg1_Addr;
  input [4:0]Imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]EX_Result;
  wire [4:0]Imm_Value;
  wire [0:4]Reg1_Addr;
  wire [0:0]Reg1_Data;
  wire [0:0]Reg2_Data;
  wire Reg_Write;
  wire [0:4]Write_Addr;

  controller_MB_RAM32X1D RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .EX_Result(EX_Result),
        .Reg1_Addr(Reg1_Addr),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
  controller_MB_RAM32X1D_312 RegFile_X2
       (.Clk(Clk),
        .EX_Result(EX_Result),
        .Imm_Value(Imm_Value),
        .Reg2_Data(Reg2_Data),
        .Reg_Write(Reg_Write),
        .Write_Addr(Write_Addr));
endmodule

(* ORIG_REF_NAME = "Result_Mux" *) 
module controller_Result_Mux
   (EX_Result,
    \Result_Sel_reg[0] ,
    ALU_Result,
    Shift_Logic_Res,
    Extend_Data_Read,
    \Using_FPGA.Native ,
    Select_Logic_reg,
    ADDRBWRADDR,
    Select_Logic_reg_0,
    Select_Logic_reg_1,
    Select_Logic_reg_2,
    Select_Logic_reg_3,
    Select_Logic_reg_4,
    Select_Logic_reg_5,
    Select_Logic_reg_6,
    data_Read_Mask,
    Select_Logic_reg_7,
    Select_Logic_reg_8,
    Select_Logic_reg_9,
    Select_Logic_reg_10,
    Select_Logic_reg_11,
    Select_Logic_reg_12,
    BRAM_Addr_B,
    Select_Logic_reg_13,
    Select_Logic_reg_14,
    Data_Read,
    Select_Logic_reg_15,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    Select_Logic_reg_16,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    Select_Logic_reg_17,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ,
    Select_Logic_reg_18,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    Select_Logic_reg_19,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ,
    Select_Logic_reg_20,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ,
    Select_Logic_reg_21,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ,
    Select_Logic_reg_22,
    \cipr_rd_dff_all[24].fdr_i ,
    Select_Logic_reg_23,
    \cipr_rd_dff_all[25].fdr_i ,
    Select_Logic_reg_24,
    \cipr_rd_dff_all[26].fdr_i ,
    Select_Logic_reg_25,
    \cipr_rd_dff_all[27].fdr_i ,
    Select_Logic_reg_26,
    \cipr_rd_dff_all[28].fdr_i ,
    Select_Logic_reg_27,
    \cipr_rd_dff_all[29].fdr_i ,
    \Using_FPGA.Native_0 ,
    Select_Logic_reg_28,
    \cipr_rd_dff_all[30].fdr_i ,
    Select_Logic_reg_29,
    \cipr_rd_dff_all[31].fdr_i );
  output [0:31]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input ALU_Result;
  input Shift_Logic_Res;
  input [15:0]Extend_Data_Read;
  input \Using_FPGA.Native ;
  input Select_Logic_reg;
  input [12:0]ADDRBWRADDR;
  input Select_Logic_reg_0;
  input Select_Logic_reg_1;
  input Select_Logic_reg_2;
  input Select_Logic_reg_3;
  input Select_Logic_reg_4;
  input Select_Logic_reg_5;
  input Select_Logic_reg_6;
  input [23:0]data_Read_Mask;
  input Select_Logic_reg_7;
  input Select_Logic_reg_8;
  input Select_Logic_reg_9;
  input Select_Logic_reg_10;
  input Select_Logic_reg_11;
  input Select_Logic_reg_12;
  input [14:0]BRAM_Addr_B;
  input Select_Logic_reg_13;
  input Select_Logic_reg_14;
  input Data_Read;
  input Select_Logic_reg_15;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input Select_Logic_reg_16;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input Select_Logic_reg_17;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  input Select_Logic_reg_18;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input Select_Logic_reg_19;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  input Select_Logic_reg_20;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  input Select_Logic_reg_21;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  input Select_Logic_reg_22;
  input \cipr_rd_dff_all[24].fdr_i ;
  input Select_Logic_reg_23;
  input \cipr_rd_dff_all[25].fdr_i ;
  input Select_Logic_reg_24;
  input \cipr_rd_dff_all[26].fdr_i ;
  input Select_Logic_reg_25;
  input \cipr_rd_dff_all[27].fdr_i ;
  input Select_Logic_reg_26;
  input \cipr_rd_dff_all[28].fdr_i ;
  input Select_Logic_reg_27;
  input \cipr_rd_dff_all[29].fdr_i ;
  input [1:0]\Using_FPGA.Native_0 ;
  input Select_Logic_reg_28;
  input \cipr_rd_dff_all[30].fdr_i ;
  input Select_Logic_reg_29;
  input \cipr_rd_dff_all[31].fdr_i ;

  wire [12:0]ADDRBWRADDR;
  wire ALU_Result;
  wire [14:0]BRAM_Addr_B;
  wire Data_Read;
  wire [0:31]EX_Result;
  wire [15:0]Extend_Data_Read;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire Select_Logic_reg_0;
  wire Select_Logic_reg_1;
  wire Select_Logic_reg_10;
  wire Select_Logic_reg_11;
  wire Select_Logic_reg_12;
  wire Select_Logic_reg_13;
  wire Select_Logic_reg_14;
  wire Select_Logic_reg_15;
  wire Select_Logic_reg_16;
  wire Select_Logic_reg_17;
  wire Select_Logic_reg_18;
  wire Select_Logic_reg_19;
  wire Select_Logic_reg_2;
  wire Select_Logic_reg_20;
  wire Select_Logic_reg_21;
  wire Select_Logic_reg_22;
  wire Select_Logic_reg_23;
  wire Select_Logic_reg_24;
  wire Select_Logic_reg_25;
  wire Select_Logic_reg_26;
  wire Select_Logic_reg_27;
  wire Select_Logic_reg_28;
  wire Select_Logic_reg_29;
  wire Select_Logic_reg_3;
  wire Select_Logic_reg_4;
  wire Select_Logic_reg_5;
  wire Select_Logic_reg_6;
  wire Select_Logic_reg_7;
  wire Select_Logic_reg_8;
  wire Select_Logic_reg_9;
  wire Shift_Logic_Res;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ;
  wire \Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire [23:0]data_Read_Mask;

  controller_Result_Mux_Bit \Result_Mux_Bits[0].Result_Mux_Bit_I 
       (.EX_Result(EX_Result[0]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_29),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 [1]),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .data_Read_Mask(data_Read_Mask[23]));
  controller_Result_Mux_Bit_188 \Result_Mux_Bits[10].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[6]),
        .EX_Result(EX_Result[10]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_19),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 ),
        .data_Read_Mask(data_Read_Mask[13]));
  controller_Result_Mux_Bit_189 \Result_Mux_Bits[11].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[5]),
        .EX_Result(EX_Result[11]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_18),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask[12]));
  controller_Result_Mux_Bit_190 \Result_Mux_Bits[12].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[4]),
        .EX_Result(EX_Result[12]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_17),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 ),
        .data_Read_Mask(data_Read_Mask[11]));
  controller_Result_Mux_Bit_191 \Result_Mux_Bits[13].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[3]),
        .EX_Result(EX_Result[13]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_16),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ),
        .data_Read_Mask(data_Read_Mask[10]));
  controller_Result_Mux_Bit_192 \Result_Mux_Bits[14].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[2]),
        .EX_Result(EX_Result[14]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_15),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask[9]));
  controller_Result_Mux_Bit_193 \Result_Mux_Bits[15].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[1]),
        .Data_Read(Data_Read),
        .EX_Result(EX_Result[15]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_14),
        .data_Read_Mask(data_Read_Mask[8]));
  controller_Result_Mux_Bit_194 \Result_Mux_Bits[16].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[0]),
        .EX_Result(EX_Result[16]),
        .Extend_Data_Read(Extend_Data_Read[15]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_13),
        .data_Read_Mask(data_Read_Mask[7]));
  controller_Result_Mux_Bit_195 \Result_Mux_Bits[17].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[12]),
        .EX_Result(EX_Result[17]),
        .Extend_Data_Read(Extend_Data_Read[14]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_12),
        .data_Read_Mask(data_Read_Mask[6]));
  controller_Result_Mux_Bit_196 \Result_Mux_Bits[18].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[11]),
        .EX_Result(EX_Result[18]),
        .Extend_Data_Read(Extend_Data_Read[13]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_11),
        .data_Read_Mask(data_Read_Mask[5]));
  controller_Result_Mux_Bit_197 \Result_Mux_Bits[19].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[10]),
        .EX_Result(EX_Result[19]),
        .Extend_Data_Read(Extend_Data_Read[12]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_10),
        .data_Read_Mask(data_Read_Mask[4]));
  controller_Result_Mux_Bit_198 \Result_Mux_Bits[1].Result_Mux_Bit_I 
       (.EX_Result(EX_Result[1]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_28),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 [0]),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .data_Read_Mask(data_Read_Mask[22]));
  controller_Result_Mux_Bit_199 \Result_Mux_Bits[20].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[9]),
        .EX_Result(EX_Result[20]),
        .Extend_Data_Read(Extend_Data_Read[11]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_9),
        .data_Read_Mask(data_Read_Mask[3]));
  controller_Result_Mux_Bit_200 \Result_Mux_Bits[21].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[8]),
        .EX_Result(EX_Result[21]),
        .Extend_Data_Read(Extend_Data_Read[10]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_8),
        .data_Read_Mask(data_Read_Mask[2]));
  controller_Result_Mux_Bit_201 \Result_Mux_Bits[22].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[7]),
        .EX_Result(EX_Result[22]),
        .Extend_Data_Read(Extend_Data_Read[9]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_7),
        .data_Read_Mask(data_Read_Mask[1]));
  controller_Result_Mux_Bit_202 \Result_Mux_Bits[23].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[6]),
        .EX_Result(EX_Result[23]),
        .Extend_Data_Read(Extend_Data_Read[8]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_6),
        .data_Read_Mask(data_Read_Mask[0]));
  controller_Result_Mux_Bit_203 \Result_Mux_Bits[24].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[5]),
        .EX_Result(EX_Result[24]),
        .Extend_Data_Read(Extend_Data_Read[7]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_5));
  controller_Result_Mux_Bit_204 \Result_Mux_Bits[25].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[4]),
        .EX_Result(EX_Result[25]),
        .Extend_Data_Read(Extend_Data_Read[6]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_4));
  controller_Result_Mux_Bit_205 \Result_Mux_Bits[26].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[3]),
        .EX_Result(EX_Result[26]),
        .Extend_Data_Read(Extend_Data_Read[5]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_3));
  controller_Result_Mux_Bit_206 \Result_Mux_Bits[27].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[2]),
        .EX_Result(EX_Result[27]),
        .Extend_Data_Read(Extend_Data_Read[4]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_2));
  controller_Result_Mux_Bit_207 \Result_Mux_Bits[28].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[1]),
        .EX_Result(EX_Result[28]),
        .Extend_Data_Read(Extend_Data_Read[3]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_1));
  controller_Result_Mux_Bit_208 \Result_Mux_Bits[29].Result_Mux_Bit_I 
       (.ADDRBWRADDR(ADDRBWRADDR[0]),
        .EX_Result(EX_Result[29]),
        .Extend_Data_Read(Extend_Data_Read[2]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_0));
  controller_Result_Mux_Bit_209 \Result_Mux_Bits[2].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[14]),
        .EX_Result(EX_Result[2]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_27),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .data_Read_Mask(data_Read_Mask[21]));
  controller_Result_Mux_Bit_210 \Result_Mux_Bits[30].Result_Mux_Bit_I 
       (.EX_Result(EX_Result[30]),
        .Extend_Data_Read(Extend_Data_Read[1]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_FPGA.Native (\Using_FPGA.Native ));
  controller_Result_Mux_Bit_211 \Result_Mux_Bits[31].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result),
        .EX_Result(EX_Result[31]),
        .Extend_Data_Read(Extend_Data_Read[0]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Shift_Logic_Res(Shift_Logic_Res));
  controller_Result_Mux_Bit_212 \Result_Mux_Bits[3].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[13]),
        .EX_Result(EX_Result[3]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_26),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .data_Read_Mask(data_Read_Mask[20]));
  controller_Result_Mux_Bit_213 \Result_Mux_Bits[4].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[12]),
        .EX_Result(EX_Result[4]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_25),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .data_Read_Mask(data_Read_Mask[19]));
  controller_Result_Mux_Bit_214 \Result_Mux_Bits[5].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[11]),
        .EX_Result(EX_Result[5]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_24),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .data_Read_Mask(data_Read_Mask[18]));
  controller_Result_Mux_Bit_215 \Result_Mux_Bits[6].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[10]),
        .EX_Result(EX_Result[6]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_23),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .data_Read_Mask(data_Read_Mask[17]));
  controller_Result_Mux_Bit_216 \Result_Mux_Bits[7].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[9]),
        .EX_Result(EX_Result[7]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_22),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .data_Read_Mask(data_Read_Mask[16]));
  controller_Result_Mux_Bit_217 \Result_Mux_Bits[8].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[8]),
        .EX_Result(EX_Result[8]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_21),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 ),
        .data_Read_Mask(data_Read_Mask[15]));
  controller_Result_Mux_Bit_218 \Result_Mux_Bits[9].Result_Mux_Bit_I 
       (.BRAM_Addr_B(BRAM_Addr_B[7]),
        .EX_Result(EX_Result[9]),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg_20),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 ),
        .data_Read_Mask(data_Read_Mask[14]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit
   (EX_Result,
    \Result_Sel_reg[0] ,
    \Using_FPGA.Native ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[31].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]\Using_FPGA.Native ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[31].fdr_i ;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]\Using_FPGA.Native ;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_279 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[31].fdr_i (\cipr_rd_dff_all[31].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_280 Mul_ALU_Mux
       (.I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_188
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_277 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_278 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_189
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_275 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_276 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_190
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_273 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_274 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_191
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_271 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_272 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_192
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_269 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_270 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_193
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input Data_Read;

  wire [0:0]BRAM_Addr_B;
  wire Data_Read;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_267 Data_Shift_Mux
       (.Data_Read(Data_Read),
        .EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_268 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_194
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_265 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_266 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_195
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_263 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_264 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_196
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_261 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_262 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_197
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_259 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_260 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_198
   (EX_Result,
    \Result_Sel_reg[0] ,
    \Using_FPGA.Native ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[30].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]\Using_FPGA.Native ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[30].fdr_i ;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]\Using_FPGA.Native ;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_257 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[30].fdr_i (\cipr_rd_dff_all[30].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_258 Mul_ALU_Mux
       (.I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_199
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_255 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_256 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_200
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_253 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_254 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_201
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_251 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_252 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_202
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_249 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_250 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_203
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_247 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_248 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_204
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_245 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_246 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_205
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_243 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_244 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_206
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_241 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_242 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_207
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_239 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_240 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_208
   (EX_Result,
    \Result_Sel_reg[0] ,
    ADDRBWRADDR,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]ADDRBWRADDR;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]ADDRBWRADDR;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_237 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_238 Mul_ALU_Mux
       (.ADDRBWRADDR(ADDRBWRADDR),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_209
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[29].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[29].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_235 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[29].fdr_i (\cipr_rd_dff_all[29].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_236 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_210
   (EX_Result,
    \Result_Sel_reg[0] ,
    \Using_FPGA.Native ,
    Select_Logic_reg,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input \Using_FPGA.Native ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_FPGA.Native ;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_233 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg));
  controller_MB_LUT4__parameterized33_234 Mul_ALU_Mux
       (.I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_211
   (EX_Result,
    \Result_Sel_reg[0] ,
    ALU_Result,
    Shift_Logic_Res,
    Extend_Data_Read);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input ALU_Result;
  input Shift_Logic_Res;
  input [0:0]Extend_Data_Read;

  wire ALU_Result;
  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Shift_Logic_Res;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_231 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .Extend_Data_Read(Extend_Data_Read),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Shift_Logic_Res(Shift_Logic_Res));
  controller_MB_LUT4__parameterized33_232 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_212
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[28].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[28].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_229 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[28].fdr_i (\cipr_rd_dff_all[28].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_230 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_213
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[27].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[27].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_227 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[27].fdr_i (\cipr_rd_dff_all[27].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_228 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_214
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[26].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[26].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_225 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[26].fdr_i (\cipr_rd_dff_all[26].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_226 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_215
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[25].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[25].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_223 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[25].fdr_i (\cipr_rd_dff_all[25].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_224 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_216
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[24].fdr_i );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[24].fdr_i ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_221 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\cipr_rd_dff_all[24].fdr_i (\cipr_rd_dff_all[24].fdr_i ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_222 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_217
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0_219 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33_220 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module controller_Result_Mux_Bit_218
   (EX_Result,
    \Result_Sel_reg[0] ,
    BRAM_Addr_B,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 );
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input [0:0]BRAM_Addr_B;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;

  wire [0:0]BRAM_Addr_B;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  controller_microblaze_v9_5_MB_LUT6__parameterized0 Data_Shift_Mux
       (.EX_Result(EX_Result),
        .I4(I4),
        .\Result_Sel_reg[0] (\Result_Sel_reg[0] ),
        .Select_Logic_reg(Select_Logic_reg),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .data_Read_Mask(data_Read_Mask));
  controller_MB_LUT4__parameterized33 Mul_ALU_Mux
       (.BRAM_Addr_B(BRAM_Addr_B),
        .I4(I4),
        .\Result_Sel_reg[1] (\Result_Sel_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_185 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_186 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_187 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_64
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_182 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_183 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_184 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_65
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_179 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_180 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_181 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_66
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_176 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_177 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_178 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_67
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_173 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_174 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_175 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_68
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_170 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_171 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_172 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_69
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_167 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_168 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_169 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_70
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_164 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_165 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_166 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_71
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_161 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_162 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_163 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_72
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_158 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_159 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_160 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_73
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_155 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_156 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_157 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_74
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_152 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_153 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_154 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_75
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_149 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_150 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_151 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_76
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_146 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_147 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_148 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_77
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext8_reg,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext8_reg;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext8_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_143 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_144 Shift_LUT
       (.I0(I0),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_145 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_78
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  controller_MB_LUT4__parameterized29_140 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_141 Shift_LUT
       (.I0(I0),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_microblaze_v9_5_MB_MUXF7_142 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_79
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [1:0]Q;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  controller_MB_LUT4__parameterized29_137 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_LUT4__parameterized31_138 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_139 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_80
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [1:0]Q;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  controller_MB_LUT4__parameterized29_134 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_LUT4__parameterized31_135 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_136 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_81
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [1:0]Q;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  controller_MB_LUT4__parameterized29_131 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_LUT4__parameterized31_132 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_133 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_82
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [1:0]Q;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  controller_MB_LUT4__parameterized29_128 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_LUT4__parameterized31_129 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_130 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_83
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_FPGA.Native ,
    Shifted,
    Q,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input Shifted;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  controller_MB_LUT4__parameterized29_125 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_MB_LUT4__parameterized31_126 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_127 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_84
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Op2,
    Op1_Shift,
    Q,
    Shifted,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input Op2;
  input Op1_Shift;
  input [1:0]Q;
  input Shifted;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire Op1_Shift;
  wire Op2;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  controller_MB_LUT4__parameterized29_122 Logic_LUT
       (.I1(I1),
        .Op1_Shift(Op1_Shift),
        .Op2(Op2),
        .Q(Q));
  controller_MB_LUT4__parameterized31_123 Shift_LUT
       (.I0(I0),
        .Op1_Shift(Op1_Shift),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted));
  controller_microblaze_v9_5_MB_MUXF7_124 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_85
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_119 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_120 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_121 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_86
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Q,
    Op1_Shift,
    Shift_Oper,
    Select_Logic);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [1:0]Q;
  input Op1_Shift;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire Op1_Shift;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  controller_MB_LUT4__parameterized29_116 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ));
  controller_MB_LUT4__parameterized31_117 Shift_LUT
       (.I0(I0),
        .Op1_Shift(Op1_Shift),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ));
  controller_microblaze_v9_5_MB_MUXF7_118 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_87
   (Shift_Logic_Res,
    EX_Op2,
    Op1_Logic,
    Q,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic);
  output Shift_Logic_Res;
  input EX_Op2;
  input Op1_Logic;
  input [1:0]Q;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;

  wire EX_Op2;
  wire I0;
  wire I1;
  wire Op1_Logic;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;

  controller_MB_LUT4__parameterized29_113 Logic_LUT
       (.EX_Op2(EX_Op2),
        .I1(I1),
        .Op1_Logic(Op1_Logic),
        .Q(Q));
  controller_MB_LUT4__parameterized31_114 Shift_LUT
       (.I0(I0),
        .Op1_Logic(Op1_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  controller_microblaze_v9_5_MB_MUXF7_115 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_88
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_110 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_111 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_112 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_89
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_107 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_108 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_109 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_90
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_104 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_105 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_106 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_91
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_101 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_102 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_103 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_92
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_98 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_99 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_100 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_93
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29_95 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31_96 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7_97 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module controller_Shift_Logic_Bit_94
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Oper;
  input Select_Logic;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  controller_MB_LUT4__parameterized29 Logic_LUT
       (.I1(I1),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  controller_MB_LUT4__parameterized31 Shift_LUT
       (.I0(I0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ));
  controller_microblaze_v9_5_MB_MUXF7 Shift_Logic_Mux
       (.I0(I0),
        .I1(I1),
        .Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Module" *) 
module controller_Shift_Logic_Module
   (Shift_Logic_Res,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    EX_Op2,
    Op1_Logic,
    Q,
    \Using_FPGA.Native_23 ,
    Shift_Oper,
    Select_Logic,
    \Using_FPGA.Native_24 ,
    Op1_Shift,
    Op2,
    Shifted,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    Sext,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    Sext8_reg,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    Sext8_reg_0,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    Sext8_reg_1,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    Sext8_reg_2,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    Sext8_reg_3,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    Sext8_reg_4,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    Sext8_reg_5,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    \Using_FPGA.Native_58 ,
    \Using_FPGA.Native_59 ,
    \Using_FPGA.Native_60 ,
    \Using_FPGA.Native_61 ,
    \Using_FPGA.Native_62 ,
    \Using_FPGA.Native_63 ,
    \Using_FPGA.Native_64 ,
    \Using_FPGA.Native_65 ,
    \Using_FPGA.Native_66 ,
    \Using_FPGA.Native_67 ,
    \Using_FPGA.Native_68 ,
    \Using_FPGA.Native_69 ,
    \Using_FPGA.Native_70 ,
    \Using_FPGA.Native_71 ,
    \Using_FPGA.Native_72 ,
    \Using_FPGA.Native_73 ,
    \Using_FPGA.Native_74 ,
    \Using_FPGA.Native_75 ,
    \Using_FPGA.Native_76 ,
    \Using_FPGA.Native_77 ,
    \Using_FPGA.Native_78 ,
    \Using_FPGA.Native_79 ,
    \Using_FPGA.Native_80 ,
    \Using_FPGA.Native_81 ,
    \Using_FPGA.Native_82 ,
    \Using_FPGA.Native_83 ,
    \Using_FPGA.Native_84 ,
    \Using_FPGA.Native_85 ,
    \Using_FPGA.Native_86 ,
    \Using_FPGA.Native_87 ,
    \Using_FPGA.Native_88 ,
    \Using_FPGA.Native_89 ,
    \Using_FPGA.Native_90 ,
    \Using_FPGA.Native_91 ,
    \Using_FPGA.Native_92 ,
    \Using_FPGA.Native_93 ,
    \Using_FPGA.Native_94 ,
    \Using_FPGA.Native_95 ,
    \Using_FPGA.Native_96 ,
    \Using_FPGA.Native_97 ,
    \Using_FPGA.Native_98 );
  output Shift_Logic_Res;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  input EX_Op2;
  input Op1_Logic;
  input [1:0]Q;
  input \Using_FPGA.Native_23 ;
  input Shift_Oper;
  input Select_Logic;
  input \Using_FPGA.Native_24 ;
  input Op1_Shift;
  input Op2;
  input Shifted;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input Sext;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input Sext8_reg;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input Sext8_reg_0;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input Sext8_reg_1;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input Sext8_reg_2;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input Sext8_reg_3;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input Sext8_reg_4;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input Sext8_reg_5;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.Native_56 ;
  input \Using_FPGA.Native_57 ;
  input \Using_FPGA.Native_58 ;
  input \Using_FPGA.Native_59 ;
  input \Using_FPGA.Native_60 ;
  input \Using_FPGA.Native_61 ;
  input \Using_FPGA.Native_62 ;
  input \Using_FPGA.Native_63 ;
  input \Using_FPGA.Native_64 ;
  input \Using_FPGA.Native_65 ;
  input \Using_FPGA.Native_66 ;
  input \Using_FPGA.Native_67 ;
  input \Using_FPGA.Native_68 ;
  input \Using_FPGA.Native_69 ;
  input \Using_FPGA.Native_70 ;
  input \Using_FPGA.Native_71 ;
  input \Using_FPGA.Native_72 ;
  input \Using_FPGA.Native_73 ;
  input \Using_FPGA.Native_74 ;
  input \Using_FPGA.Native_75 ;
  input \Using_FPGA.Native_76 ;
  input \Using_FPGA.Native_77 ;
  input \Using_FPGA.Native_78 ;
  input \Using_FPGA.Native_79 ;
  input \Using_FPGA.Native_80 ;
  input \Using_FPGA.Native_81 ;
  input \Using_FPGA.Native_82 ;
  input \Using_FPGA.Native_83 ;
  input \Using_FPGA.Native_84 ;
  input \Using_FPGA.Native_85 ;
  input \Using_FPGA.Native_86 ;
  input \Using_FPGA.Native_87 ;
  input \Using_FPGA.Native_88 ;
  input \Using_FPGA.Native_89 ;
  input \Using_FPGA.Native_90 ;
  input \Using_FPGA.Native_91 ;
  input \Using_FPGA.Native_92 ;
  input \Using_FPGA.Native_93 ;
  input \Using_FPGA.Native_94 ;
  input \Using_FPGA.Native_95 ;
  input \Using_FPGA.Native_96 ;
  input \Using_FPGA.Native_97 ;
  input \Using_FPGA.Native_98 ;

  wire EX_Op2;
  wire Op1_Logic;
  wire Op1_Shift;
  wire Op2;
  wire [1:0]Q;
  wire Select_Logic;
  wire Sext;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire Sext8_reg_2;
  wire Sext8_reg_3;
  wire Sext8_reg_4;
  wire Sext8_reg_5;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_58 ;
  wire \Using_FPGA.Native_59 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_60 ;
  wire \Using_FPGA.Native_61 ;
  wire \Using_FPGA.Native_62 ;
  wire \Using_FPGA.Native_63 ;
  wire \Using_FPGA.Native_64 ;
  wire \Using_FPGA.Native_65 ;
  wire \Using_FPGA.Native_66 ;
  wire \Using_FPGA.Native_67 ;
  wire \Using_FPGA.Native_68 ;
  wire \Using_FPGA.Native_69 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_70 ;
  wire \Using_FPGA.Native_71 ;
  wire \Using_FPGA.Native_72 ;
  wire \Using_FPGA.Native_73 ;
  wire \Using_FPGA.Native_74 ;
  wire \Using_FPGA.Native_75 ;
  wire \Using_FPGA.Native_76 ;
  wire \Using_FPGA.Native_77 ;
  wire \Using_FPGA.Native_78 ;
  wire \Using_FPGA.Native_79 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_80 ;
  wire \Using_FPGA.Native_81 ;
  wire \Using_FPGA.Native_82 ;
  wire \Using_FPGA.Native_83 ;
  wire \Using_FPGA.Native_84 ;
  wire \Using_FPGA.Native_85 ;
  wire \Using_FPGA.Native_86 ;
  wire \Using_FPGA.Native_87 ;
  wire \Using_FPGA.Native_88 ;
  wire \Using_FPGA.Native_89 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_90 ;
  wire \Using_FPGA.Native_91 ;
  wire \Using_FPGA.Native_92 ;
  wire \Using_FPGA.Native_93 ;
  wire \Using_FPGA.Native_94 ;
  wire \Using_FPGA.Native_95 ;
  wire \Using_FPGA.Native_96 ;
  wire \Using_FPGA.Native_97 ;
  wire \Using_FPGA.Native_98 ;

  controller_Shift_Logic_Bit \Shift_Logic_Bits[0].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_96 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_94 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_97 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_98 ));
  controller_Shift_Logic_Bit_64 \Shift_Logic_Bits[10].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_66 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_64 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_67 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_68 ));
  controller_Shift_Logic_Bit_65 \Shift_Logic_Bits[11].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_63 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_61 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_64 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_65 ));
  controller_Shift_Logic_Bit_66 \Shift_Logic_Bits[12].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_60 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_58 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_61 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_62 ));
  controller_Shift_Logic_Bit_67 \Shift_Logic_Bits[13].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_57 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_55 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_58 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_59 ));
  controller_Shift_Logic_Bit_68 \Shift_Logic_Bits[14].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_54 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_52 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_55 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_56 ));
  controller_Shift_Logic_Bit_69 \Shift_Logic_Bits[15].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_51 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_50 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_52 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_53 ));
  controller_Shift_Logic_Bit_70 \Shift_Logic_Bits[16].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_5),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_48 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_50 ));
  controller_Shift_Logic_Bit_71 \Shift_Logic_Bits[17].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_4),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_48 ));
  controller_Shift_Logic_Bit_72 \Shift_Logic_Bits[18].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_3),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_46 ));
  controller_Shift_Logic_Bit_73 \Shift_Logic_Bits[19].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_2),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_44 ));
  controller_Shift_Logic_Bit_74 \Shift_Logic_Bits[1].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_93 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_91 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_94 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_95 ));
  controller_Shift_Logic_Bit_75 \Shift_Logic_Bits[20].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_1),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_42 ));
  controller_Shift_Logic_Bit_76 \Shift_Logic_Bits[21].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg_0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_40 ));
  controller_Shift_Logic_Bit_77 \Shift_Logic_Bits[22].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext8_reg(Sext8_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_38 ));
  controller_Shift_Logic_Bit_78 \Shift_Logic_Bits[23].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_36 ));
  controller_Shift_Logic_Bit_79 \Shift_Logic_Bits[24].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_34 ));
  controller_Shift_Logic_Bit_80 \Shift_Logic_Bits[25].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_32 ));
  controller_Shift_Logic_Bit_81 \Shift_Logic_Bits[26].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_30 ));
  controller_Shift_Logic_Bit_82 \Shift_Logic_Bits[27].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_B36_S4.The_BRAMs[6].RAMB36_I1 (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_28 ));
  controller_Shift_Logic_Bit_83 \Shift_Logic_Bits[28].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ));
  controller_Shift_Logic_Bit_84 \Shift_Logic_Bits[29].Shift_Logic_Bit_I 
       (.Op1_Shift(Op1_Shift),
        .Op2(Op2),
        .Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ));
  controller_Shift_Logic_Bit_85 \Shift_Logic_Bits[2].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_90 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_88 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_91 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_92 ));
  controller_Shift_Logic_Bit_86 \Shift_Logic_Bits[30].Shift_Logic_Bit_I 
       (.Op1_Shift(Op1_Shift),
        .Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_B36_S4.The_BRAMs[7].RAMB36_I1 (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ));
  controller_Shift_Logic_Bit_87 \Shift_Logic_Bits[31].Shift_Logic_Bit_I 
       (.EX_Op2(EX_Op2),
        .Op1_Logic(Op1_Logic),
        .Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ));
  controller_Shift_Logic_Bit_88 \Shift_Logic_Bits[3].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_87 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_85 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_88 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_89 ));
  controller_Shift_Logic_Bit_89 \Shift_Logic_Bits[4].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_84 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_82 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_85 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_86 ));
  controller_Shift_Logic_Bit_90 \Shift_Logic_Bits[5].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_81 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_79 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_82 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_83 ));
  controller_Shift_Logic_Bit_91 \Shift_Logic_Bits[6].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_78 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_76 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_79 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_80 ));
  controller_Shift_Logic_Bit_92 \Shift_Logic_Bits[7].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_75 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_73 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_76 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_77 ));
  controller_Shift_Logic_Bit_93 \Shift_Logic_Bits[8].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_72 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_70 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_73 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_74 ));
  controller_Shift_Logic_Bit_94 \Shift_Logic_Bits[9].Shift_Logic_Bit_I 
       (.Q(Q),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_69 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_67 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_70 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_71 ));
endmodule

(* ORIG_REF_NAME = "UART_Receive" *) 
module controller_UART_Receive
   (Q_0,
    new_rx_data_write_reg_0,
    RX_Data_Received,
    new_rx_data_write_reg_1,
    overrun_error_reg,
    \UART_Status_reg[0] ,
    frame_error_reg,
    \All_INTR_Bits[2].Using_Intr.cisr_reg[2] ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \not_First.Clk_En_Out_i_reg ,
    Clk,
    LMB_Rst_reg,
    UART_Rx,
    lmb_reg_read_reg,
    Q,
    \lmb_abus_Q_reg[1] ,
    D,
    \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ,
    out,
    \lmb_abus_Q_reg[0] );
  output Q_0;
  output [0:0]new_rx_data_write_reg_0;
  output RX_Data_Received;
  output new_rx_data_write_reg_1;
  output overrun_error_reg;
  output [0:0]\UART_Status_reg[0] ;
  output frame_error_reg;
  output \All_INTR_Bits[2].Using_Intr.cisr_reg[2] ;
  output [7:0]\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input \not_First.Clk_En_Out_i_reg ;
  input Clk;
  input LMB_Rst_reg;
  input UART_Rx;
  input lmb_reg_read_reg;
  input [4:0]Q;
  input \lmb_abus_Q_reg[1] ;
  input [1:0]D;
  input \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ;
  input [0:0]out;
  input \lmb_abus_Q_reg[0] ;

  wire \All_INTR_Bits[2].Using_Intr.cisr_reg[2] ;
  wire \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ;
  wire Clk;
  wire \Convert_Serial_To_Parallel[1].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire [1:0]D;
  wire Delay_16_n_10;
  wire Delay_16_n_12;
  wire Delay_16_n_9;
  wire LMB_Rst_reg;
  wire [4:0]Q;
  wire Q_0;
  wire \RX_Data[7]_i_1_n_0 ;
  wire S;
  wire UART_Rx;
  wire [0:0]\UART_Status_reg[0] ;
  wire [7:0]\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire frame_error_reg;
  wire \lmb_abus_Q_reg[0] ;
  wire \lmb_abus_Q_reg[1] ;
  wire lmb_reg_read_reg;
  (* RTL_KEEP = "SOFT" *) wire [0:8]new_rx_data;
  (* RTL_KEEP = "SOFT" *) wire new_rx_data_write;
  wire new_rx_data_write_reg_1;
  wire \not_First.Clk_En_Out_i_reg ;
  wire [0:0]out;
  wire overrun_error_reg;
  wire previous_RX;
  wire previous_RX_i_1_n_0;
  wire running_reg_n_0;
  wire rx_1;
  wire rx_data_exists_i_i_1_n_0;
  wire rx_data_exists_i_i_2_n_0;
  wire [7:0]rx_data_i;
  wire start_Edge_Detected_i_1_n_0;
  wire start_Edge_Detected_reg_n_0;

  assign RX_Data_Received = new_rx_data_write;
  assign new_rx_data_write_reg_0[0] = new_rx_data[0];
  LUT5 #(
    .INIT(32'h45454445)) 
    \All_INTR_Bits[2].Using_Intr.cisr[2]_i_1 
       (.I0(LMB_Rst_reg),
        .I1(new_rx_data_write),
        .I2(\All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ),
        .I3(out),
        .I4(\lmb_abus_Q_reg[0] ),
        .O(\All_INTR_Bits[2].Using_Intr.cisr_reg[2] ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[1].First_Bit.First_Bit_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[1].serial_to_parallel_reg ),
        .Q(new_rx_data[1]),
        .S(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[2].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .Q(new_rx_data[2]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[3].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .Q(new_rx_data[3]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[4].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .Q(new_rx_data[4]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[5].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .Q(new_rx_data[5]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[6].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .Q(new_rx_data[6]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[7].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .Q(new_rx_data[7]),
        .R(S));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Convert_Serial_To_Parallel[8].Rest_Bits.Others_I 
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(\Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .Q(new_rx_data[8]),
        .R(S));
  controller_XIL_SRL16E__parameterized3 Delay_16
       (.Clk(Clk),
        .\Convert_Serial_To_Parallel[1].serial_to_parallel_reg (\Convert_Serial_To_Parallel[1].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[2].serial_to_parallel_reg (\Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[3].serial_to_parallel_reg (\Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[4].serial_to_parallel_reg (\Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[5].serial_to_parallel_reg (\Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[6].serial_to_parallel_reg (\Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[7].serial_to_parallel_reg (\Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .\Convert_Serial_To_Parallel[8].serial_to_parallel_reg (\Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .D(D[1]),
        .LMB_Rst_reg(LMB_Rst_reg),
        .S(S),
        .frame_error_reg(frame_error_reg),
        .in0(new_rx_data[0]),
        .\lmb_abus_Q_reg[1] (\lmb_abus_Q_reg[1] ),
        .new_rx_data_write_reg(Q_0),
        .new_rx_data_write_reg_0(Delay_16_n_12),
        .\not_First.Clk_En_Out_i_reg (\not_First.Clk_En_Out_i_reg ),
        .out({new_rx_data[0],new_rx_data[1],new_rx_data[2],new_rx_data[3],new_rx_data[4],new_rx_data[5],new_rx_data[6],new_rx_data[7],new_rx_data[8]}),
        .running_reg(Delay_16_n_10),
        .running_reg_0(running_reg_n_0),
        .start_Edge_Detected_reg(start_Edge_Detected_reg_n_0),
        .stop_Bit_Position_reg(Delay_16_n_9),
        .stop_Bit_Position_reg_0(new_rx_data_write_reg_1));
  controller_XIL_SRL16E__parameterized1 Mid_Start_Bit_SRL16
       (.Clk(Clk),
        .S(S),
        .\not_First.Clk_En_Out_i_reg (\not_First.Clk_En_Out_i_reg ),
        .start_Edge_Detected_reg(start_Edge_Detected_reg_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \RX_Data[7]_i_1 
       (.I0(lmb_reg_read_reg),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[0]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [0]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[1]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [1]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[2]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [2]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[3]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [3]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[4]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [4]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[5]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [5]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[6]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [6]),
        .R(\RX_Data[7]_i_1_n_0 ));
  FDRE \RX_Data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[7]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [7]),
        .R(\RX_Data[7]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE new_rx_data_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Delay_16_n_12),
        .Q(new_rx_data_write),
        .R(LMB_Rst_reg));
  LUT5 #(
    .INIT(32'h008F0088)) 
    overrun_error_i_1
       (.I0(new_rx_data_write),
        .I1(\UART_Status_reg[0] ),
        .I2(\lmb_abus_Q_reg[1] ),
        .I3(LMB_Rst_reg),
        .I4(D[0]),
        .O(overrun_error_reg));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    previous_RX_i_1
       (.I0(new_rx_data[0]),
        .I1(\not_First.Clk_En_Out_i_reg ),
        .I2(previous_RX),
        .O(previous_RX_i_1_n_0));
  FDRE previous_RX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(previous_RX_i_1_n_0),
        .Q(previous_RX),
        .R(LMB_Rst_reg));
  FDRE running_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Delay_16_n_10),
        .Q(running_reg_n_0),
        .R(1'b0));
  FDSE rx_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(UART_Rx),
        .Q(rx_1),
        .S(LMB_Rst_reg));
  FDSE rx_2_reg
       (.C(Clk),
        .CE(1'b1),
        .D(rx_1),
        .Q(new_rx_data[0]),
        .S(LMB_Rst_reg));
  LUT6 #(
    .INIT(64'h00000000EEEEEEE0)) 
    rx_data_exists_i_i_1
       (.I0(\UART_Status_reg[0] ),
        .I1(new_rx_data_write),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(rx_data_exists_i_i_2_n_0),
        .I5(LMB_Rst_reg),
        .O(rx_data_exists_i_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    rx_data_exists_i_i_2
       (.I0(lmb_reg_read_reg),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(rx_data_exists_i_i_2_n_0));
  FDRE rx_data_exists_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_exists_i_i_1_n_0),
        .Q(\UART_Status_reg[0] ),
        .R(1'b0));
  FDRE \rx_data_i_reg[0] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[8]),
        .Q(rx_data_i[0]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[1] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[7]),
        .Q(rx_data_i[1]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[2] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[6]),
        .Q(rx_data_i[2]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[3] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[5]),
        .Q(rx_data_i[3]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[4] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[4]),
        .Q(rx_data_i[4]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[5] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[3]),
        .Q(rx_data_i[5]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[6] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[2]),
        .Q(rx_data_i[6]),
        .R(LMB_Rst_reg));
  FDRE \rx_data_i_reg[7] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[1]),
        .Q(rx_data_i[7]),
        .R(LMB_Rst_reg));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h04FF0400)) 
    start_Edge_Detected_i_1
       (.I0(new_rx_data[0]),
        .I1(previous_RX),
        .I2(running_reg_n_0),
        .I3(\not_First.Clk_En_Out_i_reg ),
        .I4(start_Edge_Detected_reg_n_0),
        .O(start_Edge_Detected_i_1_n_0));
  FDRE start_Edge_Detected_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_Edge_Detected_i_1_n_0),
        .Q(start_Edge_Detected_reg_n_0),
        .R(LMB_Rst_reg));
  FDRE stop_Bit_Position_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Delay_16_n_9),
        .Q(new_rx_data_write_reg_1),
        .R(LMB_Rst_reg));
endmodule

(* ORIG_REF_NAME = "UART_Transmit" *) 
module controller_UART_Transmit
   (TX_Data_Transmitted,
    UART_Tx,
    \UART_Status_reg[3] ,
    \not_First.Clk_En_Out_i_reg ,
    Clk,
    LMB_Rst_reg,
    E,
    out);
  output TX_Data_Transmitted;
  output UART_Tx;
  output [0:0]\UART_Status_reg[3] ;
  input \not_First.Clk_En_Out_i_reg ;
  input Clk;
  input LMB_Rst_reg;
  input [0:0]E;
  input [7:0]out;

  wire CI;
  wire CI0_out;
  wire Clk;
  wire \Counter[0].h_Cnt_reg ;
  wire \Counter[1].h_Cnt_reg ;
  wire \Counter[2].h_Cnt_reg ;
  wire D;
  wire [0:0]E;
  wire I0;
  wire I1;
  wire LMB_Rst_reg;
  wire MUX_F5_1_i_1_n_0;
  wire MUX_F5_1_i_2_n_0;
  wire R;
  wire S;
  wire TX_Data_Transmitted;
  wire TX_i_1_n_0;
  wire [0:0]\UART_Status_reg[3] ;
  wire UART_Tx;
  wire data_is_sent0;
  wire \fifo_DOut_reg_n_0_[0] ;
  wire \fifo_DOut_reg_n_0_[1] ;
  wire \fifo_DOut_reg_n_0_[2] ;
  wire \fifo_DOut_reg_n_0_[3] ;
  wire \fifo_DOut_reg_n_0_[5] ;
  wire \fifo_DOut_reg_n_0_[6] ;
  wire \fifo_DOut_reg_n_0_[7] ;
  wire mux_0123;
  wire mux_4567;
  wire mux_Out;
  wire \mux_sel_reg_n_0_[0] ;
  wire \mux_sel_reg_n_0_[2] ;
  wire \not_First.Clk_En_Out_i_reg ;
  wire [7:0]out;
  wire p_0_in;
  wire serial_Data;
  wire [0:2]sum_cnt;
  wire tx_DataBits;
  wire tx_DataBits_i_1_n_0;
  wire tx_Start;
  wire tx_Start_i_1_n_0;
  (* RTL_KEEP = "SOFT" *) wire tx_buffer_empty_i;
  wire tx_buffer_empty_i_i_1_n_0;
  wire [3:1]\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_DI_UNCONNECTED ;
  wire [3:3]\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_S_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \Counter[0].XORCY_I_i_1 
       (.I0(\mux_sel_reg_n_0_[0] ),
        .O(\Counter[0].h_Cnt_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    \Counter[1].XORCY_I_i_1 
       (.I0(S),
        .O(\Counter[1].h_Cnt_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_CO_UNCONNECTED [3:1],CI0_out}),
        .CYINIT(CI),
        .DI({\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_DI_UNCONNECTED [3:2],S,\mux_sel_reg_n_0_[2] }),
        .O({\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_O_UNCONNECTED [3],sum_cnt[0],sum_cnt[1],sum_cnt[2]}),
        .S({\NLW_Counter[2].Used_MuxCY.MUXCY_L_I_CARRY4_S_UNCONNECTED [3],\Counter[0].h_Cnt_reg ,\Counter[1].h_Cnt_reg ,\Counter[2].h_Cnt_reg }));
  LUT1 #(
    .INIT(2'h1)) 
    \Counter[2].XORCY_I_i_1 
       (.I0(\mux_sel_reg_n_0_[2] ),
        .O(\Counter[2].h_Cnt_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    \Counter[2].XORCY_I_i_2 
       (.I0(tx_DataBits),
        .O(CI));
  controller_XIL_SRL16E DIV16_SRL16E
       (.Clk(Clk),
        .D(D),
        .\not_First.Clk_En_Out_i_reg (\not_First.Clk_En_Out_i_reg ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    FDRE_I
       (.C(Clk),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .D(D),
        .Q(R),
        .R(R));
  (* XILINX_LEGACY_PRIM = "MUXF6" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    MUXF6_I
       (.I0(mux_0123),
        .I1(mux_4567),
        .I2(\mux_sel_reg_n_0_[0] ),
        .O(mux_Out));
  (* XILINX_LEGACY_PRIM = "MUXF5" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    MUX_F5_1
       (.I0(MUX_F5_1_i_1_n_0),
        .I1(MUX_F5_1_i_2_n_0),
        .I2(S),
        .O(mux_0123));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    MUX_F5_1_i_1
       (.I0(\fifo_DOut_reg_n_0_[1] ),
        .I1(\mux_sel_reg_n_0_[2] ),
        .I2(\fifo_DOut_reg_n_0_[0] ),
        .O(MUX_F5_1_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    MUX_F5_1_i_2
       (.I0(\fifo_DOut_reg_n_0_[3] ),
        .I1(\mux_sel_reg_n_0_[2] ),
        .I2(\fifo_DOut_reg_n_0_[2] ),
        .O(MUX_F5_1_i_2_n_0));
  (* XILINX_LEGACY_PRIM = "MUXF5" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    MUX_F5_2
       (.I0(I0),
        .I1(I1),
        .I2(S),
        .O(mux_4567));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    MUX_F5_2_i_1
       (.I0(\fifo_DOut_reg_n_0_[5] ),
        .I1(\mux_sel_reg_n_0_[2] ),
        .I2(p_0_in),
        .O(I0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    MUX_F5_2_i_2
       (.I0(\fifo_DOut_reg_n_0_[7] ),
        .I1(\mux_sel_reg_n_0_[2] ),
        .I2(\fifo_DOut_reg_n_0_[6] ),
        .O(I1));
  LUT3 #(
    .INIT(8'h45)) 
    TX_i_1
       (.I0(tx_Start),
        .I1(serial_Data),
        .I2(tx_DataBits),
        .O(TX_i_1_n_0));
  FDSE TX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(TX_i_1_n_0),
        .Q(UART_Tx),
        .S(LMB_Rst_reg));
  LUT1 #(
    .INIT(2'h1)) 
    \UART_Status[3]_i_1 
       (.I0(tx_buffer_empty_i),
        .O(\UART_Status_reg[3] ));
  LUT4 #(
    .INIT(16'h0004)) 
    data_is_sent_i_1
       (.I0(\mux_sel_reg_n_0_[2] ),
        .I1(R),
        .I2(\mux_sel_reg_n_0_[0] ),
        .I3(S),
        .O(data_is_sent0));
  FDRE data_is_sent_reg
       (.C(Clk),
        .CE(1'b1),
        .D(data_is_sent0),
        .Q(TX_Data_Transmitted),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(out[7]),
        .Q(\fifo_DOut_reg_n_0_[0] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(out[6]),
        .Q(\fifo_DOut_reg_n_0_[1] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(out[5]),
        .Q(\fifo_DOut_reg_n_0_[2] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(out[4]),
        .Q(\fifo_DOut_reg_n_0_[3] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(out[3]),
        .Q(p_0_in),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(out[2]),
        .Q(\fifo_DOut_reg_n_0_[5] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(out[1]),
        .Q(\fifo_DOut_reg_n_0_[6] ),
        .R(LMB_Rst_reg));
  FDRE \fifo_DOut_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(out[0]),
        .Q(\fifo_DOut_reg_n_0_[7] ),
        .R(LMB_Rst_reg));
  FDSE \mux_sel_reg[0] 
       (.C(Clk),
        .CE(R),
        .D(sum_cnt[0]),
        .Q(\mux_sel_reg_n_0_[0] ),
        .S(LMB_Rst_reg));
  FDSE \mux_sel_reg[1] 
       (.C(Clk),
        .CE(R),
        .D(sum_cnt[1]),
        .Q(S),
        .S(LMB_Rst_reg));
  FDSE \mux_sel_reg[2] 
       (.C(Clk),
        .CE(R),
        .D(sum_cnt[2]),
        .Q(\mux_sel_reg_n_0_[2] ),
        .S(LMB_Rst_reg));
  FDRE serial_Data_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mux_Out),
        .Q(serial_Data),
        .R(LMB_Rst_reg));
  LUT4 #(
    .INIT(16'h5540)) 
    tx_DataBits_i_1
       (.I0(TX_Data_Transmitted),
        .I1(R),
        .I2(tx_Start),
        .I3(tx_DataBits),
        .O(tx_DataBits_i_1_n_0));
  FDRE tx_DataBits_reg
       (.C(Clk),
        .CE(1'b1),
        .D(tx_DataBits_i_1_n_0),
        .Q(tx_DataBits),
        .R(LMB_Rst_reg));
  LUT4 #(
    .INIT(16'h5504)) 
    tx_Start_i_1
       (.I0(tx_DataBits),
        .I1(R),
        .I2(tx_buffer_empty_i),
        .I3(tx_Start),
        .O(tx_Start_i_1_n_0));
  FDRE tx_Start_reg
       (.C(Clk),
        .CE(1'b1),
        .D(tx_Start_i_1_n_0),
        .Q(tx_Start),
        .R(LMB_Rst_reg));
  LUT4 #(
    .INIT(16'hFFF4)) 
    tx_buffer_empty_i_i_1
       (.I0(E),
        .I1(tx_buffer_empty_i),
        .I2(LMB_Rst_reg),
        .I3(TX_Data_Transmitted),
        .O(tx_buffer_empty_i_i_1_n_0));
  (* KEEP = "yes" *) 
  FDRE tx_buffer_empty_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(tx_buffer_empty_i_i_1_n_0),
        .Q(tx_buffer_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Uart_Control_Status" *) 
module controller_Uart_Control_Status
   (D,
    frame_error_reg_0,
    UART_Interrupt,
    \All_INTR_Bits[0].Using_Intr.cisr_reg[0] ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    new_rx_data_write_reg,
    Clk,
    LMB_Rst_reg,
    lmb_reg_read_reg,
    Q,
    RX_Data_Received,
    TX_Data_Transmitted,
    LMB_Rst_reg_0,
    \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ,
    out,
    \lmb_abus_Q_reg[0] ,
    tx_buffer_empty_i_reg,
    new_rx_data_orig,
    \not_First.Clk_En_Out_i_reg ,
    Q_0,
    stop_Bit_Position_reg);
  output [1:0]D;
  output frame_error_reg_0;
  output UART_Interrupt;
  output \All_INTR_Bits[0].Using_Intr.cisr_reg[0] ;
  output [3:0]\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input new_rx_data_write_reg;
  input Clk;
  input LMB_Rst_reg;
  input lmb_reg_read_reg;
  input [4:0]Q;
  input RX_Data_Received;
  input TX_Data_Transmitted;
  input LMB_Rst_reg_0;
  input \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ;
  input [0:0]out;
  input \lmb_abus_Q_reg[0] ;
  input [1:0]tx_buffer_empty_i_reg;
  input [0:0]new_rx_data_orig;
  input \not_First.Clk_En_Out_i_reg ;
  input Q_0;
  input stop_Bit_Position_reg;

  wire \All_INTR_Bits[0].Using_Intr.cisr_reg[0] ;
  wire \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ;
  wire Clk;
  wire [1:0]D;
  wire LMB_Rst_reg;
  wire LMB_Rst_reg_0;
  wire [4:0]Q;
  wire Q_0;
  wire RX_Data_Received;
  wire TX_Data_Transmitted;
  wire UART_Error_Interrupt;
  wire UART_Interrupt;
  wire \UART_Status[6]_i_1_n_0 ;
  wire [3:0]\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire error_interrupt_i_1_n_0;
  wire frame_error_reg_0;
  wire \lmb_abus_Q_reg[0] ;
  wire lmb_reg_read_reg;
  wire [0:0]new_rx_data_orig;
  wire new_rx_data_write_reg;
  wire \not_First.Clk_En_Out_i_reg ;
  wire [0:0]out;
  wire stop_Bit_Position_reg;
  wire [1:0]tx_buffer_empty_i_reg;

  LUT5 #(
    .INIT(32'h45454445)) 
    \All_INTR_Bits[0].Using_Intr.cisr[0]_i_1 
       (.I0(LMB_Rst_reg_0),
        .I1(UART_Error_Interrupt),
        .I2(\All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ),
        .I3(out),
        .I4(\lmb_abus_Q_reg[0] ),
        .O(\All_INTR_Bits[0].Using_Intr.cisr_reg[0] ));
  LUT3 #(
    .INIT(8'hFE)) 
    UART_Interrupt_INST_0
       (.I0(UART_Error_Interrupt),
        .I1(RX_Data_Received),
        .I2(TX_Data_Transmitted),
        .O(UART_Interrupt));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFDFFFF)) 
    \UART_Status[6]_i_1 
       (.I0(lmb_reg_read_reg),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[4]),
        .O(\UART_Status[6]_i_1_n_0 ));
  FDRE \UART_Status_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(tx_buffer_empty_i_reg[0]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [0]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE \UART_Status_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(tx_buffer_empty_i_reg[1]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [1]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE \UART_Status_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [2]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE \UART_Status_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 [3]),
        .R(\UART_Status[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    error_interrupt_i_1
       (.I0(new_rx_data_orig),
        .I1(\not_First.Clk_En_Out_i_reg ),
        .I2(Q_0),
        .I3(stop_Bit_Position_reg),
        .I4(RX_Data_Received),
        .I5(tx_buffer_empty_i_reg[0]),
        .O(error_interrupt_i_1_n_0));
  FDRE error_interrupt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(error_interrupt_i_1_n_0),
        .Q(UART_Error_Interrupt),
        .R(LMB_Rst_reg_0));
  FDRE frame_error_reg
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_Rst_reg),
        .Q(D[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    overrun_error_i_2
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[2]),
        .I5(lmb_reg_read_reg),
        .O(frame_error_reg_0));
  FDRE overrun_error_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_rx_data_write_reg),
        .Q(D[0]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E
   (D,
    \not_First.Clk_En_Out_i_reg ,
    Clk);
  output D;
  input \not_First.Clk_En_Out_i_reg ;
  input Clk;

  wire Clk;
  wire D;
  wire \not_First.Clk_En_Out_i_reg ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART_TX.UART_TX_I1/DIV16_SRL16E/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .CLK(Clk),
        .D(D),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E_681
   (D,
    Clk_En,
    Clk);
  output D;
  input Clk_En;
  input Clk;

  wire Clk;
  wire Clk_En;
  wire D;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(Clk_En),
        .CLK(Clk),
        .D(D),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E_682
   (Clk_En,
    Clk);
  output Clk_En;
  input Clk;

  wire Clk;
  wire Clk_En;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(Clk),
        .D(Clk_En),
        .Q(Clk_En));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E__parameterized1
   (S,
    \not_First.Clk_En_Out_i_reg ,
    start_Edge_Detected_reg,
    Clk);
  output S;
  input \not_First.Clk_En_Out_i_reg ;
  input start_Edge_Detected_reg;
  input Clk;

  wire Clk;
  wire S;
  wire \not_First.Clk_En_Out_i_reg ;
  wire start_Edge_Detected_reg;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART_RX.UART_RX_I1/Mid_Start_Bit_SRL16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .CLK(Clk),
        .D(start_Edge_Detected_reg),
        .Q(S));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E__parameterized3
   (new_rx_data_write_reg,
    \Convert_Serial_To_Parallel[1].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[2].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[3].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[4].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[5].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[6].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[7].serial_to_parallel_reg ,
    \Convert_Serial_To_Parallel[8].serial_to_parallel_reg ,
    stop_Bit_Position_reg,
    running_reg,
    frame_error_reg,
    new_rx_data_write_reg_0,
    \not_First.Clk_En_Out_i_reg ,
    Clk,
    stop_Bit_Position_reg_0,
    S,
    out,
    in0,
    start_Edge_Detected_reg,
    LMB_Rst_reg,
    running_reg_0,
    \lmb_abus_Q_reg[1] ,
    D);
  output new_rx_data_write_reg;
  output \Convert_Serial_To_Parallel[1].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  output \Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  output stop_Bit_Position_reg;
  output running_reg;
  output frame_error_reg;
  output new_rx_data_write_reg_0;
  input \not_First.Clk_En_Out_i_reg ;
  input Clk;
  input stop_Bit_Position_reg_0;
  input S;
  input [8:0]out;
  input [0:0]in0;
  input start_Edge_Detected_reg;
  input LMB_Rst_reg;
  input running_reg_0;
  input \lmb_abus_Q_reg[1] ;
  input [0:0]D;

  wire Clk;
  wire \Convert_Serial_To_Parallel[1].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire [0:0]D;
  wire D7_out;
  wire LMB_Rst_reg;
  wire RX_Frame_Error;
  wire S;
  wire frame_error_reg;
  wire [0:0]in0;
  wire \lmb_abus_Q_reg[1] ;
  wire new_rx_data_write_reg;
  wire new_rx_data_write_reg_0;
  wire \not_First.Clk_En_Out_i_reg ;
  wire [8:0]out;
  wire running_reg;
  wire running_reg_0;
  wire start_Edge_Detected_reg;
  wire stop_Bit_Position_reg;
  wire stop_Bit_Position_reg_0;

  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[1].First_Bit.First_Bit_I_i_1 
       (.I0(out[8]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[7]),
        .O(\Convert_Serial_To_Parallel[1].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[2].Rest_Bits.Others_I_i_1 
       (.I0(out[7]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[6]),
        .O(\Convert_Serial_To_Parallel[2].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[3].Rest_Bits.Others_I_i_1 
       (.I0(out[6]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[5]),
        .O(\Convert_Serial_To_Parallel[3].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[4].Rest_Bits.Others_I_i_1 
       (.I0(out[5]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[4]),
        .O(\Convert_Serial_To_Parallel[4].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[5].Rest_Bits.Others_I_i_1 
       (.I0(out[4]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[3]),
        .O(\Convert_Serial_To_Parallel[5].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[6].Rest_Bits.Others_I_i_1 
       (.I0(out[3]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[2]),
        .O(\Convert_Serial_To_Parallel[6].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[7].Rest_Bits.Others_I_i_1 
       (.I0(out[2]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[1]),
        .O(\Convert_Serial_To_Parallel[7].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Convert_Serial_To_Parallel[8].Rest_Bits.Others_I_i_1 
       (.I0(out[1]),
        .I1(new_rx_data_write_reg),
        .I2(stop_Bit_Position_reg_0),
        .I3(out[0]),
        .O(\Convert_Serial_To_Parallel[8].serial_to_parallel_reg ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART_RX.UART_RX_I1/Delay_16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .CLK(Clk),
        .D(D7_out),
        .Q(new_rx_data_write_reg));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \Use_unisim.XIL_SRL16E_I1_i_1 
       (.I0(new_rx_data_write_reg),
        .I1(stop_Bit_Position_reg_0),
        .I2(S),
        .O(D7_out));
  LUT4 #(
    .INIT(16'h0B0A)) 
    frame_error_i_1
       (.I0(RX_Frame_Error),
        .I1(\lmb_abus_Q_reg[1] ),
        .I2(LMB_Rst_reg),
        .I3(D),
        .O(frame_error_reg));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    frame_error_i_2
       (.I0(stop_Bit_Position_reg_0),
        .I1(new_rx_data_write_reg),
        .I2(\not_First.Clk_En_Out_i_reg ),
        .I3(in0),
        .O(RX_Frame_Error));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    new_rx_data_write_i_1
       (.I0(stop_Bit_Position_reg_0),
        .I1(new_rx_data_write_reg),
        .I2(\not_First.Clk_En_Out_i_reg ),
        .I3(in0),
        .O(new_rx_data_write_reg_0));
  LUT6 #(
    .INIT(64'h0000FF7F0000F000)) 
    running_i_1
       (.I0(stop_Bit_Position_reg_0),
        .I1(new_rx_data_write_reg),
        .I2(\not_First.Clk_En_Out_i_reg ),
        .I3(start_Edge_Detected_reg),
        .I4(LMB_Rst_reg),
        .I5(running_reg_0),
        .O(running_reg));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    stop_Bit_Position_i_1
       (.I0(out[0]),
        .I1(\not_First.Clk_En_Out_i_reg ),
        .I2(new_rx_data_write_reg),
        .I3(stop_Bit_Position_reg_0),
        .O(stop_Bit_Position_reg));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module controller_XIL_SRL16E__parameterized7
   (Q,
    \not_First.Clk_En_Out_i_reg ,
    D,
    Clk);
  output Q;
  input \not_First.Clk_En_Out_i_reg ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire Q;
  wire \not_First.Clk_En_Out_i_reg ;
  wire \NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "U0/\iomodule_0/IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I/Two_SRL16.SRL16E_2/Use_unisim.XIL_SRL16E_I1 " *) 
  SRLC32E #(
    .INIT(32'h00000001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(\not_First.Clk_En_Out_i_reg ),
        .CLK(Clk),
        .D(Q),
        .Q(Q),
        .Q31(\NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "XIL_SRLC16E" *) 
module controller_XIL_SRLC16E
   (D,
    \not_First.Clk_En_Out_i_reg ,
    Q,
    Clk);
  output D;
  input \not_First.Clk_En_Out_i_reg ;
  input Q;
  input Clk;

  wire Clk;
  wire D;
  wire Q;
  wire \not_First.Clk_En_Out_i_reg ;

endmodule

(* ORIG_REF_NAME = "Zero_Detect" *) 
module controller_Zero_Detect
   (Reg_zero,
    Reg_Test_Equal,
    \Zero_Detecting[0].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Zero_Detecting[1].nibble_Zero_reg ,
    \Zero_Detecting[2].nibble_Zero_reg ,
    \Zero_Detecting[3].nibble_Zero_reg ,
    \Zero_Detecting[4].nibble_Zero_reg ,
    \Zero_Detecting[5].nibble_Zero_reg ,
    lopt,
    lopt_1,
    lopt_2);
  output Reg_zero;
  input Reg_Test_Equal;
  input \Zero_Detecting[0].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Zero_Detecting[1].nibble_Zero_reg ;
  input \Zero_Detecting[2].nibble_Zero_reg ;
  input \Zero_Detecting[3].nibble_Zero_reg ;
  input \Zero_Detecting[4].nibble_Zero_reg ;
  input \Zero_Detecting[5].nibble_Zero_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire CI;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N;
  wire Reg_zero;
  wire \Zero_Detecting[0].I_Part_Of_Zero_Detect_n_0 ;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].I_Part_Of_Zero_Detect_n_0 ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].I_Part_Of_Zero_Detect_n_0 ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].I_Part_Of_Zero_Detect_n_0 ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].I_Part_Of_Zero_Detect_n_0 ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  controller_microblaze_v9_5_MB_MUXCY_57 Part_Of_Zero_Carry_Start
       (.CI(CI),
        .Reg_Test_Equal(Reg_Test_Equal),
        .lopt(Reg_Test_Equal_N),
        .lopt_1(\Zero_Detecting[0].nibble_Zero_reg ),
        .lopt_2(\Zero_Detecting[1].nibble_Zero_reg ),
        .lopt_3(\^lopt ),
        .lopt_4(\Zero_Detecting[2].nibble_Zero_reg ));
  controller_microblaze_v9_5_MB_MUXCY_58 \Zero_Detecting[0].I_Part_Of_Zero_Detect 
       (.CI(CI),
        .Reg_Test_Equal_N(Reg_Test_Equal_N),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .break_Pipe_i_reg(\Zero_Detecting[0].I_Part_Of_Zero_Detect_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_59 \Zero_Detecting[1].I_Part_Of_Zero_Detect 
       (.Reg_Test_Equal_N(Reg_Test_Equal_N),
        .\Using_FPGA.Native_0 (\Zero_Detecting[0].I_Part_Of_Zero_Detect_n_0 ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .break_Pipe_i_reg(\Zero_Detecting[1].I_Part_Of_Zero_Detect_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_60 \Zero_Detecting[2].I_Part_Of_Zero_Detect 
       (.Reg_Test_Equal_N(Reg_Test_Equal_N),
        .\Using_FPGA.Native_0 (\Zero_Detecting[1].I_Part_Of_Zero_Detect_n_0 ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .break_Pipe_i_reg(\Zero_Detecting[2].I_Part_Of_Zero_Detect_n_0 ),
        .lopt(\^lopt ));
  controller_microblaze_v9_5_MB_MUXCY_61 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.Reg_Test_Equal_N(Reg_Test_Equal_N),
        .\Using_FPGA.Native_0 (\Zero_Detecting[2].I_Part_Of_Zero_Detect_n_0 ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .break_Pipe_i_reg(\Zero_Detecting[3].I_Part_Of_Zero_Detect_n_0 ),
        .lopt(\Zero_Detecting[4].nibble_Zero_reg ),
        .lopt_1(\Zero_Detecting[5].nibble_Zero_reg ),
        .lopt_2(\^lopt_1 ),
        .lopt_3(\^lopt_2 ),
        .lopt_4(lopt_3));
  controller_microblaze_v9_5_MB_MUXCY_62 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.Reg_Test_Equal_N(Reg_Test_Equal_N),
        .\Using_FPGA.Native_0 (\Zero_Detecting[3].I_Part_Of_Zero_Detect_n_0 ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .break_Pipe_i_reg(\Zero_Detecting[4].I_Part_Of_Zero_Detect_n_0 ));
  controller_microblaze_v9_5_MB_MUXCY_63 \Zero_Detecting[5].I_Part_Of_Zero_Detect 
       (.Reg_Test_Equal_N(Reg_Test_Equal_N),
        .Reg_zero(Reg_zero),
        .\Using_FPGA.Native_0 (\Zero_Detecting[4].I_Part_Of_Zero_Detect_n_0 ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "intr_ctrl" *) 
module controller_intr_ctrl
   (\Using_FPGA.Native ,
    INTC_IRQ,
    active_wakeup0,
    Extend_Data_Read,
    \All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 ,
    \fifo_DOut_reg[7] ,
    \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ,
    \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ,
    \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ,
    \Using_FPGA.Native_8 ,
    Clk,
    LMB_Rst_reg,
    LMB_Rst_reg_0,
    LMB_Rst_reg_1,
    Sleep_Decode,
    DATA_OUTB,
    \No_ECC.lmb_as_reg ,
    \Using_B36_S4.The_BRAMs[5].RAMB36_I1 ,
    sel_LSB,
    \Using_B36_S4.The_BRAMs[5].RAMB36_I1_0 ,
    Q,
    lmb_reg_write_reg,
    lmb_reg_read_reg,
    \lmb_abus_Q_reg[0] ,
    \Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ,
    \Using_GPI.GPI_In_reg[31] ,
    \UART_Status_reg[0] ,
    \RX_Data_reg[2] ,
    lmb_reg_read_Q_reg,
    lmb_reg_read_Q_reg_0,
    out,
    TX_Data_Transmitted);
  output [28:0]\Using_FPGA.Native ;
  output INTC_IRQ;
  output active_wakeup0;
  output [1:0]Extend_Data_Read;
  output \All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 ;
  output \fifo_DOut_reg[7] ;
  output \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ;
  output \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ;
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  output [12:0]\Using_FPGA.Native_8 ;
  input Clk;
  input LMB_Rst_reg;
  input LMB_Rst_reg_0;
  input LMB_Rst_reg_1;
  input Sleep_Decode;
  input [17:0]DATA_OUTB;
  input \No_ECC.lmb_as_reg ;
  input \Using_B36_S4.The_BRAMs[5].RAMB36_I1 ;
  input [1:0]sel_LSB;
  input \Using_B36_S4.The_BRAMs[5].RAMB36_I1_0 ;
  input [5:0]Q;
  input lmb_reg_write_reg;
  input lmb_reg_read_reg;
  input \lmb_abus_Q_reg[0] ;
  input [1:0]\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ;
  input [17:0]\Using_GPI.GPI_In_reg[31] ;
  input [0:0]\UART_Status_reg[0] ;
  input [2:0]\RX_Data_reg[2] ;
  input lmb_reg_read_Q_reg;
  input lmb_reg_read_Q_reg_0;
  input [14:0]out;
  input TX_Data_Transmitted;

  wire \All_INTR_Bits[0].Using_CIMR.cimr[0]_i_1_n_0 ;
  wire \All_INTR_Bits[0].Using_Intr.cier[0]_i_1_n_0 ;
  wire \All_INTR_Bits[0].Using_Intr.cisr[0]_i_4_n_0 ;
  wire \All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ;
  wire \All_INTR_Bits[1].Using_CIMR.cimr[1]_i_1_n_0 ;
  wire \All_INTR_Bits[1].Using_Intr.cier[1]_i_1_n_0 ;
  wire \All_INTR_Bits[1].Using_Intr.cisr[1]_i_1_n_0 ;
  wire \All_INTR_Bits[1].Using_Intr.cisr[1]_i_2_n_0 ;
  wire \All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 ;
  wire \All_INTR_Bits[2].Using_CIMR.cimr[2]_i_1_n_0 ;
  wire \All_INTR_Bits[2].Using_Intr.cier[2]_i_1_n_0 ;
  wire \All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ;
  wire Clk;
  wire D;
  wire D28_out;
  wire D39_out;
  wire [17:0]DATA_OUTB;
  wire [1:0]Extend_Data_Read;
  wire [2:0]INTC_CIPR;
  wire [2:0]INTC_CISR;
  wire \INTC_CISR[0]_i_1_n_0 ;
  wire \INTC_CISR[1]_i_1_n_0 ;
  wire \INTC_CISR[2]_i_1_n_0 ;
  wire \INTC_CISR[2]_i_2_n_0 ;
  wire INTC_IRQ;
  wire LMB_Rst_reg;
  wire LMB_Rst_reg_0;
  wire LMB_Rst_reg_1;
  wire \No_ECC.lmb_as_reg ;
  wire [5:0]Q;
  wire R;
  wire [2:0]\RX_Data_reg[2] ;
  wire Sleep_Decode;
  wire TX_Data_Transmitted;
  wire [0:0]\UART_Status_reg[0] ;
  wire \Using_B36_S4.The_BRAMs[5].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[5].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ;
  wire [28:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [12:0]\Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_i_2__53_n_0 ;
  wire \Using_FPGA.Native_i_2__55_n_0 ;
  wire \Using_FPGA.Native_i_3__7_n_0 ;
  wire \Using_FPGA.Native_i_4__6_n_0 ;
  wire \Using_FPGA.Native_i_4__7_n_0 ;
  wire \Using_Fast.INTC_IRQ_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ;
  wire \Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[0] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[1] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[2] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[3] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[4] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[5] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[6] ;
  wire [12:0]\Using_Fast.Using_LUTRAM.civar_reg[7] ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_3_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_2_n_0 ;
  wire \Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_3_n_0 ;
  wire \Using_Fast.civr[0]_i_1_n_0 ;
  wire \Using_Fast.civr[1]_i_1_n_0 ;
  wire \Using_Fast.civr[2]_i_1_n_0 ;
  wire \Using_Fast.do_fast_ack_i_1_n_0 ;
  wire \Using_Fast.do_fast_ack_i_2_n_0 ;
  wire \Using_Fast.fast_state[0]_i_1_n_0 ;
  wire \Using_Fast.fast_state[1]_i_1_n_0 ;
  wire \Using_Fast.fast_state_reg_n_0_[0] ;
  wire \Using_Fast.fast_state_reg_n_0_[1] ;
  wire [17:0]\Using_GPI.GPI_In_reg[31] ;
  wire [1:0]\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] ;
  wire active_wakeup0;
  wire [0:0]byte_zeros;
  wire [2:0]cier;
  wire [2:0]cimr;
  wire [2:0]cisr;
  wire [12:0]\civar[15]_0 ;
  wire [2:0]civr;
  wire do_fast_ack;
  wire \fifo_DOut_reg[7] ;
  wire intc_write_cier;
  wire intc_write_cimr;
  wire \lmb_abus_Q_reg[0] ;
  wire lmb_reg_read_Q_reg;
  wire lmb_reg_read_Q_reg_0;
  wire lmb_reg_read_reg;
  wire lmb_reg_write_reg;
  wire [14:0]out;
  wire [1:0]sel_LSB;

  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[0].Using_CIMR.cimr[0]_i_1 
       (.I0(out[0]),
        .I1(intc_write_cimr),
        .I2(cimr[0]),
        .O(\All_INTR_Bits[0].Using_CIMR.cimr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \All_INTR_Bits[0].Using_CIMR.cimr[0]_i_2 
       (.I0(Q[5]),
        .I1(lmb_reg_write_reg),
        .I2(\fifo_DOut_reg[7] ),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[4]),
        .O(intc_write_cimr));
  FDRE \All_INTR_Bits[0].Using_CIMR.cimr_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[0].Using_CIMR.cimr[0]_i_1_n_0 ),
        .Q(cimr[0]),
        .R(LMB_Rst_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[0].Using_Intr.cier[0]_i_1 
       (.I0(out[0]),
        .I1(intc_write_cier),
        .I2(cier[0]),
        .O(\All_INTR_Bits[0].Using_Intr.cier[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \All_INTR_Bits[0].Using_Intr.cier[0]_i_2 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\lmb_abus_Q_reg[0] ),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(intc_write_cier));
  FDRE \All_INTR_Bits[0].Using_Intr.cier_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[0].Using_Intr.cier[0]_i_1_n_0 ),
        .Q(cier[0]),
        .R(LMB_Rst_reg_1));
  LUT5 #(
    .INIT(32'h55575555)) 
    \All_INTR_Bits[0].Using_Intr.cisr[0]_i_2 
       (.I0(cisr[0]),
        .I1(civr[2]),
        .I2(civr[1]),
        .I3(civr[0]),
        .I4(do_fast_ack),
        .O(\All_INTR_Bits[0].Using_Intr.cisr_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFBFFF)) 
    \All_INTR_Bits[0].Using_Intr.cisr[0]_i_3 
       (.I0(Q[5]),
        .I1(lmb_reg_write_reg),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(\All_INTR_Bits[0].Using_Intr.cisr[0]_i_4_n_0 ),
        .I5(Q[4]),
        .O(\All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \All_INTR_Bits[0].Using_Intr.cisr[0]_i_4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\All_INTR_Bits[0].Using_Intr.cisr[0]_i_4_n_0 ));
  FDRE \All_INTR_Bits[0].Using_Intr.cisr_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_Rst_reg),
        .Q(cisr[0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[1].Using_CIMR.cimr[1]_i_1 
       (.I0(out[1]),
        .I1(intc_write_cimr),
        .I2(cimr[1]),
        .O(\All_INTR_Bits[1].Using_CIMR.cimr[1]_i_1_n_0 ));
  FDRE \All_INTR_Bits[1].Using_CIMR.cimr_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[1].Using_CIMR.cimr[1]_i_1_n_0 ),
        .Q(cimr[1]),
        .R(LMB_Rst_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[1].Using_Intr.cier[1]_i_1 
       (.I0(out[1]),
        .I1(intc_write_cier),
        .I2(cier[1]),
        .O(\All_INTR_Bits[1].Using_Intr.cier[1]_i_1_n_0 ));
  FDRE \All_INTR_Bits[1].Using_Intr.cier_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[1].Using_Intr.cier[1]_i_1_n_0 ),
        .Q(cier[1]),
        .R(LMB_Rst_reg_1));
  LUT5 #(
    .INIT(32'h55550051)) 
    \All_INTR_Bits[1].Using_Intr.cisr[1]_i_1 
       (.I0(LMB_Rst_reg_1),
        .I1(out[1]),
        .I2(\All_INTR_Bits[1].Using_Intr.cisr_reg[1]_0 ),
        .I3(\All_INTR_Bits[1].Using_Intr.cisr[1]_i_2_n_0 ),
        .I4(TX_Data_Transmitted),
        .O(\All_INTR_Bits[1].Using_Intr.cisr[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55755555)) 
    \All_INTR_Bits[1].Using_Intr.cisr[1]_i_2 
       (.I0(cisr[1]),
        .I1(civr[2]),
        .I2(civr[0]),
        .I3(civr[1]),
        .I4(do_fast_ack),
        .O(\All_INTR_Bits[1].Using_Intr.cisr[1]_i_2_n_0 ));
  FDRE \All_INTR_Bits[1].Using_Intr.cisr_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[1].Using_Intr.cisr[1]_i_1_n_0 ),
        .Q(cisr[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[2].Using_CIMR.cimr[2]_i_1 
       (.I0(out[2]),
        .I1(intc_write_cimr),
        .I2(cimr[2]),
        .O(\All_INTR_Bits[2].Using_CIMR.cimr[2]_i_1_n_0 ));
  FDRE \All_INTR_Bits[2].Using_CIMR.cimr_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[2].Using_CIMR.cimr[2]_i_1_n_0 ),
        .Q(cimr[2]),
        .R(LMB_Rst_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \All_INTR_Bits[2].Using_Intr.cier[2]_i_1 
       (.I0(out[2]),
        .I1(intc_write_cier),
        .I2(cier[2]),
        .O(\All_INTR_Bits[2].Using_Intr.cier[2]_i_1_n_0 ));
  FDRE \All_INTR_Bits[2].Using_Intr.cier_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\All_INTR_Bits[2].Using_Intr.cier[2]_i_1_n_0 ),
        .Q(cier[2]),
        .R(LMB_Rst_reg_1));
  LUT5 #(
    .INIT(32'h55755555)) 
    \All_INTR_Bits[2].Using_Intr.cisr[2]_i_2 
       (.I0(cisr[2]),
        .I1(civr[2]),
        .I2(civr[1]),
        .I3(civr[0]),
        .I4(do_fast_ack),
        .O(\All_INTR_Bits[2].Using_Intr.cisr_reg[2]_0 ));
  FDRE \All_INTR_Bits[2].Using_Intr.cisr_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_Rst_reg_0),
        .Q(cisr[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \INTC_CISR[0]_i_1 
       (.I0(cisr[0]),
        .I1(\INTC_CISR[2]_i_2_n_0 ),
        .O(\INTC_CISR[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \INTC_CISR[1]_i_1 
       (.I0(cisr[1]),
        .I1(\INTC_CISR[2]_i_2_n_0 ),
        .O(\INTC_CISR[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \INTC_CISR[2]_i_1 
       (.I0(cisr[2]),
        .I1(\INTC_CISR[2]_i_2_n_0 ),
        .O(\INTC_CISR[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFF7FFFFFFFF)) 
    \INTC_CISR[2]_i_2 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(lmb_reg_read_reg),
        .O(\INTC_CISR[2]_i_2_n_0 ));
  FDRE \INTC_CISR_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\INTC_CISR[0]_i_1_n_0 ),
        .Q(INTC_CISR[0]),
        .R(1'b0));
  FDRE \INTC_CISR_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\INTC_CISR[1]_i_1_n_0 ),
        .Q(INTC_CISR[1]),
        .R(1'b0));
  FDRE \INTC_CISR_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\INTC_CISR[2]_i_1_n_0 ),
        .Q(INTC_CISR[2]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(\Using_FPGA.Native_i_2__53_n_0 ),
        .I1(DATA_OUTB[2]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_3__7_n_0 ),
        .I4(\Using_B36_S4.The_BRAMs[5].RAMB36_I1 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[1]));
  LUT6 #(
    .INIT(64'h554055400000FFFF)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(\Using_FPGA.Native_i_2__55_n_0 ),
        .I1(DATA_OUTB[1]),
        .I2(\No_ECC.lmb_as_reg ),
        .I3(\Using_FPGA.Native_i_4__7_n_0 ),
        .I4(\Using_B36_S4.The_BRAMs[5].RAMB36_I1_0 ),
        .I5(sel_LSB[0]),
        .O(Extend_Data_Read[0]));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__43 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [20]),
        .I2(\Using_GPI.GPI_In_reg[31] [9]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[9]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__45 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [19]),
        .I2(\Using_GPI.GPI_In_reg[31] [8]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[8]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1_0 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__47 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [18]),
        .I2(\Using_GPI.GPI_In_reg[31] [7]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[7]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1_1 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__49 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [17]),
        .I2(\Using_GPI.GPI_In_reg[31] [6]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[6]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1_2 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__51 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [16]),
        .I2(\Using_GPI.GPI_In_reg[31] [5]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[5]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__53 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [15]),
        .I2(\Using_GPI.GPI_In_reg[31] [4]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[4]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_i_2__53_n_0 ));
  LUT6 #(
    .INIT(64'h0000015501550155)) 
    \Using_FPGA.Native_i_2__55 
       (.I0(sel_LSB[1]),
        .I1(\Using_FPGA.Native [14]),
        .I2(\Using_GPI.GPI_In_reg[31] [3]),
        .I3(lmb_reg_read_Q_reg),
        .I4(DATA_OUTB[3]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_i_2__55_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__58 
       (.I0(\Using_FPGA.Native [28]),
        .I1(\Using_GPI.GPI_In_reg[31] [17]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[17]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__59 
       (.I0(\Using_FPGA.Native [27]),
        .I1(\Using_GPI.GPI_In_reg[31] [16]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[16]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__60 
       (.I0(\Using_FPGA.Native [26]),
        .I1(\Using_GPI.GPI_In_reg[31] [15]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[15]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__61 
       (.I0(\Using_FPGA.Native [25]),
        .I1(\Using_GPI.GPI_In_reg[31] [14]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[14]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__62 
       (.I0(\Using_FPGA.Native [24]),
        .I1(\Using_GPI.GPI_In_reg[31] [13]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[13]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__63 
       (.I0(\Using_FPGA.Native [23]),
        .I1(\Using_GPI.GPI_In_reg[31] [12]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[12]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__64 
       (.I0(\Using_FPGA.Native [22]),
        .I1(\Using_GPI.GPI_In_reg[31] [11]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[11]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_6 ));
  LUT6 #(
    .INIT(64'hFFFFEEE0EEE0EEE0)) 
    \Using_FPGA.Native_i_2__65 
       (.I0(\Using_FPGA.Native [21]),
        .I1(\Using_GPI.GPI_In_reg[31] [10]),
        .I2(lmb_reg_read_Q_reg_0),
        .I3(lmb_reg_write_reg),
        .I4(DATA_OUTB[10]),
        .I5(\No_ECC.lmb_as_reg ),
        .O(\Using_FPGA.Native_7 ));
  LUT6 #(
    .INIT(64'h8F8F8F8FFFFFFF8F)) 
    \Using_FPGA.Native_i_2__66 
       (.I0(DATA_OUTB[0]),
        .I1(\No_ECC.lmb_as_reg ),
        .I2(sel_LSB[1]),
        .I3(lmb_reg_write_reg),
        .I4(lmb_reg_read_Q_reg_0),
        .I5(\Using_FPGA.Native_i_4__6_n_0 ),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \Using_FPGA.Native_i_3__7 
       (.I0(INTC_CISR[2]),
        .I1(\Using_GPI.GPI_In_reg[31] [2]),
        .I2(\RX_Data_reg[2] [2]),
        .I3(INTC_CIPR[2]),
        .I4(lmb_reg_read_Q_reg),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_3__7_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \Using_FPGA.Native_i_4__6 
       (.I0(INTC_CISR[0]),
        .I1(\Using_GPI.GPI_In_reg[31] [0]),
        .I2(\UART_Status_reg[0] ),
        .I3(\RX_Data_reg[2] [0]),
        .I4(INTC_CIPR[0]),
        .O(\Using_FPGA.Native_i_4__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \Using_FPGA.Native_i_4__7 
       (.I0(INTC_CISR[1]),
        .I1(\Using_GPI.GPI_In_reg[31] [1]),
        .I2(\RX_Data_reg[2] [1]),
        .I3(INTC_CIPR[1]),
        .I4(lmb_reg_read_Q_reg),
        .I5(sel_LSB[1]),
        .O(\Using_FPGA.Native_i_4__7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h4044)) 
    \Using_Fast.INTC_IRQ_i_1 
       (.I0(\Using_Fast.fast_state_reg_n_0_[1] ),
        .I1(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [1]),
        .I3(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [0]),
        .O(\Using_Fast.INTC_IRQ_i_1_n_0 ));
  FDRE \Using_Fast.INTC_IRQ_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.INTC_IRQ_i_1_n_0 ),
        .Q(INTC_IRQ),
        .R(LMB_Rst_reg_1));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[0][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[1][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[2][12]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[3][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[4][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0400000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[5][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0400000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[6][12]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \Using_Fast.Using_LUTRAM.civar[7][12]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(lmb_reg_write_reg),
        .I5(Q[5]),
        .O(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[0][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[0][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[0] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[1][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[1][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[1] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[2][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[2][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[2] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[3][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[3][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[3] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[4][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[4][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[4] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[5][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[5][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[5] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[6][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[6][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[6] [9]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][0] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[2]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [0]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][10] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[12]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [10]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][11] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[13]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [11]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][12] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[14]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [12]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][1] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[3]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [1]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][2] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[4]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [2]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][3] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[5]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [3]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][4] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[6]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [4]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][5] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[7]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [5]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][6] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[8]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [6]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][7] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[9]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [7]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][8] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[10]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [8]),
        .R(1'b0));
  (* RAM_STYLE = "distributed" *) 
  (* ram_extract = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_Fast.Using_LUTRAM.civar_reg[7][9] 
       (.C(Clk),
        .CE(\Using_Fast.Using_LUTRAM.civar[7][12]_i_1_n_0 ),
        .D(out[11]),
        .Q(\Using_Fast.Using_LUTRAM.civar_reg[7] [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [0]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [0]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [0]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [0]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [0]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [0]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [0]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [0]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [10]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [10]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [10]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [10]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [10]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [10]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [10]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [10]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [11]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [11]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [11]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [11]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [11]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [11]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [11]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [11]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [12]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [12]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [12]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [12]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [12]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [12]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [12]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [12]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [1]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [1]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [1]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [1]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [1]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [1]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [1]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [1]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [2]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [2]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [2]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [2]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [2]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [2]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [2]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [2]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [3]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [3]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [3]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [3]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [3]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [3]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [3]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [3]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [4]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [4]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [4]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [4]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [4]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [4]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [4]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [4]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [5]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [5]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [5]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [5]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [5]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [5]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [5]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [5]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [6]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [6]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [6]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [6]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [6]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [6]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [6]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [6]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [7]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [7]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [7]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [7]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [7]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [7]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [7]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [7]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [8]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [8]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [8]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [8]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [8]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [8]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [8]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [8]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_2 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[3] [9]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[2] [9]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[1] [9]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[0] [9]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_3 
       (.I0(\Using_Fast.Using_LUTRAM.civar_reg[7] [9]),
        .I1(\Using_Fast.Using_LUTRAM.civar_reg[6] [9]),
        .I2(civr[1]),
        .I3(\Using_Fast.Using_LUTRAM.civar_reg[5] [9]),
        .I4(civr[0]),
        .I5(\Using_Fast.Using_LUTRAM.civar_reg[4] [9]),
        .O(\Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_3_n_0 ));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [0]),
        .Q(\Using_FPGA.Native_8 [0]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[0]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[0]_i_3_n_0 ),
        .O(\civar[15]_0 [0]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [10]),
        .Q(\Using_FPGA.Native_8 [10]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[10]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[10]_i_3_n_0 ),
        .O(\civar[15]_0 [10]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [11]),
        .Q(\Using_FPGA.Native_8 [11]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[11]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[11]_i_3_n_0 ),
        .O(\civar[15]_0 [11]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [12]),
        .Q(\Using_FPGA.Native_8 [12]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[12]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[12]_i_3_n_0 ),
        .O(\civar[15]_0 [12]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [1]),
        .Q(\Using_FPGA.Native_8 [1]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[1]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[1]_i_3_n_0 ),
        .O(\civar[15]_0 [1]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [2]),
        .Q(\Using_FPGA.Native_8 [2]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[2]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[2]_i_3_n_0 ),
        .O(\civar[15]_0 [2]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [3]),
        .Q(\Using_FPGA.Native_8 [3]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[3]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[3]_i_3_n_0 ),
        .O(\civar[15]_0 [3]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [4]),
        .Q(\Using_FPGA.Native_8 [4]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[4]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[4]_i_3_n_0 ),
        .O(\civar[15]_0 [4]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [5]),
        .Q(\Using_FPGA.Native_8 [5]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[5]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[5]_i_3_n_0 ),
        .O(\civar[15]_0 [5]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [6]),
        .Q(\Using_FPGA.Native_8 [6]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[6]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[6]_i_3_n_0 ),
        .O(\civar[15]_0 [6]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [7]),
        .Q(\Using_FPGA.Native_8 [7]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[7]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[7]_i_3_n_0 ),
        .O(\civar[15]_0 [7]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [8]),
        .Q(\Using_FPGA.Native_8 [8]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[8]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[8]_i_3_n_0 ),
        .O(\civar[15]_0 [8]),
        .S(civr[2]));
  FDRE \Using_Fast.Using_LUTRAM.intr_addr_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\civar[15]_0 [9]),
        .Q(\Using_FPGA.Native_8 [9]),
        .R(1'b0));
  MUXF7 \Using_Fast.Using_LUTRAM.intr_addr_i_reg[9]_i_1 
       (.I0(\Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_2_n_0 ),
        .I1(\Using_Fast.Using_LUTRAM.intr_addr_i[9]_i_3_n_0 ),
        .O(\civar[15]_0 [9]),
        .S(civr[2]));
  LUT5 #(
    .INIT(32'hFFF20002)) 
    \Using_Fast.civr[0]_i_1 
       (.I0(D28_out),
        .I1(D),
        .I2(\Using_Fast.fast_state_reg_n_0_[1] ),
        .I3(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I4(civr[0]),
        .O(\Using_Fast.civr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF0200000002)) 
    \Using_Fast.civr[1]_i_1 
       (.I0(D39_out),
        .I1(D28_out),
        .I2(D),
        .I3(\Using_Fast.fast_state_reg_n_0_[1] ),
        .I4(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I5(civr[1]),
        .O(\Using_Fast.civr[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \Using_Fast.civr[2]_i_1 
       (.I0(\Using_Fast.fast_state_reg_n_0_[1] ),
        .I1(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I2(civr[2]),
        .O(\Using_Fast.civr[2]_i_1_n_0 ));
  FDRE \Using_Fast.civr_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.civr[0]_i_1_n_0 ),
        .Q(civr[0]),
        .R(LMB_Rst_reg_1));
  FDRE \Using_Fast.civr_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.civr[1]_i_1_n_0 ),
        .Q(civr[1]),
        .R(LMB_Rst_reg_1));
  FDRE \Using_Fast.civr_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.civr[2]_i_1_n_0 ),
        .Q(civr[2]),
        .R(LMB_Rst_reg_1));
  LUT6 #(
    .INIT(64'h0000000033E200E2)) 
    \Using_Fast.do_fast_ack_i_1 
       (.I0(cimr[0]),
        .I1(civr[0]),
        .I2(cimr[1]),
        .I3(civr[1]),
        .I4(cimr[2]),
        .I5(\Using_Fast.do_fast_ack_i_2_n_0 ),
        .O(\Using_Fast.do_fast_ack_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \Using_Fast.do_fast_ack_i_2 
       (.I0(civr[2]),
        .I1(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [0]),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [1]),
        .I3(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I4(\Using_Fast.fast_state_reg_n_0_[1] ),
        .O(\Using_Fast.do_fast_ack_i_2_n_0 ));
  FDRE \Using_Fast.do_fast_ack_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.do_fast_ack_i_1_n_0 ),
        .Q(do_fast_ack),
        .R(LMB_Rst_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h5500BB1B)) 
    \Using_Fast.fast_state[0]_i_1 
       (.I0(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I1(byte_zeros),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [0]),
        .I3(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [1]),
        .I4(\Using_Fast.fast_state_reg_n_0_[1] ),
        .O(\Using_Fast.fast_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_Fast.fast_state[0]_i_2 
       (.I0(cisr[0]),
        .I1(cier[0]),
        .I2(cisr[1]),
        .I3(cier[1]),
        .I4(cier[2]),
        .I5(cisr[2]),
        .O(byte_zeros));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h5508)) 
    \Using_Fast.fast_state[1]_i_1 
       (.I0(\Using_Fast.fast_state_reg_n_0_[0] ),
        .I1(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [0]),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] [1]),
        .I3(\Using_Fast.fast_state_reg_n_0_[1] ),
        .O(\Using_Fast.fast_state[1]_i_1_n_0 ));
  FDRE \Using_Fast.fast_state_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.fast_state[0]_i_1_n_0 ),
        .Q(\Using_Fast.fast_state_reg_n_0_[0] ),
        .R(LMB_Rst_reg_1));
  FDRE \Using_Fast.fast_state_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast.fast_state[1]_i_1_n_0 ),
        .Q(\Using_Fast.fast_state_reg_n_0_[1] ),
        .R(LMB_Rst_reg_1));
  LUT2 #(
    .INIT(4'h8)) 
    active_wakeup_i_1
       (.I0(INTC_IRQ),
        .I1(Sleep_Decode),
        .O(active_wakeup0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[0].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(INTC_CIPR[0]),
        .R(R));
  LUT6 #(
    .INIT(64'hFDFFFFFFFFFFFFFF)) 
    \cipr_rd_dff_all[0].fdr_i_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[4]),
        .I3(lmb_reg_read_reg),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(R));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cipr_rd_dff_all[0].fdr_i_i_2 
       (.I0(cier[0]),
        .I1(cisr[0]),
        .O(D));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[10].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [7]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[11].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [8]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[12].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [9]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[13].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [10]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[14].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [11]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[15].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [12]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[16].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [13]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[17].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [14]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[18].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [15]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[19].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [16]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[1].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(D28_out),
        .Q(INTC_CIPR[1]),
        .R(R));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cipr_rd_dff_all[1].fdr_i_i_1 
       (.I0(cier[1]),
        .I1(cisr[1]),
        .O(D28_out));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[20].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [17]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[21].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [18]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[22].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [19]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[23].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [20]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[24].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [21]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[25].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [22]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[26].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [23]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[27].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [24]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[28].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [25]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[29].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [26]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[2].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(D39_out),
        .Q(INTC_CIPR[2]),
        .R(R));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cipr_rd_dff_all[2].fdr_i_i_1 
       (.I0(cier[2]),
        .I1(cisr[2]),
        .O(D39_out));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[30].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [27]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[31].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [28]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[3].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [0]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[4].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [1]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[5].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [2]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[6].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [3]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[7].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [4]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[8].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [5]),
        .R(R));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cipr_rd_dff_all[9].fdr_i 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\Using_FPGA.Native [6]),
        .R(R));
  LUT2 #(
    .INIT(4'h1)) 
    uart_tx_write_inferred_i_2
       (.I0(Q[3]),
        .I1(Q[2]),
        .O(\fifo_DOut_reg[7] ));
endmodule

(* ORIG_REF_NAME = "iomodule" *) 
module controller_iomodule
   (INTC_IRQ,
    UART_Tx,
    lmb_reg_read_Q,
    lmb_reg_write,
    active_wakeup0,
    Extend_Data_Read,
    Data_Read,
    ex_Valid_reg,
    is_lwx_I_reg,
    UART_Interrupt,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    GPO1,
    Clk,
    LMB_Rst_reg,
    lmb_reg_read0,
    UART_Rx,
    lmb_reg_write0,
    Sleep_Decode,
    DATA_OUTB,
    \No_ECC.lmb_as_reg ,
    sel_LSB,
    Sl_Rdy,
    lmb_as,
    Q,
    D,
    \write_Addr_I_reg[0] ,
    GPI1);
  output INTC_IRQ;
  output UART_Tx;
  output lmb_reg_read_Q;
  output lmb_reg_write;
  output active_wakeup0;
  output [15:0]Extend_Data_Read;
  output Data_Read;
  output ex_Valid_reg;
  output is_lwx_I_reg;
  output UART_Interrupt;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output [12:0]\Using_FPGA.Native_14 ;
  output [31:0]GPO1;
  input Clk;
  input LMB_Rst_reg;
  input lmb_reg_read0;
  input UART_Rx;
  input lmb_reg_write0;
  input Sleep_Decode;
  input [0:31]DATA_OUTB;
  input \No_ECC.lmb_as_reg ;
  input [1:0]sel_LSB;
  input Sl_Rdy;
  input lmb_as;
  input [1:0]Q;
  input [5:0]D;
  input [31:0]\write_Addr_I_reg[0] ;
  input [31:0]GPI1;

  wire Clk;
  wire [5:0]D;
  wire [0:31]DATA_OUTB;
  wire Data_Read;
  wire [15:0]Extend_Data_Read;
  wire [31:0]GPI1;
  wire [31:0]GPO1;
  wire INTC_IRQ;
  wire IOModule_Core_I1_n_20;
  wire LMB_Rst_reg;
  wire \No_ECC.lmb_as_reg ;
  wire [1:0]Q;
  wire Sl_Rdy;
  wire Sleep_Decode;
  wire UART_Interrupt;
  wire UART_Rx;
  wire UART_Tx;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire [12:0]\Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire active_wakeup0;
  wire ex_Valid_reg;
  wire is_lwx_I_reg;
  wire \lmb_abus_Q_reg_n_0_[1] ;
  wire \lmb_abus_Q_reg_n_0_[2] ;
  wire \lmb_abus_Q_reg_n_0_[3] ;
  wire \lmb_abus_Q_reg_n_0_[4] ;
  wire \lmb_abus_Q_reg_n_0_[5] ;
  wire lmb_as;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_read_reg_n_0;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire p_0_in16_in;
  wire [1:0]sel_LSB;
  (* RTL_KEEP = "SOFT" *) wire uart_tx_write;
  wire [31:0]\write_Addr_I_reg[0] ;
  (* RTL_KEEP = "SOFT" *) wire [31:0]write_data;

  controller_Iomodule_core IOModule_Core_I1
       (.Clk(Clk),
        .DATA_OUTB(DATA_OUTB),
        .Data_Read(Data_Read),
        .E(uart_tx_write),
        .Extend_Data_Read(Extend_Data_Read),
        .GPI1(GPI1),
        .GPO1(GPO1),
        .INTC_IRQ(INTC_IRQ),
        .LMB_Rst_reg(LMB_Rst_reg),
        .\No_ECC.lmb_as_reg (\No_ECC.lmb_as_reg ),
        .Q({p_0_in16_in,\lmb_abus_Q_reg_n_0_[1] ,\lmb_abus_Q_reg_n_0_[2] ,\lmb_abus_Q_reg_n_0_[3] ,\lmb_abus_Q_reg_n_0_[4] ,\lmb_abus_Q_reg_n_0_[5] }),
        .Sleep_Decode(Sleep_Decode),
        .UART_Interrupt(UART_Interrupt),
        .UART_Rx(UART_Rx),
        .UART_Tx(UART_Tx),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_9 ),
        .\Using_dynamic_instr_Address.Interrupt_Ack_reg[0] (Q),
        .active_wakeup0(active_wakeup0),
        .\fifo_DOut_reg[7] (IOModule_Core_I1_n_20),
        .lmb_reg_read_Q_reg(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg_0(is_lwx_I_reg),
        .lmb_reg_read_reg(lmb_reg_read_reg_n_0),
        .lmb_reg_write_reg(lmb_reg_write),
        .out(write_data),
        .sel_LSB(sel_LSB));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h0111)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(lmb_reg_write),
        .I1(lmb_reg_read_Q),
        .I2(Sl_Rdy),
        .I3(lmb_as),
        .O(ex_Valid_reg));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_6__6 
       (.I0(lmb_reg_read_Q),
        .I1(lmb_reg_write),
        .O(is_lwx_I_reg));
  FDRE \lmb_abus_Q_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(p_0_in16_in),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\lmb_abus_Q_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\lmb_abus_Q_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\lmb_abus_Q_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\lmb_abus_Q_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\lmb_abus_Q_reg_n_0_[5] ),
        .R(1'b0));
  FDRE lmb_reg_read_Q_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_read_reg_n_0),
        .Q(lmb_reg_read_Q),
        .R(1'b0));
  FDRE lmb_reg_read_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_read0),
        .Q(lmb_reg_read_reg_n_0),
        .R(1'b0));
  FDRE lmb_reg_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_write0),
        .Q(lmb_reg_write),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    uart_tx_write_inferred_i_1
       (.I0(p_0_in16_in),
        .I1(lmb_reg_write),
        .I2(IOModule_Core_I1_n_20),
        .I3(\lmb_abus_Q_reg_n_0_[5] ),
        .I4(\lmb_abus_Q_reg_n_0_[4] ),
        .I5(\lmb_abus_Q_reg_n_0_[1] ),
        .O(uart_tx_write));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [0]),
        .Q(write_data[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [10]),
        .Q(write_data[10]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [11]),
        .Q(write_data[11]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [12]),
        .Q(write_data[12]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [13]),
        .Q(write_data[13]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [14]),
        .Q(write_data[14]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [15]),
        .Q(write_data[15]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [16]),
        .Q(write_data[16]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [17]),
        .Q(write_data[17]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [18]),
        .Q(write_data[18]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [19]),
        .Q(write_data[19]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [1]),
        .Q(write_data[1]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [20]),
        .Q(write_data[20]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [21]),
        .Q(write_data[21]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [22]),
        .Q(write_data[22]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [23]),
        .Q(write_data[23]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [24]),
        .Q(write_data[24]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [25]),
        .Q(write_data[25]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [26]),
        .Q(write_data[26]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [27]),
        .Q(write_data[27]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [28]),
        .Q(write_data[28]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [29]),
        .Q(write_data[29]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [2]),
        .Q(write_data[2]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [30]),
        .Q(write_data[30]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [31]),
        .Q(write_data[31]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [3]),
        .Q(write_data[3]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [4]),
        .Q(write_data[4]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [5]),
        .Q(write_data[5]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [6]),
        .Q(write_data[6]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [7]),
        .Q(write_data[7]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [8]),
        .Q(write_data[8]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE \write_data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I_reg[0] [9]),
        .Q(write_data[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "lmb_bram" *) 
module controller_lmb_bram
   (DATA_OUTA,
    DATA_OUTB,
    LMB_AddrStrobe,
    Clk,
    ENB,
    ADDRARDADDR,
    ADDRBWRADDR,
    DATA_INB,
    WEB);
  output [0:31]DATA_OUTA;
  output [0:31]DATA_OUTB;
  input LMB_AddrStrobe;
  input Clk;
  input ENB;
  input [12:0]ADDRARDADDR;
  input [12:0]ADDRBWRADDR;
  input [0:31]DATA_INB;
  input [0:3]WEB;

  wire [12:0]ADDRARDADDR;
  wire [12:0]ADDRBWRADDR;
  wire Clk;
  wire [0:31]DATA_INB;
  wire [0:31]DATA_OUTA;
  wire [0:31]DATA_OUTB;
  wire ENB;
  wire LMB_AddrStrobe;
  wire [0:3]WEB;

  controller_RAM_Module_Top RAM_Inst
       (.ADDRARDADDR(ADDRARDADDR),
        .ADDRBWRADDR(ADDRBWRADDR),
        .Clk(Clk),
        .DATA_INB(DATA_INB),
        .DATA_OUTA(DATA_OUTA),
        .DATA_OUTB(DATA_OUTB),
        .ENB(ENB),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .WEB(WEB));
endmodule

(* ORIG_REF_NAME = "lmb_bram_if_cntlr" *) 
module controller_lmb_bram_if_cntlr
   (lmb_as,
    Sl_Rdy,
    \Using_FPGA.Native ,
    is_lwx_I_reg,
    is_swx_I_reg,
    Clk,
    POR_FF_I,
    lmb_reg_read_Q,
    lmb_reg_write);
  output lmb_as;
  output Sl_Rdy;
  output \Using_FPGA.Native ;
  output is_lwx_I_reg;
  input is_swx_I_reg;
  input Clk;
  input POR_FF_I;
  input lmb_reg_read_Q;
  input lmb_reg_write;

  wire Clk;
  wire POR_FF_I;
  wire Sl_Rdy;
  wire \Using_FPGA.Native ;
  wire is_lwx_I_reg;
  wire is_swx_I_reg;
  wire lmb_as;
  wire lmb_reg_read_Q;
  wire lmb_reg_write;

  FDRE \No_ECC.Sl_Rdy_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(POR_FF_I),
        .Q(Sl_Rdy),
        .R(1'b0));
  FDRE \No_ECC.lmb_as_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(is_swx_I_reg),
        .Q(lmb_as),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .I2(lmb_reg_read_Q),
        .I3(lmb_reg_write),
        .O(\Using_FPGA.Native ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .O(is_lwx_I_reg));
endmodule

(* ORIG_REF_NAME = "lmb_bram_if_cntlr" *) 
module controller_lmb_bram_if_cntlr__parameterized1
   (lmb_as,
    Sl_Rdy,
    LMB_Ready,
    POR_FF_I,
    Clk,
    POR_FF_I_0);
  output lmb_as;
  output Sl_Rdy;
  output LMB_Ready;
  input POR_FF_I;
  input Clk;
  input POR_FF_I_0;

  wire Clk;
  wire LMB_Ready;
  wire POR_FF_I;
  wire POR_FF_I_0;
  wire Sl_Rdy;
  wire lmb_as;

  FDRE \No_ECC.Sl_Rdy_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(POR_FF_I_0),
        .Q(Sl_Rdy),
        .R(1'b0));
  FDRE \No_ECC.lmb_as_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(POR_FF_I),
        .Q(lmb_as),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .O(LMB_Ready));
endmodule

(* ORIG_REF_NAME = "lmb_v10" *) 
module controller_lmb_v10
   (reset_temp,
    \No_ECC.Sl_Rdy_reg ,
    LMB_Rst_reg,
    Clk);
  output reset_temp;
  output \No_ECC.Sl_Rdy_reg ;
  input LMB_Rst_reg;
  input Clk;

  wire Clk;
  wire LMB_Rst_reg;
  wire \No_ECC.Sl_Rdy_reg ;
  wire reset_temp;

  LUT1 #(
    .INIT(2'h1)) 
    \No_ECC.Sl_Rdy_i_1__0 
       (.I0(reset_temp),
        .O(\No_ECC.Sl_Rdy_reg ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    POR_FF_I
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(reset_temp),
        .S(LMB_Rst_reg));
endmodule

(* ORIG_REF_NAME = "lmb_v10" *) 
module controller_lmb_v10__parameterized1
   (\No_ECC.lmb_as_reg ,
    LMB_Rst_reg,
    Clk);
  output \No_ECC.lmb_as_reg ;
  input LMB_Rst_reg;
  input Clk;

  wire Clk;
  wire LMB_Rst_reg;
  wire \No_ECC.lmb_as_reg ;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    POR_FF_I
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\No_ECC.lmb_as_reg ),
        .S(LMB_Rst_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module controller_mb_sync_bit
   (out,
    R,
    \Using_LWX_SWX_instr.reservation_reg ,
    write_Reg_reg,
    \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    \Using_FPGA.Native ,
    Jump,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Exception_Kind,
    reset_temp,
    Clk);
  output [0:0]out;
  output R;
  output \Using_LWX_SWX_instr.reservation_reg ;
  output write_Reg_reg;
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  output \Using_FPGA.Native ;
  input Jump;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [0:0]Exception_Kind;
  input reset_temp;
  input Clk;

  wire Clk;
  wire [0:0]Exception_Kind;
  wire Jump;
  wire R;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire reset_temp;
  wire [1:2]sync;
  wire write_Reg_reg;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(sync[2]),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(sync[2]),
        .I1(Jump),
        .O(R));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(sync[2]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\Using_FPGA.Native ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_LWX_SWX_instr.reservation_i_3 
       (.I0(sync[2]),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(\Using_LWX_SWX_instr.reservation_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    write_Reg_i_2
       (.I0(sync[2]),
        .I1(Exception_Kind),
        .O(write_Reg_reg));
endmodule

(* C_AVOID_PRIMITIVES = "0" *) (* C_DEBUG_ENABLED = "0" *) (* C_FAMILY = "artix7" *) 
(* C_FIT1_INTERRUPT = "0" *) (* C_FIT1_No_CLOCKS = "6216" *) (* C_FIT2_INTERRUPT = "0" *) 
(* C_FIT2_No_CLOCKS = "6216" *) (* C_FIT3_INTERRUPT = "0" *) (* C_FIT3_No_CLOCKS = "6216" *) 
(* C_FIT4_INTERRUPT = "0" *) (* C_FIT4_No_CLOCKS = "6216" *) (* C_FREQ = "100000000" *) 
(* C_GPI1_INTERRUPT = "0" *) (* C_GPI1_SIZE = "32" *) (* C_GPI2_INTERRUPT = "0" *) 
(* C_GPI2_SIZE = "32" *) (* C_GPI3_INTERRUPT = "0" *) (* C_GPI3_SIZE = "32" *) 
(* C_GPI4_INTERRUPT = "0" *) (* C_GPI4_SIZE = "32" *) (* C_GPO1_INIT = "0" *) 
(* C_GPO1_SIZE = "32" *) (* C_GPO2_INIT = "0" *) (* C_GPO2_SIZE = "32" *) 
(* C_GPO3_INIT = "0" *) (* C_GPO3_SIZE = "32" *) (* C_GPO4_INIT = "0" *) 
(* C_GPO4_SIZE = "32" *) (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) (* C_INTC_INTR_SIZE = "1" *) 
(* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) (* C_INTC_NUM_SYNC_FF = "2" *) (* C_INTC_POSITIVE = "16'b1111111111111111" *) 
(* C_INTC_USE_EXT_INTR = "0" *) (* C_JTAG_CHAIN = "2" *) (* C_MEMSIZE = "32768" *) 
(* C_MICROBLAZE_INSTANCE = "controller" *) (* C_PATH = "mcs_0/U0" *) (* C_PIT1_INTERRUPT = "0" *) 
(* C_PIT1_PRESCALER = "0" *) (* C_PIT1_READABLE = "1" *) (* C_PIT1_SIZE = "32" *) 
(* C_PIT2_INTERRUPT = "0" *) (* C_PIT2_PRESCALER = "0" *) (* C_PIT2_READABLE = "1" *) 
(* C_PIT2_SIZE = "32" *) (* C_PIT3_INTERRUPT = "0" *) (* C_PIT3_PRESCALER = "0" *) 
(* C_PIT3_READABLE = "1" *) (* C_PIT3_SIZE = "32" *) (* C_PIT4_INTERRUPT = "0" *) 
(* C_PIT4_PRESCALER = "0" *) (* C_PIT4_READABLE = "1" *) (* C_PIT4_SIZE = "32" *) 
(* C_TRACE = "0" *) (* C_UART_BAUDRATE = "9600" *) (* C_UART_DATA_BITS = "8" *) 
(* C_UART_ERROR_INTERRUPT = "1" *) (* C_UART_ODD_PARITY = "0" *) (* C_UART_PROG_BAUDRATE = "0" *) 
(* C_UART_RX_INTERRUPT = "1" *) (* C_UART_TX_INTERRUPT = "1" *) (* C_UART_USE_PARITY = "0" *) 
(* C_USE_FIT1 = "0" *) (* C_USE_FIT2 = "0" *) (* C_USE_FIT3 = "0" *) 
(* C_USE_FIT4 = "0" *) (* C_USE_GPI1 = "1" *) (* C_USE_GPI2 = "0" *) 
(* C_USE_GPI3 = "0" *) (* C_USE_GPI4 = "0" *) (* C_USE_GPO1 = "1" *) 
(* C_USE_GPO2 = "0" *) (* C_USE_GPO3 = "0" *) (* C_USE_GPO4 = "0" *) 
(* C_USE_IO_BUS = "0" *) (* C_USE_PIT1 = "0" *) (* C_USE_PIT2 = "0" *) 
(* C_USE_PIT3 = "0" *) (* C_USE_PIT4 = "0" *) (* C_USE_UART_RX = "1" *) 
(* C_USE_UART_TX = "1" *) (* ORIG_REF_NAME = "microblaze_mcs" *) 
module controller_microblaze_mcs
   (Clk,
    Reset,
    IO_Addr_Strobe,
    IO_Read_Strobe,
    IO_Write_Strobe,
    IO_Address,
    IO_Byte_Enable,
    IO_Write_Data,
    IO_Read_Data,
    IO_Ready,
    UART_Rx,
    UART_Tx,
    UART_Interrupt,
    FIT1_Interrupt,
    FIT1_Toggle,
    FIT2_Interrupt,
    FIT2_Toggle,
    FIT3_Interrupt,
    FIT3_Toggle,
    FIT4_Interrupt,
    FIT4_Toggle,
    PIT1_Enable,
    PIT1_Interrupt,
    PIT1_Toggle,
    PIT2_Enable,
    PIT2_Interrupt,
    PIT2_Toggle,
    PIT3_Enable,
    PIT3_Interrupt,
    PIT3_Toggle,
    PIT4_Enable,
    PIT4_Interrupt,
    PIT4_Toggle,
    GPO1,
    GPO2,
    GPO3,
    GPO4,
    GPI1,
    GPI1_Interrupt,
    GPI2,
    GPI2_Interrupt,
    GPI3,
    GPI3_Interrupt,
    GPI4,
    GPI4_Interrupt,
    INTC_Interrupt,
    INTC_IRQ,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_New_Reg_Value,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_MB_Halted);
  input Clk;
  input Reset;
  output IO_Addr_Strobe;
  output IO_Read_Strobe;
  output IO_Write_Strobe;
  output [31:0]IO_Address;
  output [3:0]IO_Byte_Enable;
  output [31:0]IO_Write_Data;
  input [31:0]IO_Read_Data;
  input IO_Ready;
  input UART_Rx;
  output UART_Tx;
  output UART_Interrupt;
  output FIT1_Interrupt;
  output FIT1_Toggle;
  output FIT2_Interrupt;
  output FIT2_Toggle;
  output FIT3_Interrupt;
  output FIT3_Toggle;
  output FIT4_Interrupt;
  output FIT4_Toggle;
  input PIT1_Enable;
  output PIT1_Interrupt;
  output PIT1_Toggle;
  input PIT2_Enable;
  output PIT2_Interrupt;
  output PIT2_Toggle;
  input PIT3_Enable;
  output PIT3_Interrupt;
  output PIT3_Toggle;
  input PIT4_Enable;
  output PIT4_Interrupt;
  output PIT4_Toggle;
  output [31:0]GPO1;
  output [31:0]GPO2;
  output [31:0]GPO3;
  output [31:0]GPO4;
  input [31:0]GPI1;
  output GPI1_Interrupt;
  input [31:0]GPI2;
  output GPI2_Interrupt;
  input [31:0]GPI3;
  output GPI3_Interrupt;
  input [31:0]GPI4;
  output GPI4_Interrupt;
  input [0:0]INTC_Interrupt;
  output INTC_IRQ;
  output [0:31]Trace_Instruction;
  output Trace_Valid_Instr;
  output [0:31]Trace_PC;
  output Trace_Reg_Write;
  output [0:4]Trace_Reg_Addr;
  output [0:14]Trace_MSR_Reg;
  output [0:31]Trace_New_Reg_Value;
  output Trace_Jump_Taken;
  output Trace_Delay_Slot;
  output [0:31]Trace_Data_Address;
  output Trace_Data_Access;
  output Trace_Data_Read;
  output Trace_Data_Write;
  output [0:31]Trace_Data_Write_Value;
  output [0:3]Trace_Data_Byte_Enable;
  output Trace_MB_Halted;

  wire \<const0> ;
  wire [17:29]BRAM_Addr_A;
  wire [17:29]BRAM_Addr_B;
  wire [0:31]BRAM_Din_B;
  wire [0:3]BRAM_WEN_B;
  wire Clk;
  wire [31:0]GPI1;
  wire [31:0]GPI2;
  wire [31:0]GPI3;
  wire [31:0]GPI4;
  wire [31:0]GPO1;
  wire INTC_IRQ;
  wire [0:0]INTC_Interrupt;
  wire [14:2]INTC_Interrupt_Address;
  wire [1:0]INTC_Processor_Ack;
  wire [31:0]IO_Read_Data;
  wire IO_Ready;
  wire LMB_AddrStrobe;
  wire [0:31]LMB_ReadDBus;
  wire LMB_Ready;
  wire LMB_Rst_i_1_n_0;
  wire LMB_Rst_reg_n_0;
  wire [1:0]\MicroBlaze_Core_I/Area.Core/Byte_Doublet_Handle_I/sel_LSB ;
  wire \MicroBlaze_Core_I/Area.Core/Decode_I/active_wakeup0 ;
  wire [16:31]\MicroBlaze_Core_I/Area.Core/Extend_Data_Read ;
  wire \MicroBlaze_Core_I/Sleep_Decode ;
  wire \MicroBlaze_Core_I/reset_temp ;
  wire PIT1_Enable;
  wire PIT2_Enable;
  wire PIT3_Enable;
  wire PIT4_Enable;
  wire Reset;
  wire [0:31]Sl_DBus;
  wire Sl_Rdy;
  wire Sl_Rdy_0;
  wire UART_Interrupt;
  wire UART_Rx;
  wire UART_Tx;
  wire dlmb_cntlr_n_2;
  wire dlmb_cntlr_n_3;
  wire dlmb_n_0;
  wire ilmb_n_1;
  wire iomodule_0_n_21;
  wire iomodule_0_n_22;
  wire iomodule_0_n_23;
  wire iomodule_0_n_25;
  wire iomodule_0_n_26;
  wire iomodule_0_n_27;
  wire iomodule_0_n_28;
  wire iomodule_0_n_29;
  wire iomodule_0_n_30;
  wire iomodule_0_n_31;
  wire iomodule_0_n_32;
  wire iomodule_0_n_33;
  wire iomodule_0_n_34;
  wire iomodule_0_n_35;
  wire iomodule_0_n_36;
  wire iomodule_0_n_37;
  wire iomodule_0_n_38;
  wire iomodule_0_n_39;
  wire lmb_as;
  wire lmb_as_1;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire microblaze_I_n_50;
  wire microblaze_I_n_51;
  wire microblaze_I_n_52;
  wire microblaze_I_n_57;
  wire p_0_in;
  wire \reset_vec_reg_n_0_[1] ;
  wire \reset_vec_reg_n_0_[2] ;

  assign FIT1_Interrupt = \<const0> ;
  assign FIT1_Toggle = \<const0> ;
  assign FIT2_Interrupt = \<const0> ;
  assign FIT2_Toggle = \<const0> ;
  assign FIT3_Interrupt = \<const0> ;
  assign FIT3_Toggle = \<const0> ;
  assign FIT4_Interrupt = \<const0> ;
  assign FIT4_Toggle = \<const0> ;
  assign GPI1_Interrupt = \<const0> ;
  assign GPI2_Interrupt = \<const0> ;
  assign GPI3_Interrupt = \<const0> ;
  assign GPI4_Interrupt = \<const0> ;
  assign GPO2[31] = \<const0> ;
  assign GPO2[30] = \<const0> ;
  assign GPO2[29] = \<const0> ;
  assign GPO2[28] = \<const0> ;
  assign GPO2[27] = \<const0> ;
  assign GPO2[26] = \<const0> ;
  assign GPO2[25] = \<const0> ;
  assign GPO2[24] = \<const0> ;
  assign GPO2[23] = \<const0> ;
  assign GPO2[22] = \<const0> ;
  assign GPO2[21] = \<const0> ;
  assign GPO2[20] = \<const0> ;
  assign GPO2[19] = \<const0> ;
  assign GPO2[18] = \<const0> ;
  assign GPO2[17] = \<const0> ;
  assign GPO2[16] = \<const0> ;
  assign GPO2[15] = \<const0> ;
  assign GPO2[14] = \<const0> ;
  assign GPO2[13] = \<const0> ;
  assign GPO2[12] = \<const0> ;
  assign GPO2[11] = \<const0> ;
  assign GPO2[10] = \<const0> ;
  assign GPO2[9] = \<const0> ;
  assign GPO2[8] = \<const0> ;
  assign GPO2[7] = \<const0> ;
  assign GPO2[6] = \<const0> ;
  assign GPO2[5] = \<const0> ;
  assign GPO2[4] = \<const0> ;
  assign GPO2[3] = \<const0> ;
  assign GPO2[2] = \<const0> ;
  assign GPO2[1] = \<const0> ;
  assign GPO2[0] = \<const0> ;
  assign GPO3[31] = \<const0> ;
  assign GPO3[30] = \<const0> ;
  assign GPO3[29] = \<const0> ;
  assign GPO3[28] = \<const0> ;
  assign GPO3[27] = \<const0> ;
  assign GPO3[26] = \<const0> ;
  assign GPO3[25] = \<const0> ;
  assign GPO3[24] = \<const0> ;
  assign GPO3[23] = \<const0> ;
  assign GPO3[22] = \<const0> ;
  assign GPO3[21] = \<const0> ;
  assign GPO3[20] = \<const0> ;
  assign GPO3[19] = \<const0> ;
  assign GPO3[18] = \<const0> ;
  assign GPO3[17] = \<const0> ;
  assign GPO3[16] = \<const0> ;
  assign GPO3[15] = \<const0> ;
  assign GPO3[14] = \<const0> ;
  assign GPO3[13] = \<const0> ;
  assign GPO3[12] = \<const0> ;
  assign GPO3[11] = \<const0> ;
  assign GPO3[10] = \<const0> ;
  assign GPO3[9] = \<const0> ;
  assign GPO3[8] = \<const0> ;
  assign GPO3[7] = \<const0> ;
  assign GPO3[6] = \<const0> ;
  assign GPO3[5] = \<const0> ;
  assign GPO3[4] = \<const0> ;
  assign GPO3[3] = \<const0> ;
  assign GPO3[2] = \<const0> ;
  assign GPO3[1] = \<const0> ;
  assign GPO3[0] = \<const0> ;
  assign GPO4[31] = \<const0> ;
  assign GPO4[30] = \<const0> ;
  assign GPO4[29] = \<const0> ;
  assign GPO4[28] = \<const0> ;
  assign GPO4[27] = \<const0> ;
  assign GPO4[26] = \<const0> ;
  assign GPO4[25] = \<const0> ;
  assign GPO4[24] = \<const0> ;
  assign GPO4[23] = \<const0> ;
  assign GPO4[22] = \<const0> ;
  assign GPO4[21] = \<const0> ;
  assign GPO4[20] = \<const0> ;
  assign GPO4[19] = \<const0> ;
  assign GPO4[18] = \<const0> ;
  assign GPO4[17] = \<const0> ;
  assign GPO4[16] = \<const0> ;
  assign GPO4[15] = \<const0> ;
  assign GPO4[14] = \<const0> ;
  assign GPO4[13] = \<const0> ;
  assign GPO4[12] = \<const0> ;
  assign GPO4[11] = \<const0> ;
  assign GPO4[10] = \<const0> ;
  assign GPO4[9] = \<const0> ;
  assign GPO4[8] = \<const0> ;
  assign GPO4[7] = \<const0> ;
  assign GPO4[6] = \<const0> ;
  assign GPO4[5] = \<const0> ;
  assign GPO4[4] = \<const0> ;
  assign GPO4[3] = \<const0> ;
  assign GPO4[2] = \<const0> ;
  assign GPO4[1] = \<const0> ;
  assign GPO4[0] = \<const0> ;
  assign IO_Addr_Strobe = \<const0> ;
  assign IO_Address[31] = \<const0> ;
  assign IO_Address[30] = \<const0> ;
  assign IO_Address[29] = \<const0> ;
  assign IO_Address[28] = \<const0> ;
  assign IO_Address[27] = \<const0> ;
  assign IO_Address[26] = \<const0> ;
  assign IO_Address[25] = \<const0> ;
  assign IO_Address[24] = \<const0> ;
  assign IO_Address[23] = \<const0> ;
  assign IO_Address[22] = \<const0> ;
  assign IO_Address[21] = \<const0> ;
  assign IO_Address[20] = \<const0> ;
  assign IO_Address[19] = \<const0> ;
  assign IO_Address[18] = \<const0> ;
  assign IO_Address[17] = \<const0> ;
  assign IO_Address[16] = \<const0> ;
  assign IO_Address[15] = \<const0> ;
  assign IO_Address[14] = \<const0> ;
  assign IO_Address[13] = \<const0> ;
  assign IO_Address[12] = \<const0> ;
  assign IO_Address[11] = \<const0> ;
  assign IO_Address[10] = \<const0> ;
  assign IO_Address[9] = \<const0> ;
  assign IO_Address[8] = \<const0> ;
  assign IO_Address[7] = \<const0> ;
  assign IO_Address[6] = \<const0> ;
  assign IO_Address[5] = \<const0> ;
  assign IO_Address[4] = \<const0> ;
  assign IO_Address[3] = \<const0> ;
  assign IO_Address[2] = \<const0> ;
  assign IO_Address[1] = \<const0> ;
  assign IO_Address[0] = \<const0> ;
  assign IO_Byte_Enable[3] = \<const0> ;
  assign IO_Byte_Enable[2] = \<const0> ;
  assign IO_Byte_Enable[1] = \<const0> ;
  assign IO_Byte_Enable[0] = \<const0> ;
  assign IO_Read_Strobe = \<const0> ;
  assign IO_Write_Data[31] = \<const0> ;
  assign IO_Write_Data[30] = \<const0> ;
  assign IO_Write_Data[29] = \<const0> ;
  assign IO_Write_Data[28] = \<const0> ;
  assign IO_Write_Data[27] = \<const0> ;
  assign IO_Write_Data[26] = \<const0> ;
  assign IO_Write_Data[25] = \<const0> ;
  assign IO_Write_Data[24] = \<const0> ;
  assign IO_Write_Data[23] = \<const0> ;
  assign IO_Write_Data[22] = \<const0> ;
  assign IO_Write_Data[21] = \<const0> ;
  assign IO_Write_Data[20] = \<const0> ;
  assign IO_Write_Data[19] = \<const0> ;
  assign IO_Write_Data[18] = \<const0> ;
  assign IO_Write_Data[17] = \<const0> ;
  assign IO_Write_Data[16] = \<const0> ;
  assign IO_Write_Data[15] = \<const0> ;
  assign IO_Write_Data[14] = \<const0> ;
  assign IO_Write_Data[13] = \<const0> ;
  assign IO_Write_Data[12] = \<const0> ;
  assign IO_Write_Data[11] = \<const0> ;
  assign IO_Write_Data[10] = \<const0> ;
  assign IO_Write_Data[9] = \<const0> ;
  assign IO_Write_Data[8] = \<const0> ;
  assign IO_Write_Data[7] = \<const0> ;
  assign IO_Write_Data[6] = \<const0> ;
  assign IO_Write_Data[5] = \<const0> ;
  assign IO_Write_Data[4] = \<const0> ;
  assign IO_Write_Data[3] = \<const0> ;
  assign IO_Write_Data[2] = \<const0> ;
  assign IO_Write_Data[1] = \<const0> ;
  assign IO_Write_Data[0] = \<const0> ;
  assign IO_Write_Strobe = \<const0> ;
  assign PIT1_Interrupt = \<const0> ;
  assign PIT1_Toggle = \<const0> ;
  assign PIT2_Interrupt = \<const0> ;
  assign PIT2_Toggle = \<const0> ;
  assign PIT3_Interrupt = \<const0> ;
  assign PIT3_Toggle = \<const0> ;
  assign PIT4_Interrupt = \<const0> ;
  assign PIT4_Toggle = \<const0> ;
  assign Trace_Data_Access = \<const0> ;
  assign Trace_Data_Address[0] = \<const0> ;
  assign Trace_Data_Address[1] = \<const0> ;
  assign Trace_Data_Address[2] = \<const0> ;
  assign Trace_Data_Address[3] = \<const0> ;
  assign Trace_Data_Address[4] = \<const0> ;
  assign Trace_Data_Address[5] = \<const0> ;
  assign Trace_Data_Address[6] = \<const0> ;
  assign Trace_Data_Address[7] = \<const0> ;
  assign Trace_Data_Address[8] = \<const0> ;
  assign Trace_Data_Address[9] = \<const0> ;
  assign Trace_Data_Address[10] = \<const0> ;
  assign Trace_Data_Address[11] = \<const0> ;
  assign Trace_Data_Address[12] = \<const0> ;
  assign Trace_Data_Address[13] = \<const0> ;
  assign Trace_Data_Address[14] = \<const0> ;
  assign Trace_Data_Address[15] = \<const0> ;
  assign Trace_Data_Address[16] = \<const0> ;
  assign Trace_Data_Address[17] = \<const0> ;
  assign Trace_Data_Address[18] = \<const0> ;
  assign Trace_Data_Address[19] = \<const0> ;
  assign Trace_Data_Address[20] = \<const0> ;
  assign Trace_Data_Address[21] = \<const0> ;
  assign Trace_Data_Address[22] = \<const0> ;
  assign Trace_Data_Address[23] = \<const0> ;
  assign Trace_Data_Address[24] = \<const0> ;
  assign Trace_Data_Address[25] = \<const0> ;
  assign Trace_Data_Address[26] = \<const0> ;
  assign Trace_Data_Address[27] = \<const0> ;
  assign Trace_Data_Address[28] = \<const0> ;
  assign Trace_Data_Address[29] = \<const0> ;
  assign Trace_Data_Address[30] = \<const0> ;
  assign Trace_Data_Address[31] = \<const0> ;
  assign Trace_Data_Byte_Enable[0] = \<const0> ;
  assign Trace_Data_Byte_Enable[1] = \<const0> ;
  assign Trace_Data_Byte_Enable[2] = \<const0> ;
  assign Trace_Data_Byte_Enable[3] = \<const0> ;
  assign Trace_Data_Read = \<const0> ;
  assign Trace_Data_Write = \<const0> ;
  assign Trace_Data_Write_Value[0] = \<const0> ;
  assign Trace_Data_Write_Value[1] = \<const0> ;
  assign Trace_Data_Write_Value[2] = \<const0> ;
  assign Trace_Data_Write_Value[3] = \<const0> ;
  assign Trace_Data_Write_Value[4] = \<const0> ;
  assign Trace_Data_Write_Value[5] = \<const0> ;
  assign Trace_Data_Write_Value[6] = \<const0> ;
  assign Trace_Data_Write_Value[7] = \<const0> ;
  assign Trace_Data_Write_Value[8] = \<const0> ;
  assign Trace_Data_Write_Value[9] = \<const0> ;
  assign Trace_Data_Write_Value[10] = \<const0> ;
  assign Trace_Data_Write_Value[11] = \<const0> ;
  assign Trace_Data_Write_Value[12] = \<const0> ;
  assign Trace_Data_Write_Value[13] = \<const0> ;
  assign Trace_Data_Write_Value[14] = \<const0> ;
  assign Trace_Data_Write_Value[15] = \<const0> ;
  assign Trace_Data_Write_Value[16] = \<const0> ;
  assign Trace_Data_Write_Value[17] = \<const0> ;
  assign Trace_Data_Write_Value[18] = \<const0> ;
  assign Trace_Data_Write_Value[19] = \<const0> ;
  assign Trace_Data_Write_Value[20] = \<const0> ;
  assign Trace_Data_Write_Value[21] = \<const0> ;
  assign Trace_Data_Write_Value[22] = \<const0> ;
  assign Trace_Data_Write_Value[23] = \<const0> ;
  assign Trace_Data_Write_Value[24] = \<const0> ;
  assign Trace_Data_Write_Value[25] = \<const0> ;
  assign Trace_Data_Write_Value[26] = \<const0> ;
  assign Trace_Data_Write_Value[27] = \<const0> ;
  assign Trace_Data_Write_Value[28] = \<const0> ;
  assign Trace_Data_Write_Value[29] = \<const0> ;
  assign Trace_Data_Write_Value[30] = \<const0> ;
  assign Trace_Data_Write_Value[31] = \<const0> ;
  assign Trace_Delay_Slot = \<const0> ;
  assign Trace_Instruction[0] = \<const0> ;
  assign Trace_Instruction[1] = \<const0> ;
  assign Trace_Instruction[2] = \<const0> ;
  assign Trace_Instruction[3] = \<const0> ;
  assign Trace_Instruction[4] = \<const0> ;
  assign Trace_Instruction[5] = \<const0> ;
  assign Trace_Instruction[6] = \<const0> ;
  assign Trace_Instruction[7] = \<const0> ;
  assign Trace_Instruction[8] = \<const0> ;
  assign Trace_Instruction[9] = \<const0> ;
  assign Trace_Instruction[10] = \<const0> ;
  assign Trace_Instruction[11] = \<const0> ;
  assign Trace_Instruction[12] = \<const0> ;
  assign Trace_Instruction[13] = \<const0> ;
  assign Trace_Instruction[14] = \<const0> ;
  assign Trace_Instruction[15] = \<const0> ;
  assign Trace_Instruction[16] = \<const0> ;
  assign Trace_Instruction[17] = \<const0> ;
  assign Trace_Instruction[18] = \<const0> ;
  assign Trace_Instruction[19] = \<const0> ;
  assign Trace_Instruction[20] = \<const0> ;
  assign Trace_Instruction[21] = \<const0> ;
  assign Trace_Instruction[22] = \<const0> ;
  assign Trace_Instruction[23] = \<const0> ;
  assign Trace_Instruction[24] = \<const0> ;
  assign Trace_Instruction[25] = \<const0> ;
  assign Trace_Instruction[26] = \<const0> ;
  assign Trace_Instruction[27] = \<const0> ;
  assign Trace_Instruction[28] = \<const0> ;
  assign Trace_Instruction[29] = \<const0> ;
  assign Trace_Instruction[30] = \<const0> ;
  assign Trace_Instruction[31] = \<const0> ;
  assign Trace_Jump_Taken = \<const0> ;
  assign Trace_MB_Halted = \<const0> ;
  assign Trace_MSR_Reg[0] = \<const0> ;
  assign Trace_MSR_Reg[1] = \<const0> ;
  assign Trace_MSR_Reg[2] = \<const0> ;
  assign Trace_MSR_Reg[3] = \<const0> ;
  assign Trace_MSR_Reg[4] = \<const0> ;
  assign Trace_MSR_Reg[5] = \<const0> ;
  assign Trace_MSR_Reg[6] = \<const0> ;
  assign Trace_MSR_Reg[7] = \<const0> ;
  assign Trace_MSR_Reg[8] = \<const0> ;
  assign Trace_MSR_Reg[9] = \<const0> ;
  assign Trace_MSR_Reg[10] = \<const0> ;
  assign Trace_MSR_Reg[11] = \<const0> ;
  assign Trace_MSR_Reg[12] = \<const0> ;
  assign Trace_MSR_Reg[13] = \<const0> ;
  assign Trace_MSR_Reg[14] = \<const0> ;
  assign Trace_New_Reg_Value[0] = \<const0> ;
  assign Trace_New_Reg_Value[1] = \<const0> ;
  assign Trace_New_Reg_Value[2] = \<const0> ;
  assign Trace_New_Reg_Value[3] = \<const0> ;
  assign Trace_New_Reg_Value[4] = \<const0> ;
  assign Trace_New_Reg_Value[5] = \<const0> ;
  assign Trace_New_Reg_Value[6] = \<const0> ;
  assign Trace_New_Reg_Value[7] = \<const0> ;
  assign Trace_New_Reg_Value[8] = \<const0> ;
  assign Trace_New_Reg_Value[9] = \<const0> ;
  assign Trace_New_Reg_Value[10] = \<const0> ;
  assign Trace_New_Reg_Value[11] = \<const0> ;
  assign Trace_New_Reg_Value[12] = \<const0> ;
  assign Trace_New_Reg_Value[13] = \<const0> ;
  assign Trace_New_Reg_Value[14] = \<const0> ;
  assign Trace_New_Reg_Value[15] = \<const0> ;
  assign Trace_New_Reg_Value[16] = \<const0> ;
  assign Trace_New_Reg_Value[17] = \<const0> ;
  assign Trace_New_Reg_Value[18] = \<const0> ;
  assign Trace_New_Reg_Value[19] = \<const0> ;
  assign Trace_New_Reg_Value[20] = \<const0> ;
  assign Trace_New_Reg_Value[21] = \<const0> ;
  assign Trace_New_Reg_Value[22] = \<const0> ;
  assign Trace_New_Reg_Value[23] = \<const0> ;
  assign Trace_New_Reg_Value[24] = \<const0> ;
  assign Trace_New_Reg_Value[25] = \<const0> ;
  assign Trace_New_Reg_Value[26] = \<const0> ;
  assign Trace_New_Reg_Value[27] = \<const0> ;
  assign Trace_New_Reg_Value[28] = \<const0> ;
  assign Trace_New_Reg_Value[29] = \<const0> ;
  assign Trace_New_Reg_Value[30] = \<const0> ;
  assign Trace_New_Reg_Value[31] = \<const0> ;
  assign Trace_PC[0] = \<const0> ;
  assign Trace_PC[1] = \<const0> ;
  assign Trace_PC[2] = \<const0> ;
  assign Trace_PC[3] = \<const0> ;
  assign Trace_PC[4] = \<const0> ;
  assign Trace_PC[5] = \<const0> ;
  assign Trace_PC[6] = \<const0> ;
  assign Trace_PC[7] = \<const0> ;
  assign Trace_PC[8] = \<const0> ;
  assign Trace_PC[9] = \<const0> ;
  assign Trace_PC[10] = \<const0> ;
  assign Trace_PC[11] = \<const0> ;
  assign Trace_PC[12] = \<const0> ;
  assign Trace_PC[13] = \<const0> ;
  assign Trace_PC[14] = \<const0> ;
  assign Trace_PC[15] = \<const0> ;
  assign Trace_PC[16] = \<const0> ;
  assign Trace_PC[17] = \<const0> ;
  assign Trace_PC[18] = \<const0> ;
  assign Trace_PC[19] = \<const0> ;
  assign Trace_PC[20] = \<const0> ;
  assign Trace_PC[21] = \<const0> ;
  assign Trace_PC[22] = \<const0> ;
  assign Trace_PC[23] = \<const0> ;
  assign Trace_PC[24] = \<const0> ;
  assign Trace_PC[25] = \<const0> ;
  assign Trace_PC[26] = \<const0> ;
  assign Trace_PC[27] = \<const0> ;
  assign Trace_PC[28] = \<const0> ;
  assign Trace_PC[29] = \<const0> ;
  assign Trace_PC[30] = \<const0> ;
  assign Trace_PC[31] = \<const0> ;
  assign Trace_Reg_Addr[0] = \<const0> ;
  assign Trace_Reg_Addr[1] = \<const0> ;
  assign Trace_Reg_Addr[2] = \<const0> ;
  assign Trace_Reg_Addr[3] = \<const0> ;
  assign Trace_Reg_Addr[4] = \<const0> ;
  assign Trace_Reg_Write = \<const0> ;
  assign Trace_Valid_Instr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hA8)) 
    LMB_Rst_i_1
       (.I0(\reset_vec_reg_n_0_[1] ),
        .I1(p_0_in),
        .I2(\reset_vec_reg_n_0_[2] ),
        .O(LMB_Rst_i_1_n_0));
  FDRE LMB_Rst_reg
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_Rst_i_1_n_0),
        .Q(LMB_Rst_reg_n_0),
        .R(\<const0> ));
  controller_lmb_v10__parameterized1 dlmb
       (.Clk(Clk),
        .LMB_Rst_reg(LMB_Rst_reg_n_0),
        .\No_ECC.lmb_as_reg (dlmb_n_0));
  controller_lmb_bram_if_cntlr dlmb_cntlr
       (.Clk(Clk),
        .POR_FF_I(microblaze_I_n_57),
        .Sl_Rdy(Sl_Rdy),
        .\Using_FPGA.Native (dlmb_cntlr_n_2),
        .is_lwx_I_reg(dlmb_cntlr_n_3),
        .is_swx_I_reg(microblaze_I_n_52),
        .lmb_as(lmb_as),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_write(lmb_reg_write));
  controller_lmb_v10 ilmb
       (.Clk(Clk),
        .LMB_Rst_reg(LMB_Rst_reg_n_0),
        .\No_ECC.Sl_Rdy_reg (ilmb_n_1),
        .reset_temp(\MicroBlaze_Core_I/reset_temp ));
  controller_lmb_bram_if_cntlr__parameterized1 ilmb_cntlr
       (.Clk(Clk),
        .LMB_Ready(LMB_Ready),
        .POR_FF_I(microblaze_I_n_51),
        .POR_FF_I_0(ilmb_n_1),
        .Sl_Rdy(Sl_Rdy_0),
        .lmb_as(lmb_as_1));
  controller_iomodule iomodule_0
       (.Clk(Clk),
        .D({BRAM_Addr_B[24],BRAM_Addr_B[25],BRAM_Addr_B[26],BRAM_Addr_B[27],BRAM_Addr_B[28],BRAM_Addr_B[29]}),
        .DATA_OUTB(Sl_DBus),
        .Data_Read(iomodule_0_n_21),
        .Extend_Data_Read({\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [16],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [17],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [18],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [19],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [20],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [21],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [22],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [23],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [24],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [25],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [26],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [27],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [28],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [29],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [30],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [31]}),
        .GPI1(GPI1),
        .GPO1(GPO1),
        .INTC_IRQ(INTC_IRQ),
        .LMB_Rst_reg(LMB_Rst_reg_n_0),
        .\No_ECC.lmb_as_reg (dlmb_cntlr_n_3),
        .Q(INTC_Processor_Ack),
        .Sl_Rdy(Sl_Rdy),
        .Sleep_Decode(\MicroBlaze_Core_I/Sleep_Decode ),
        .UART_Interrupt(UART_Interrupt),
        .UART_Rx(UART_Rx),
        .UART_Tx(UART_Tx),
        .\Using_FPGA.Native (iomodule_0_n_25),
        .\Using_FPGA.Native_0 (iomodule_0_n_26),
        .\Using_FPGA.Native_1 (iomodule_0_n_27),
        .\Using_FPGA.Native_10 (iomodule_0_n_36),
        .\Using_FPGA.Native_11 (iomodule_0_n_37),
        .\Using_FPGA.Native_12 (iomodule_0_n_38),
        .\Using_FPGA.Native_13 (iomodule_0_n_39),
        .\Using_FPGA.Native_14 (INTC_Interrupt_Address),
        .\Using_FPGA.Native_2 (iomodule_0_n_28),
        .\Using_FPGA.Native_3 (iomodule_0_n_29),
        .\Using_FPGA.Native_4 (iomodule_0_n_30),
        .\Using_FPGA.Native_5 (iomodule_0_n_31),
        .\Using_FPGA.Native_6 (iomodule_0_n_32),
        .\Using_FPGA.Native_7 (iomodule_0_n_33),
        .\Using_FPGA.Native_8 (iomodule_0_n_34),
        .\Using_FPGA.Native_9 (iomodule_0_n_35),
        .active_wakeup0(\MicroBlaze_Core_I/Area.Core/Decode_I/active_wakeup0 ),
        .ex_Valid_reg(iomodule_0_n_22),
        .is_lwx_I_reg(iomodule_0_n_23),
        .lmb_as(lmb_as),
        .lmb_reg_read0(lmb_reg_read0),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write0(lmb_reg_write0),
        .sel_LSB(\MicroBlaze_Core_I/Area.Core/Byte_Doublet_Handle_I/sel_LSB ),
        .\write_Addr_I_reg[0] ({BRAM_Din_B[0],BRAM_Din_B[1],BRAM_Din_B[2],BRAM_Din_B[3],BRAM_Din_B[4],BRAM_Din_B[5],BRAM_Din_B[6],BRAM_Din_B[7],BRAM_Din_B[8],BRAM_Din_B[9],BRAM_Din_B[10],BRAM_Din_B[11],BRAM_Din_B[12],BRAM_Din_B[13],BRAM_Din_B[14],BRAM_Din_B[15],BRAM_Din_B[16],BRAM_Din_B[17],BRAM_Din_B[18],BRAM_Din_B[19],BRAM_Din_B[20],BRAM_Din_B[21],BRAM_Din_B[22],BRAM_Din_B[23],BRAM_Din_B[24],BRAM_Din_B[25],BRAM_Din_B[26],BRAM_Din_B[27],BRAM_Din_B[28],BRAM_Din_B[29],BRAM_Din_B[30],BRAM_Din_B[31]}));
  controller_lmb_bram lmb_bram_I
       (.ADDRARDADDR({BRAM_Addr_A[17],BRAM_Addr_A[18],BRAM_Addr_A[19],BRAM_Addr_A[20],BRAM_Addr_A[21],BRAM_Addr_A[22],BRAM_Addr_A[23],BRAM_Addr_A[24],BRAM_Addr_A[25],BRAM_Addr_A[26],BRAM_Addr_A[27],BRAM_Addr_A[28],BRAM_Addr_A[29]}),
        .ADDRBWRADDR({BRAM_Addr_B[17],BRAM_Addr_B[18],BRAM_Addr_B[19],BRAM_Addr_B[20],BRAM_Addr_B[21],BRAM_Addr_B[22],BRAM_Addr_B[23],BRAM_Addr_B[24],BRAM_Addr_B[25],BRAM_Addr_B[26],BRAM_Addr_B[27],BRAM_Addr_B[28],BRAM_Addr_B[29]}),
        .Clk(Clk),
        .DATA_INB(BRAM_Din_B),
        .DATA_OUTA(LMB_ReadDBus),
        .DATA_OUTB(Sl_DBus),
        .ENB(microblaze_I_n_50),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .WEB(BRAM_WEN_B));
  controller_MicroBlaze microblaze_I
       (.ADDRARDADDR({BRAM_Addr_A[17],BRAM_Addr_A[18],BRAM_Addr_A[19],BRAM_Addr_A[20],BRAM_Addr_A[21],BRAM_Addr_A[22],BRAM_Addr_A[23],BRAM_Addr_A[24],BRAM_Addr_A[25],BRAM_Addr_A[26],BRAM_Addr_A[27],BRAM_Addr_A[28],BRAM_Addr_A[29]}),
        .ADDRBWRADDR({BRAM_Addr_B[17],BRAM_Addr_B[18],BRAM_Addr_B[19],BRAM_Addr_B[20],BRAM_Addr_B[21],BRAM_Addr_B[22],BRAM_Addr_B[23],BRAM_Addr_B[24],BRAM_Addr_B[25],BRAM_Addr_B[26],BRAM_Addr_B[27],BRAM_Addr_B[28],BRAM_Addr_B[29]}),
        .Clk(Clk),
        .DATA_INB(BRAM_Din_B),
        .DATA_OUTA(LMB_ReadDBus),
        .Data_Read(iomodule_0_n_21),
        .Extend_Data_Read({\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [16],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [17],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [18],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [19],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [20],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [21],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [22],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [23],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [24],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [25],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [26],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [27],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [28],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [29],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [30],\MicroBlaze_Core_I/Area.Core/Extend_Data_Read [31]}),
        .INTC_IRQ(INTC_IRQ),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_Ready(LMB_Ready),
        .\No_ECC.Sl_Rdy_reg (microblaze_I_n_57),
        .\No_ECC.lmb_as_reg (microblaze_I_n_51),
        .\No_ECC.lmb_as_reg_0 (microblaze_I_n_52),
        .\No_ECC.lmb_as_reg_1 (dlmb_cntlr_n_2),
        .\No_ECC.lmb_as_reg_2 (dlmb_cntlr_n_3),
        .POR_FF_I(dlmb_n_0),
        .Q(INTC_Processor_Ack),
        .Sl_Rdy(Sl_Rdy_0),
        .Sleep_Decode(\MicroBlaze_Core_I/Sleep_Decode ),
        .\Using_B36_S4.The_BRAMs[0].RAMB36_I1 (microblaze_I_n_50),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1 (iomodule_0_n_28),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_0 (iomodule_0_n_27),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_1 (iomodule_0_n_26),
        .\Using_B36_S4.The_BRAMs[2].RAMB36_I1_2 (iomodule_0_n_25),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1 (iomodule_0_n_31),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 (iomodule_0_n_30),
        .\Using_B36_S4.The_BRAMs[3].RAMB36_I1_1 (iomodule_0_n_29),
        .\Using_Fast.Using_LUTRAM.intr_addr_i_reg[12] (INTC_Interrupt_Address),
        .WEB(BRAM_WEN_B),
        .active_wakeup0(\MicroBlaze_Core_I/Area.Core/Decode_I/active_wakeup0 ),
        .\cipr_rd_dff_all[24].fdr_i (iomodule_0_n_39),
        .\cipr_rd_dff_all[25].fdr_i (iomodule_0_n_38),
        .\cipr_rd_dff_all[26].fdr_i (iomodule_0_n_37),
        .\cipr_rd_dff_all[27].fdr_i (iomodule_0_n_36),
        .\cipr_rd_dff_all[28].fdr_i (iomodule_0_n_35),
        .\cipr_rd_dff_all[29].fdr_i (iomodule_0_n_34),
        .\cipr_rd_dff_all[30].fdr_i (iomodule_0_n_33),
        .\cipr_rd_dff_all[31].fdr_i (iomodule_0_n_32),
        .lmb_as(lmb_as_1),
        .lmb_reg_read0(lmb_reg_read0),
        .lmb_reg_read_Q(lmb_reg_read_Q),
        .lmb_reg_read_Q_reg(iomodule_0_n_23),
        .lmb_reg_write(lmb_reg_write),
        .lmb_reg_write0(lmb_reg_write0),
        .lmb_reg_write_reg(iomodule_0_n_22),
        .reset_temp(\MicroBlaze_Core_I/reset_temp ),
        .sel_LSB(\MicroBlaze_Core_I/Area.Core/Byte_Doublet_Handle_I/sel_LSB ));
  FDRE \reset_vec_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(Reset),
        .Q(p_0_in),
        .R(\<const0> ));
  FDRE \reset_vec_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(\reset_vec_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE \reset_vec_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\reset_vec_reg_n_0_[1] ),
        .Q(\reset_vec_reg_n_0_[2] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE
   (Carry_In,
    Shift_Carry_In_reg,
    Shift_Carry_In_reg_0,
    out,
    mul_Executing_reg,
    write_Carry_I_reg,
    Clk,
    \Using_LWX_SWX_instr.reservation_reg ,
    is_swx_I_reg,
    is_lwx_I,
    load_Store_i,
    ex_Valid,
    MSR,
    write_Carry_I_reg_0);
  output Carry_In;
  output Shift_Carry_In_reg;
  output Shift_Carry_In_reg_0;
  input [0:0]out;
  input mul_Executing_reg;
  input write_Carry_I_reg;
  input Clk;
  input \Using_LWX_SWX_instr.reservation_reg ;
  input is_swx_I_reg;
  input is_lwx_I;
  input load_Store_i;
  input ex_Valid;
  input [0:0]MSR;
  input write_Carry_I_reg_0;

  wire Carry_In;
  wire Clk;
  wire [0:0]MSR;
  wire Shift_Carry_In_reg;
  wire Shift_Carry_In_reg_0;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire ex_Valid;
  wire is_lwx_I;
  wire is_swx_I_reg;
  wire load_Store_i;
  wire mul_Executing_reg;
  wire [0:0]out;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(write_Carry_I_reg),
        .Q(Carry_In),
        .R(out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__129 
       (.I0(write_Carry_I_reg_0),
        .I1(ex_Valid),
        .O(Shift_Carry_In_reg_0));
  LUT6 #(
    .INIT(64'h47FFFFFF44000000)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(\Using_LWX_SWX_instr.reservation_reg ),
        .I1(is_swx_I_reg),
        .I2(is_lwx_I),
        .I3(load_Store_i),
        .I4(ex_Valid),
        .I5(MSR),
        .O(Shift_Carry_In_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_0
   (ALU_Op,
    out,
    mul_Executing_reg,
    D,
    Clk);
  output [0:0]ALU_Op;
  input [0:0]out;
  input mul_Executing_reg;
  input D;
  input Clk;

  wire [0:0]ALU_Op;
  wire Clk;
  wire D;
  wire mul_Executing_reg;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(D),
        .Q(ALU_Op),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_1
   (ALU_Op,
    out,
    mul_Executing_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Clk);
  output [0:0]ALU_Op;
  input [0:0]out;
  input mul_Executing_reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input Clk;

  wire [0:0]ALU_Op;
  wire Clk;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire mul_Executing_reg;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Q(ALU_Op),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_11
   (Reg_Test_Equal_N,
    R_0,
    mul_Executing_reg,
    Reg_Test_Equal_N_i7_out,
    Clk);
  output Reg_Test_Equal_N;
  input R_0;
  input mul_Executing_reg;
  input Reg_Test_Equal_N_i7_out;
  input Clk;

  wire Clk;
  wire R_0;
  wire Reg_Test_Equal_N;
  wire Reg_Test_Equal_N_i7_out;
  wire mul_Executing_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(Reg_Test_Equal_N_i7_out),
        .Q(Reg_Test_Equal_N),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_12
   (break_Pipe_i_reg,
    R_0,
    mul_Executing_reg,
    use_Reg_Neg_DI_i28_out,
    Clk);
  output break_Pipe_i_reg;
  input R_0;
  input mul_Executing_reg;
  input use_Reg_Neg_DI_i28_out;
  input Clk;

  wire Clk;
  wire R_0;
  wire break_Pipe_i_reg;
  wire mul_Executing_reg;
  wire use_Reg_Neg_DI_i28_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(use_Reg_Neg_DI_i28_out),
        .Q(break_Pipe_i_reg),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_13
   (break_Pipe_i_reg,
    R_0,
    mul_Executing_reg,
    use_Reg_Neg_S_i30_out,
    Clk);
  output break_Pipe_i_reg;
  input R_0;
  input mul_Executing_reg;
  input use_Reg_Neg_S_i30_out;
  input Clk;

  wire Clk;
  wire R_0;
  wire break_Pipe_i_reg;
  wire mul_Executing_reg;
  wire use_Reg_Neg_S_i30_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(use_Reg_Neg_S_i30_out),
        .Q(break_Pipe_i_reg),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_3
   (break_Pipe_i_reg,
    R_0,
    mul_Executing_reg,
    force1_i31_out,
    Clk);
  output break_Pipe_i_reg;
  input R_0;
  input mul_Executing_reg;
  input force1_i31_out;
  input Clk;

  wire Clk;
  wire R_0;
  wire break_Pipe_i_reg;
  wire force1_i31_out;
  wire mul_Executing_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(force1_i31_out),
        .Q(break_Pipe_i_reg),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_4
   (break_Pipe_i_reg,
    R_0,
    mul_Executing_reg,
    force2_i,
    Clk);
  output break_Pipe_i_reg;
  input R_0;
  input mul_Executing_reg;
  input force2_i;
  input Clk;

  wire Clk;
  wire R_0;
  wire break_Pipe_i_reg;
  wire force2_i;
  wire mul_Executing_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(force2_i),
        .Q(break_Pipe_i_reg),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_454
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_455
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_457
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_458
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_461
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_462
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_465
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_466
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_469
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_470
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_473
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_474
   (\Zero_Detecting[5].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Zero_Detecting[5].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Zero_Detecting[5].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_477
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_478
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_481
   (Op1_Logic,
    out,
    normal_piperun,
    D,
    Clk);
  output Op1_Logic;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire Op1_Logic;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(Op1_Logic),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_482
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_485
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_486
   (\Zero_Detecting[0].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 );
  output \Zero_Detecting[0].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Zero_Detecting[0].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_489
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_490
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_493
   (Op1_Shift,
    out,
    normal_piperun,
    D,
    Clk);
  output Op1_Shift;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire Op1_Shift;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(Op1_Shift),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_494
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_497
   (Shifted,
    out,
    normal_piperun,
    D,
    Clk);
  output Shifted;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire Shifted;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(Shifted),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_498
   (\Zero_Detecting[1].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Zero_Detecting[1].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Zero_Detecting[1].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_5
   (break_Pipe_i_reg,
    R_0,
    mul_Executing_reg,
    force_Val1_i29_out,
    Clk);
  output break_Pipe_i_reg;
  input R_0;
  input mul_Executing_reg;
  input force_Val1_i29_out;
  input Clk;

  wire Clk;
  wire R_0;
  wire break_Pipe_i_reg;
  wire force_Val1_i29_out;
  wire mul_Executing_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mul_Executing_reg),
        .D(force_Val1_i29_out),
        .Q(break_Pipe_i_reg),
        .R(R_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_501
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_502
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_505
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_506
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_509
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_510
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_513
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_514
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_517
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_518
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_521
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_522
   (\Zero_Detecting[2].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Zero_Detecting[2].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Zero_Detecting[2].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_525
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_526
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_529
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_530
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_533
   (lmb_reg_write_reg,
    out,
    normal_piperun,
    D,
    Clk);
  output lmb_reg_write_reg;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire lmb_reg_write_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(lmb_reg_write_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_534
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_537
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_538
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_541
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_542
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_545
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_546
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_549
   (\Using_FPGA.Native_0 ,
    Sext,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    out,
    normal_piperun,
    D,
    Clk,
    Sext16,
    \Using_FPGA.Native_16 ,
    Sext8);
  output \Using_FPGA.Native_0 ;
  output Sext;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;
  input Sext16;
  input \Using_FPGA.Native_16 ;
  input Sext8;

  wire Clk;
  wire D;
  wire Sext;
  wire Sext16;
  wire Sext8;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(Sext));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_3 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_4 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_5 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_6 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_7 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_8 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_9 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_10 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_11 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_12 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_13 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_14 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Using_FPGA.Native_i_2__37 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Sext16),
        .I2(\Using_FPGA.Native_16 ),
        .I3(Sext8),
        .O(\Using_FPGA.Native_15 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_550
   (\Zero_Detecting[3].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Zero_Detecting[3].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Zero_Detecting[3].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_553
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_554
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_557
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_558
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_561
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_562
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_565
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_566
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_569
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_570
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_573
   (\Using_FPGA.Native_0 ,
    out,
    normal_piperun,
    D,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_574
   (\Zero_Detecting[4].nibble_Zero_reg ,
    out,
    normal_piperun,
    D0_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Zero_Detecting[4].nibble_Zero_reg ;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Zero_Detecting[4].nibble_Zero_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_577
   (\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ,
    \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ,
    out,
    normal_piperun,
    D,
    Clk,
    Compare_Instr,
    \Using_FPGA.Native_0 );
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  output \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  input [0:0]out;
  input normal_piperun;
  input D;
  input Clk;
  input Compare_Instr;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire Compare_Instr;
  wire D;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Using_FPGA.Native_0 ;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D),
        .Q(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .R(out));
  LUT3 #(
    .INIT(8'hD7)) 
    \Using_FPGA.Native_i_1__121 
       (.I0(Compare_Instr),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_1 ));
  LUT3 #(
    .INIT(8'hD7)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(Compare_Instr),
        .I1(\Using_B36_S4.The_BRAMs[1].RAMB36_I1 ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_B36_S4.The_BRAMs[1].RAMB36_I1_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_FDRE" *) 
module controller_microblaze_v9_5_MB_FDRE_578
   (break_Pipe_i_reg,
    out,
    normal_piperun,
    D0_out,
    Clk);
  output break_Pipe_i_reg;
  input [0:0]out;
  input normal_piperun;
  input D0_out;
  input Clk;

  wire Clk;
  wire D0_out;
  wire break_Pipe_i_reg;
  wire normal_piperun;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(normal_piperun),
        .D(D0_out),
        .Q(break_Pipe_i_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6
   (I3,
    Op2,
    ALU_Op,
    Op1_Logic);
  output I3;
  input Op2;
  input [0:1]ALU_Op;
  input Op1_Logic;

  wire [0:1]ALU_Op;
  wire I3;
  wire Op1_Logic;
  wire Op2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(ALU_Op[0]),
        .I2(Op1_Logic),
        .I3(ALU_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_219
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_221
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[24].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[24].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[24].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[24].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_223
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[25].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[25].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[25].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[25].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_225
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[26].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[26].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[26].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[26].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_227
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[27].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[27].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[27].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[27].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_229
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[28].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[28].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[28].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[28].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_231
   (EX_Result,
    \Result_Sel_reg[0] ,
    Shift_Logic_Res,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Shift_Logic_Res;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Shift_Logic_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Shift_Logic_Res),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_233
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_235
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[29].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[29].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[29].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[29].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_237
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_239
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_241
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_243
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_245
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_247
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(1'b1),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_249
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_251
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_253
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_255
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_257
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[30].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[30].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[30].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[30].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_259
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_261
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_263
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_265
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Extend_Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input [0:0]Extend_Data_Read;
  input I4;

  wire [0:0]EX_Result;
  wire [0:0]Extend_Data_Read;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Extend_Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_267
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    Data_Read,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input Data_Read;
  input I4;

  wire Data_Read;
  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(Data_Read),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_269
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_271
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_273
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[3].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_275
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_277
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \Using_B36_S4.The_BRAMs[2].RAMB36_I1 ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\Using_B36_S4.The_BRAMs[2].RAMB36_I1 ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_LUT6" *) 
module controller_microblaze_v9_5_MB_LUT6__parameterized0_279
   (EX_Result,
    \Result_Sel_reg[0] ,
    Select_Logic_reg,
    data_Read_Mask,
    \cipr_rd_dff_all[31].fdr_i ,
    I4);
  output [0:0]EX_Result;
  input [1:0]\Result_Sel_reg[0] ;
  input Select_Logic_reg;
  input [0:0]data_Read_Mask;
  input \cipr_rd_dff_all[31].fdr_i ;
  input I4;

  wire [0:0]EX_Result;
  wire I4;
  wire [1:0]\Result_Sel_reg[0] ;
  wire Select_Logic_reg;
  wire \cipr_rd_dff_all[31].fdr_i ;
  wire [0:0]data_Read_Mask;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(\Result_Sel_reg[0] [0]),
        .I1(Select_Logic_reg),
        .I2(data_Read_Mask),
        .I3(\cipr_rd_dff_all[31].fdr_i ),
        .I4(I4),
        .I5(\Result_Sel_reg[0] [1]),
        .O(EX_Result));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY
   (\Using_FPGA.Native_0 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ,
    \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ,
    write_Carry_I_reg,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native_0 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  input \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  input write_Carry_I_reg;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire write_Carry_I_reg;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(write_Carry_I_reg),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [0]}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,\Using_B36_S4.The_BRAMs[3].RAMB36_I1_0 }),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Using_B36_S4.The_BRAMs[3].RAMB36_I1 }));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_10
   (New_Carry,
    select_ALU_Carry_reg,
    Op1_Low,
    ALU_Carry,
    lopt);
  output New_Carry;
  input select_ALU_Carry_reg;
  input [0:0]Op1_Low;
  input ALU_Carry;
  input lopt;

  wire ALU_Carry;
  wire New_Carry;
  wire [0:0]Op1_Low;
  wire select_ALU_Carry_reg;

  assign New_Carry = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_14
   (OpSel1_SPR,
    \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output OpSel1_SPR;
  input \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire OpSel1_SPR;
  wire \Using_B36_S4.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:1]NLW_CARRY4_CO_UNCONNECTED;
  wire [3:1]NLW_CARRY4_DI_UNCONNECTED;
  wire [3:0]NLW_CARRY4_O_UNCONNECTED;
  wire [3:1]NLW_CARRY4_S_UNCONNECTED;
  wire [1:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_11  = lopt_10;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_12 = lopt_11;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .CO({NLW_CARRY4_CO_UNCONNECTED[3:1],OpSel1_SPR}),
        .CYINIT(1'b0),
        .DI({NLW_CARRY4_DI_UNCONNECTED[3:1],1'b1}),
        .O(NLW_CARRY4_O_UNCONNECTED[3:0]),
        .S({NLW_CARRY4_S_UNCONNECTED[3:1],\Using_B36_S4.The_BRAMs[0].RAMB36_I1 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_10 ,\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1],lopt}),
        .CYINIT(lopt_1),
        .DI({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,\^lopt_3 }),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_12,\^lopt_9 ,\^lopt_6 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_15
   (Select_Logic_reg,
    S0_out,
    mul_Executing_reg,
    lopt);
  output Select_Logic_reg;
  input S0_out;
  input mul_Executing_reg;
  output lopt;

  wire \<const0> ;
  wire S0_out;
  wire Select_Logic_reg;
  wire mul_Executing_reg;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_16
   (Select_Logic_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    lopt,
    lopt_1);
  output Select_Logic_reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Select_Logic_reg;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;

  assign Select_Logic_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_17
   (Select_Logic_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    lopt,
    lopt_1,
    lopt_2);
  output Select_Logic_reg;
  input \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire Select_Logic_reg;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;

  assign Select_Logic_reg = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_18
   (mbar_is_sleep_reg,
    nonvalid_IFetch_n_reg,
    LMB_Ready,
    lopt,
    lopt_1);
  output mbar_is_sleep_reg;
  input nonvalid_IFetch_n_reg;
  input LMB_Ready;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire LMB_Ready;
  wire mbar_is_sleep_reg;
  wire nonvalid_IFetch_n_reg;

  assign lopt_1 = \<const0> ;
  assign mbar_is_sleep_reg = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_19
   (CI,
    S,
    \Using_FPGA.Native_0 ,
    lopt);
  output CI;
  input S;
  input \Using_FPGA.Native_0 ;
  output lopt;

  wire \<const1> ;
  wire CI;
  wire S;
  wire \Using_FPGA.Native_0 ;

  assign lopt = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_2
   (Shift_Carry_In_reg,
    write_Carry_I_reg,
    \Using_LWX_SWX_instr.reservation_reg ,
    New_Carry,
    lopt);
  output Shift_Carry_In_reg;
  input write_Carry_I_reg;
  input \Using_LWX_SWX_instr.reservation_reg ;
  input New_Carry;
  input lopt;

  wire New_Carry;
  wire Shift_Carry_In_reg;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire write_Carry_I_reg;

  assign Shift_Carry_In_reg = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_20
   (CI97_in,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    CI,
    lopt,
    lopt_1);
  output CI97_in;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input CI;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire CI;
  wire CI97_in;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;

  assign CI97_in = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_21
   (\Using_FPGA.Native_0 ,
    mul_Executing_reg,
    DI,
    \No_ECC.lmb_as_reg ,
    lopt);
  output \Using_FPGA.Native_0 ;
  input mul_Executing_reg;
  input DI;
  input \No_ECC.lmb_as_reg ;
  input lopt;

  wire DI;
  wire \No_ECC.lmb_as_reg ;
  wire \Using_FPGA.Native_0 ;
  wire mul_Executing_reg;

  assign \Using_FPGA.Native_0  = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_57
   (CI,
    Reg_Test_Equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output CI;
  input Reg_Test_Equal;
  input lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;

  wire CI;
  wire Reg_Test_Equal;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({\^lopt_1 ,\^lopt_1 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_5,\^lopt_3 ,\^lopt_2 ,Reg_Test_Equal}));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_58
   (break_Pipe_i_reg,
    \Zero_Detecting[0].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    CI);
  output break_Pipe_i_reg;
  input \Zero_Detecting[0].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input CI;

  wire CI;
  wire Reg_Test_Equal_N;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire break_Pipe_i_reg;

endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_59
   (break_Pipe_i_reg,
    \Zero_Detecting[1].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Using_FPGA.Native_0 );
  output break_Pipe_i_reg;
  input \Zero_Detecting[1].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Using_FPGA.Native_0 ;

  wire Reg_Test_Equal_N;
  wire \Using_FPGA.Native_0 ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire break_Pipe_i_reg;

endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_6
   (\Using_FPGA.Native_0 ,
    load_Store_i2,
    write_Carry_I_reg,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  input load_Store_i2;
  input write_Carry_I_reg;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire load_Store_i2;
  wire write_Carry_I_reg;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_60
   (break_Pipe_i_reg,
    \Zero_Detecting[2].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Using_FPGA.Native_0 ,
    lopt);
  output break_Pipe_i_reg;
  input \Zero_Detecting[2].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Using_FPGA.Native_0 ;
  input lopt;

  wire Reg_Test_Equal_N;
  wire \Using_FPGA.Native_0 ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire break_Pipe_i_reg;

  assign break_Pipe_i_reg = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_61
   (break_Pipe_i_reg,
    \Zero_Detecting[3].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output break_Pipe_i_reg;
  input \Zero_Detecting[3].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire Reg_Test_Equal_N;
  wire \Using_FPGA.Native_0 ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire break_Pipe_i_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(\Using_FPGA.Native_0 ),
        .CO({\^lopt_3 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_4 ,Reg_Test_Equal_N,Reg_Test_Equal_N,Reg_Test_Equal_N}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_5,\^lopt_2 ,\^lopt_1 ,\Zero_Detecting[3].nibble_Zero_reg }));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_615
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    S,
    DI,
    lopt,
    lopt_1);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input S;
  input DI;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire DI;
  wire S;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  assign \Using_B36_S4.The_BRAMs[7].RAMB36_I1  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_62
   (break_Pipe_i_reg,
    \Zero_Detecting[4].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Using_FPGA.Native_0 );
  output break_Pipe_i_reg;
  input \Zero_Detecting[4].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Using_FPGA.Native_0 ;

  wire Reg_Test_Equal_N;
  wire \Using_FPGA.Native_0 ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire break_Pipe_i_reg;

endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_63
   (Reg_zero,
    \Zero_Detecting[5].nibble_Zero_reg ,
    Reg_Test_Equal_N,
    \Using_FPGA.Native_0 );
  output Reg_zero;
  input \Zero_Detecting[5].nibble_Zero_reg ;
  input Reg_Test_Equal_N;
  input \Using_FPGA.Native_0 ;

  wire Reg_Test_Equal_N;
  wire Reg_zero;
  wire \Using_FPGA.Native_0 ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;

endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_680
   (CI,
    Compare_Instr_reg,
    Unsigned_Op,
    EX_CarryOut,
    lopt);
  output CI;
  input Compare_Instr_reg;
  input Unsigned_Op;
  input EX_CarryOut;
  input lopt;

  wire CI;
  wire Compare_Instr_reg;
  wire EX_CarryOut;
  wire Unsigned_Op;

  assign CI = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_7
   (break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg_zero,
    lopt);
  output break_Pipe_i_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Reg_zero;
  input lopt;

  wire Reg_zero;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire break_Pipe_i_reg;

  assign break_Pipe_i_reg = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_8
   (CI64_in,
    ex_Valid_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output CI64_in;
  input ex_Valid_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire CI64_in;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_Valid_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [2:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(\Using_FPGA.Native_1 ),
        .CO({\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2],\^lopt_1 ,CI64_in}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_3 ,ex_Valid_reg}));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXCY" *) 
module controller_microblaze_v9_5_MB_MUXCY_9
   (break_Pipe_i_reg,
    \Using_FPGA.Native_0 ,
    CI64_in,
    lopt,
    lopt_1);
  output break_Pipe_i_reg;
  input \Using_FPGA.Native_0 ;
  input CI64_in;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire CI64_in;
  wire \Using_FPGA.Native_0 ;
  wire break_Pipe_i_reg;

  assign break_Pipe_i_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_100
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_103
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_106
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_109
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_112
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_115
   (Shift_Logic_Res,
    Select_Logic,
    I0,
    I1);
  output Shift_Logic_Res;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire Shift_Logic_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(Shift_Logic_Res),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_118
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_121
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_124
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_127
   (\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[7].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[7].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_130
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_133
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_136
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_139
   (\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ,
    Select_Logic,
    I0,
    I1);
  output \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_B36_S4.The_BRAMs[6].RAMB36_I1 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_B36_S4.The_BRAMs[6].RAMB36_I1 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_142
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_145
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_148
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_151
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_154
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_157
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_160
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_163
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_166
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_169
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_172
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_175
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_178
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_181
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_184
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_187
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v9_5_MB_MUXF7" *) 
module controller_microblaze_v9_5_MB_MUXF7_97
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    I0,
    I1);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input I0;
  input I1;

  wire I0;
  wire I1;
  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(\Using_FPGA.Native_0 ),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "mux4_8" *) 
module controller_mux4_8
   (DATA_INB,
    Data_Write,
    O67_out,
    O58_out);
  output [15:0]DATA_INB;
  input [0:31]Data_Write;
  input O67_out;
  input O58_out;

  wire [15:0]DATA_INB;
  wire [0:31]Data_Write;
  wire O58_out;
  wire O67_out;

  controller_MB_LUT6_2__parameterized40 \GEN4_LOOP[0].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[15],DATA_INB[7]}),
        .Data_Write({Data_Write[0],Data_Write[8],Data_Write[16],Data_Write[24]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized42 \GEN4_LOOP[1].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[14],DATA_INB[6]}),
        .Data_Write({Data_Write[1],Data_Write[9],Data_Write[17],Data_Write[25]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized44 \GEN4_LOOP[2].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[13],DATA_INB[5]}),
        .Data_Write({Data_Write[2],Data_Write[10],Data_Write[18],Data_Write[26]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized46 \GEN4_LOOP[3].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[12],DATA_INB[4]}),
        .Data_Write({Data_Write[3],Data_Write[11],Data_Write[19],Data_Write[27]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized48 \GEN4_LOOP[4].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[11],DATA_INB[3]}),
        .Data_Write({Data_Write[4],Data_Write[12],Data_Write[20],Data_Write[28]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized50 \GEN4_LOOP[5].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[10],DATA_INB[2]}),
        .Data_Write({Data_Write[5],Data_Write[13],Data_Write[21],Data_Write[29]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized52 \GEN4_LOOP[6].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[9],DATA_INB[1]}),
        .Data_Write({Data_Write[6],Data_Write[14],Data_Write[22],Data_Write[30]}),
        .S({O67_out,O58_out}));
  controller_MB_LUT6_2__parameterized54 \GEN4_LOOP[7].BYTESTEER_LUT6 
       (.DATA_INB({DATA_INB[8],DATA_INB[0]}),
        .Data_Write({Data_Write[7],Data_Write[15],Data_Write[23],Data_Write[31]}),
        .S({O67_out,O58_out}));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
